!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CreateBank	Banks/BankFactory.cpp	/^Bank *BankFactory::CreateBank( std::string bankName )$/;"	f	class:BankFactory
CreateBankNoWarn	Banks/BankFactory.cpp	/^Bank *BankFactory::CreateBankNoWarn( std::string bankName )$/;"	f	class:BankFactory
CreateNewBank	Banks/BankFactory.cpp	/^Bank *BankFactory::CreateNewBank( std::string bankName )$/;"	f	class:BankFactory
BankFactory	Banks/BankFactory.h	/^    BankFactory( ) { }$/;"	f	class:NVM::BankFactory
BankFactory	Banks/BankFactory.h	/^class BankFactory$/;"	c	namespace:NVM
NVM	Banks/BankFactory.h	/^namespace NVM {$/;"	n
__BANKFACTORY_H__	Banks/BankFactory.h	35;"	d
~BankFactory	Banks/BankFactory.h	/^    ~BankFactory( ) { }$/;"	f	class:NVM::BankFactory
Activate	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Activate( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
CachedDDR3Bank	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^CachedDDR3Bank::CachedDDR3Bank( )$/;"	f	class:CachedDDR3Bank
CalculateStats	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::CalculateStats( )$/;"	f	class:CachedDDR3Bank
IsIssuable	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::IsIssuable( NVMainRequest *request, FailReason *reason )$/;"	f	class:CachedDDR3Bank
Read	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Read( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
RegisterStats	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::RegisterStats( )$/;"	f	class:CachedDDR3Bank
SetConfig	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::SetConfig( Config *config, bool createChildren )$/;"	f	class:CachedDDR3Bank
Write	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Write( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
~CachedDDR3Bank	Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^CachedDDR3Bank::~CachedDDR3Bank( )$/;"	f	class:CachedDDR3Bank
CachedDDR3Bank	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^class CachedDDR3Bank : public DDR3Bank$/;"	c	namespace:NVM
CachedRowBuffer	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^struct CachedRowBuffer$/;"	s	namespace:NVM
NVM	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^namespace NVM {$/;"	n
RDBAllocations	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t RDBAllocations;$/;"	m	class:NVM::CachedDDR3Bank
RDBReads	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t RDBReads, RDBWrites;$/;"	m	class:NVM::CachedDDR3Bank
RDBWrites	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t RDBReads, RDBWrites;$/;"	m	class:NVM::CachedDDR3Bank
__CACHEDDDR3BANK_H__	Banks/CachedDDR3Bank/CachedDDR3Bank.h	37;"	d
address	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    NVMAddress address;$/;"	m	struct:NVM::CachedRowBuffer
allocationReadsHisto	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    std::string allocationReadsHisto;$/;"	m	class:NVM::CachedDDR3Bank
allocationReadsMap	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    std::map<uint64_t, uint64_t> allocationReadsMap; \/\/ Number of reads in an allocation, Count$/;"	m	class:NVM::CachedDDR3Bank
allocationWritesHisto	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    std::string allocationWritesHisto;$/;"	m	class:NVM::CachedDDR3Bank
allocationWritesMap	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    std::map<uint64_t, uint64_t> allocationWritesMap;$/;"	m	class:NVM::CachedDDR3Bank
cachedRowBuffer	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    CachedRowBuffer **cachedRowBuffer;$/;"	m	class:NVM::CachedDDR3Bank
colEnd	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t colEnd;$/;"	m	struct:NVM::CachedRowBuffer
colStart	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t colStart;$/;"	m	struct:NVM::CachedRowBuffer
dirty	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    bool *dirty;$/;"	m	struct:NVM::CachedRowBuffer
inRDBCount	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t inRDBCount;$/;"	m	class:NVM::CachedDDR3Bank
readOnlyBuffers	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    bool readOnlyBuffers;$/;"	m	class:NVM::CachedDDR3Bank
reads	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t reads;$/;"	m	struct:NVM::CachedRowBuffer
rowBufferCount	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t rowBufferCount;$/;"	m	class:NVM::CachedDDR3Bank
rowBufferSize	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t rowBufferSize;$/;"	m	class:NVM::CachedDDR3Bank
used	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    bool used;$/;"	m	struct:NVM::CachedRowBuffer
writebackCount	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t writebackCount;$/;"	m	class:NVM::CachedDDR3Bank
writes	Banks/CachedDDR3Bank/CachedDDR3Bank.h	/^    ncounter_t writes;$/;"	m	struct:NVM::CachedRowBuffer
Activate	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Activate( NVMainRequest *request )$/;"	f	class:DDR3Bank
CalculatePower	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::CalculatePower( )$/;"	f	class:DDR3Bank
CalculateStats	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::CalculateStats( )$/;"	f	class:DDR3Bank
Cycle	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::Cycle( ncycle_t steps )$/;"	f	class:DDR3Bank
DDR3Bank	Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3Bank::DDR3Bank( )$/;"	f	class:DDR3Bank
GetId	Banks/DDR3Bank/DDR3Bank.cpp	/^ncounter_t DDR3Bank::GetId( )$/;"	f	class:DDR3Bank
GetName	Banks/DDR3Bank/DDR3Bank.cpp	/^std::string DDR3Bank::GetName( )$/;"	f	class:DDR3Bank
GetPower	Banks/DDR3Bank/DDR3Bank.cpp	/^double DDR3Bank::GetPower( )$/;"	f	class:DDR3Bank
GetState	Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3BankState DDR3Bank::GetState( ) $/;"	f	class:DDR3Bank
Idle	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Idle( )$/;"	f	class:DDR3Bank
IsIssuable	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:DDR3Bank
IssueCommand	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::IssueCommand( NVMainRequest *req )$/;"	f	class:DDR3Bank
NextIssuable	Banks/DDR3Bank/DDR3Bank.cpp	/^ncycle_t DDR3Bank::NextIssuable( NVMainRequest *request )$/;"	f	class:DDR3Bank
PowerDown	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::PowerDown( NVMainRequest *request )$/;"	f	class:DDR3Bank
PowerUp	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::PowerUp( NVMainRequest * \/*request*\/ )$/;"	f	class:DDR3Bank
Precharge	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Precharge( NVMainRequest *request )$/;"	f	class:DDR3Bank
Read	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Read( NVMainRequest *request )$/;"	f	class:DDR3Bank
Refresh	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Refresh( NVMainRequest *request )$/;"	f	class:DDR3Bank
RegisterStats	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::RegisterStats( )$/;"	f	class:DDR3Bank
SetConfig	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetConfig( Config *config, bool createChildren )$/;"	f	class:DDR3Bank
SetId	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetId( ncounter_t id )$/;"	f	class:DDR3Bank
SetName	Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetName( std::string )$/;"	f	class:DDR3Bank
Write	Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Write( NVMainRequest *request )$/;"	f	class:DDR3Bank
~DDR3Bank	Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3Bank::~DDR3Bank( )$/;"	f	class:DDR3Bank
DDR3BANK_CLOSED	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_CLOSED,   \/***< Bank is idle. *\/$/;"	e	enum:NVM::DDR3BankState
DDR3BANK_OPEN	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_OPEN,     \/***< Bank has an active subarray  *\/$/;"	e	enum:NVM::DDR3BankState
DDR3BANK_PDA	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_PDA,      \/***< Bank is in active powered down mode *\/$/;"	e	enum:NVM::DDR3BankState
DDR3BANK_PDPF	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_PDPF,     \/***< Bank is in precharge powered down, fast exit mode *\/$/;"	e	enum:NVM::DDR3BankState
DDR3BANK_PDPS	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_PDPS      \/***< Bank is in precharge powered down, slow exit mode *\/$/;"	e	enum:NVM::DDR3BankState
DDR3BANK_UNKNOWN	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BANK_UNKNOWN,  \/***< Unknown state. Uh oh. *\/$/;"	e	enum:NVM::DDR3BankState
DDR3Bank	Banks/DDR3Bank/DDR3Bank.h	/^class DDR3Bank : public Bank$/;"	c	namespace:NVM
DDR3BankState	Banks/DDR3Bank/DDR3Bank.h	/^enum DDR3BankState $/;"	g	namespace:NVM
GetDataCycles	Banks/DDR3Bank/DDR3Bank.h	/^    virtual ncycle_t GetDataCycles( ) { return dataCycles; }$/;"	f	class:NVM::DDR3Bank
GetOpenRow	Banks/DDR3Bank/DDR3Bank.h	/^    virtual uint64_t GetOpenRow( ) { return openRow; }$/;"	f	class:NVM::DDR3Bank
GetOpenSubArray	Banks/DDR3Bank/DDR3Bank.h	/^    virtual std::deque<ncounter_t>& GetOpenSubArray( ) { return activeSubArrayQueue; }$/;"	f	class:NVM::DDR3Bank
MATHeight	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t MATHeight;$/;"	m	class:NVM::DDR3Bank
MATWidth	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t MATWidth;$/;"	m	class:NVM::DDR3Bank
NVM	Banks/DDR3Bank/DDR3Bank.h	/^namespace NVM {$/;"	n
__DDR3BANK_H__	Banks/DDR3Bank/DDR3Bank.h	37;"	d
actWaitAverage	Banks/DDR3Bank/DDR3Bank.h	/^    double actWaitAverage;$/;"	m	class:NVM::DDR3Bank
actWaitTotal	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t actWaitTotal;$/;"	m	class:NVM::DDR3Bank
actWaits	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t actWaits;$/;"	m	class:NVM::DDR3Bank
activates	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::DDR3Bank
activeCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t activeCycles;$/;"	m	class:NVM::DDR3Bank
activeEnergy	Banks/DDR3Bank/DDR3Bank.h	/^    double activeEnergy;$/;"	m	class:NVM::DDR3Bank
activePower	Banks/DDR3Bank/DDR3Bank.h	/^    double activePower;$/;"	m	class:NVM::DDR3Bank
activeSubArrayQueue	Banks/DDR3Bank/DDR3Bank.h	/^    std::deque<ncounter_t> activeSubArrayQueue;$/;"	m	class:NVM::DDR3Bank
averageEndurance	Banks/DDR3Bank/DDR3Bank.h	/^    uint64_t averageEndurance, worstCaseEndurance;$/;"	m	class:NVM::DDR3Bank
bandwidth	Banks/DDR3Bank/DDR3Bank.h	/^    double bandwidth;$/;"	m	class:NVM::DDR3Bank
bankEnergy	Banks/DDR3Bank/DDR3Bank.h	/^    double bankEnergy;$/;"	m	class:NVM::DDR3Bank
bankId	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t bankId;$/;"	m	class:NVM::DDR3Bank
bankPower	Banks/DDR3Bank/DDR3Bank.h	/^    double bankPower;$/;"	m	class:NVM::DDR3Bank
burstEnergy	Banks/DDR3Bank/DDR3Bank.h	/^    double burstEnergy;$/;"	m	class:NVM::DDR3Bank
burstPower	Banks/DDR3Bank/DDR3Bank.h	/^    double burstPower;$/;"	m	class:NVM::DDR3Bank
dataCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t dataCycles;$/;"	m	class:NVM::DDR3Bank
dummyStat	Banks/DDR3Bank/DDR3Bank.h	/^    int dummyStat;$/;"	m	class:NVM::DDR3Bank
fastExitActiveCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t fastExitActiveCycles;$/;"	m	class:NVM::DDR3Bank
fastExitPrechargeCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t fastExitPrechargeCycles;$/;"	m	class:NVM::DDR3Bank
idleTimer	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t idleTimer;$/;"	m	class:NVM::DDR3Bank
lastActivate	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t lastActivate;$/;"	m	class:NVM::DDR3Bank
lastOperation	Banks/DDR3Bank/DDR3Bank.h	/^    NVMainRequest lastOperation;$/;"	m	class:NVM::DDR3Bank
nextActivate	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextActivate;$/;"	m	class:NVM::DDR3Bank
nextCommand	Banks/DDR3Bank/DDR3Bank.h	/^    BulkCommand nextCommand;$/;"	m	class:NVM::DDR3Bank
nextPowerDown	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextPowerDown;$/;"	m	class:NVM::DDR3Bank
nextPowerDownDone	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextPowerDownDone;$/;"	m	class:NVM::DDR3Bank
nextPowerUp	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextPowerUp;$/;"	m	class:NVM::DDR3Bank
nextPrecharge	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextPrecharge;$/;"	m	class:NVM::DDR3Bank
nextRead	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextRead;$/;"	m	class:NVM::DDR3Bank
nextRefresh	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextRefresh;$/;"	m	class:NVM::DDR3Bank
nextRefreshDone	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextRefreshDone;$/;"	m	class:NVM::DDR3Bank
nextWrite	Banks/DDR3Bank/DDR3Bank.h	/^    ncycle_t nextWrite;$/;"	m	class:NVM::DDR3Bank
openRow	Banks/DDR3Bank/DDR3Bank.h	/^    uint64_t openRow;$/;"	m	class:NVM::DDR3Bank
powerCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t powerCycles;$/;"	m	class:NVM::DDR3Bank
precharges	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::DDR3Bank
reads	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::DDR3Bank
refreshEnergy	Banks/DDR3Bank/DDR3Bank.h	/^    double refreshEnergy;$/;"	m	class:NVM::DDR3Bank
refreshPower	Banks/DDR3Bank/DDR3Bank.h	/^    double refreshPower;$/;"	m	class:NVM::DDR3Bank
refreshes	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::DDR3Bank
slowExitPrechargeCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t slowExitPrechargeCycles;$/;"	m	class:NVM::DDR3Bank
standbyCycles	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t standbyCycles;$/;"	m	class:NVM::DDR3Bank
state	Banks/DDR3Bank/DDR3Bank.h	/^    DDR3BankState state;$/;"	m	class:NVM::DDR3Bank
subArrayNum	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t subArrayNum;$/;"	m	class:NVM::DDR3Bank
utilization	Banks/DDR3Bank/DDR3Bank.h	/^    double utilization;$/;"	m	class:NVM::DDR3Bank
worstCaseEndurance	Banks/DDR3Bank/DDR3Bank.h	/^    uint64_t averageEndurance, worstCaseEndurance;$/;"	m	class:NVM::DDR3Bank
writeCycle	Banks/DDR3Bank/DDR3Bank.h	/^    bool writeCycle;$/;"	m	class:NVM::DDR3Bank
writeMode	Banks/DDR3Bank/DDR3Bank.h	/^    WriteMode writeMode;$/;"	m	class:NVM::DDR3Bank
writes	Banks/DDR3Bank/DDR3Bank.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::DDR3Bank
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
CreateDataEncoder	DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateDataEncoder( std::string encoderName )$/;"	f	class:DataEncoderFactory
CreateDataEncoderNoWarn	DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateDataEncoderNoWarn( std::string encoderName )$/;"	f	class:DataEncoderFactory
CreateNewDataEncoder	DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateNewDataEncoder( std::string encoderName )$/;"	f	class:DataEncoderFactory
DataEncoderFactory	DataEncoders/DataEncoderFactory.h	/^    DataEncoderFactory( ) { }$/;"	f	class:NVM::DataEncoderFactory
DataEncoderFactory	DataEncoders/DataEncoderFactory.h	/^class DataEncoderFactory$/;"	c	namespace:NVM
NVM	DataEncoders/DataEncoderFactory.h	/^namespace NVM {$/;"	n
__DATAENCODERFACTORY_H__	DataEncoders/DataEncoderFactory.h	35;"	d
~DataEncoderFactory	DataEncoders/DataEncoderFactory.h	/^    ~DataEncoderFactory( ) { }$/;"	f	class:NVM::DataEncoderFactory
CalculateStats	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::CalculateStats( )$/;"	f	class:FlipNWrite
FlipNWrite	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^FlipNWrite::FlipNWrite( )$/;"	f	class:FlipNWrite
InvertData	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::InvertData( NVMDataBlock& data, uint64_t startBit, uint64_t endBit )$/;"	f	class:FlipNWrite
Read	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^ncycle_t FlipNWrite::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:FlipNWrite
RegisterStats	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::RegisterStats( )$/;"	f	class:FlipNWrite
SetConfig	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:FlipNWrite
Write	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^ncycle_t FlipNWrite::Write( NVMainRequest *request ) $/;"	f	class:FlipNWrite
~FlipNWrite	DataEncoders/FlipNWrite/FlipNWrite.cpp	/^FlipNWrite::~FlipNWrite( )$/;"	f	class:FlipNWrite
FlipNWrite	DataEncoders/FlipNWrite/FlipNWrite.h	/^class FlipNWrite : public DataEncoder$/;"	c	namespace:NVM
NVM	DataEncoders/FlipNWrite/FlipNWrite.h	/^namespace NVM {$/;"	n
__NVMAIN_FLIPNWRITE_H__	DataEncoders/FlipNWrite/FlipNWrite.h	35;"	d
bitCompareSwapWrites	DataEncoders/FlipNWrite/FlipNWrite.h	/^    uint64_t bitCompareSwapWrites;$/;"	m	class:NVM::FlipNWrite
bitsFlipped	DataEncoders/FlipNWrite/FlipNWrite.h	/^    uint64_t bitsFlipped;$/;"	m	class:NVM::FlipNWrite
flipNWriteReduction	DataEncoders/FlipNWrite/FlipNWrite.h	/^    double flipNWriteReduction;$/;"	m	class:NVM::FlipNWrite
flippedAddresses	DataEncoders/FlipNWrite/FlipNWrite.h	/^    std::set< uint64_t > flippedAddresses;$/;"	m	class:NVM::FlipNWrite
fpSize	DataEncoders/FlipNWrite/FlipNWrite.h	/^    int fpSize;$/;"	m	class:NVM::FlipNWrite
DRCDecoder	Decoders/DRCDecoder/DRCDecoder.cpp	/^DRCDecoder::DRCDecoder( )$/;"	f	class:DRCDecoder
ReverseTranslate	Decoders/DRCDecoder/DRCDecoder.cpp	/^uint64_t DRCDecoder::ReverseTranslate( const uint64_t& row, $/;"	f	class:DRCDecoder
SetCachelineSize	Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::SetCachelineSize( uint64_t lineSize )$/;"	f	class:DRCDecoder
SetIgnoreBits	Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::SetIgnoreBits( uint64_t numIgnore )$/;"	f	class:DRCDecoder
Translate	Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::Translate( uint64_t address, uint64_t *row, uint64_t *col, $/;"	f	class:DRCDecoder
CalculateStats	Decoders/DRCDecoder/DRCDecoder.h	/^    void CalculateStats( ) { }$/;"	f	class:NVM::DRCDecoder
DRCDecoder	Decoders/DRCDecoder/DRCDecoder.h	/^class DRCDecoder : public AddressTranslator$/;"	c	namespace:NVM
NVM	Decoders/DRCDecoder/DRCDecoder.h	/^namespace NVM {$/;"	n
RegisterStats	Decoders/DRCDecoder/DRCDecoder.h	/^    void RegisterStats( ) { }$/;"	f	class:NVM::DRCDecoder
__MEMCONTROL_DRCDECODER_H__	Decoders/DRCDecoder/DRCDecoder.h	35;"	d
cachelineSize	Decoders/DRCDecoder/DRCDecoder.h	/^    uint64_t cachelineSize;$/;"	m	class:NVM::DRCDecoder
ignoreBits	Decoders/DRCDecoder/DRCDecoder.h	/^    uint64_t ignoreBits;$/;"	m	class:NVM::DRCDecoder
~DRCDecoder	Decoders/DRCDecoder/DRCDecoder.h	/^    ~DRCDecoder( ) { }$/;"	f	class:NVM::DRCDecoder
CreateDecoder	Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateDecoder( std::string decoder )$/;"	f	class:DecoderFactory
CreateDecoderNoWarn	Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateDecoderNoWarn( std::string decoder )$/;"	f	class:DecoderFactory
CreateNewDecoder	Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateNewDecoder( std::string decoder )$/;"	f	class:DecoderFactory
DecoderFactory	Decoders/DecoderFactory.h	/^    DecoderFactory( ) { }$/;"	f	class:NVM::DecoderFactory
DecoderFactory	Decoders/DecoderFactory.h	/^class DecoderFactory$/;"	c	namespace:NVM
NVM	Decoders/DecoderFactory.h	/^namespace NVM {$/;"	n
__DECODERFACTORY_H__	Decoders/DecoderFactory.h	35;"	d
~DecoderFactory	Decoders/DecoderFactory.h	/^    ~DecoderFactory( ) { }$/;"	f	class:NVM::DecoderFactory
CreateCheckpoint	Decoders/Migrator/Migrator.cpp	/^void Migrator::CreateCheckpoint( std::string dir )$/;"	f	class:Migrator
GetAddressKey	Decoders/Migrator/Migrator.cpp	/^uint64_t Migrator::GetAddressKey( NVMAddress& address )$/;"	f	class:Migrator
IsBuffered	Decoders/Migrator/Migrator.cpp	/^bool Migrator::IsBuffered( NVMAddress& address )$/;"	f	class:Migrator
IsMigrated	Decoders/Migrator/Migrator.cpp	/^bool Migrator::IsMigrated( NVMAddress& address )$/;"	f	class:Migrator
Migrating	Decoders/Migrator/Migrator.cpp	/^bool Migrator::Migrating( )$/;"	f	class:Migrator
Migrator	Decoders/Migrator/Migrator.cpp	/^Migrator::Migrator( )$/;"	f	class:Migrator
RegisterStats	Decoders/Migrator/Migrator.cpp	/^void Migrator::RegisterStats( )$/;"	f	class:Migrator
RestoreCheckpoint	Decoders/Migrator/Migrator.cpp	/^void Migrator::RestoreCheckpoint( std::string dir )$/;"	f	class:Migrator
SetConfig	Decoders/Migrator/Migrator.cpp	/^void Migrator::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:Migrator
SetMigrationState	Decoders/Migrator/Migrator.cpp	/^void Migrator::SetMigrationState( NVMAddress& address, MigratorState newState )$/;"	f	class:Migrator
StartMigration	Decoders/Migrator/Migrator.cpp	/^void Migrator::StartMigration( NVMAddress& promotee, NVMAddress& demotee )$/;"	f	class:Migrator
Translate	Decoders/Migrator/Migrator.cpp	/^void Migrator::Translate( uint64_t address, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:Migrator
~Migrator	Decoders/Migrator/Migrator.cpp	/^Migrator::~Migrator( )$/;"	f	class:Migrator
MIGRATION_BUFFERED	Decoders/Migrator/Migrator.h	/^    MIGRATION_BUFFERED,    \/\/ Read is done, waiting for writes to be queued$/;"	e	enum:NVM::MigratorState
MIGRATION_DONE	Decoders/Migrator/Migrator.h	/^    MIGRATION_DONE         \/\/ Migration successfully completed$/;"	e	enum:NVM::MigratorState
MIGRATION_READING	Decoders/Migrator/Migrator.h	/^    MIGRATION_READING,     \/\/ Read in progress for this page$/;"	e	enum:NVM::MigratorState
MIGRATION_UNKNOWN	Decoders/Migrator/Migrator.h	/^    MIGRATION_UNKNOWN = 0, \/\/ Error state$/;"	e	enum:NVM::MigratorState
MIGRATION_WRITING	Decoders/Migrator/Migrator.h	/^    MIGRATION_WRITING,     \/\/ Writes queued, waiting for request complete$/;"	e	enum:NVM::MigratorState
Migrator	Decoders/Migrator/Migrator.h	/^class Migrator : public AddressTranslator$/;"	c	namespace:NVM
MigratorState	Decoders/Migrator/Migrator.h	/^enum MigratorState$/;"	g	namespace:NVM
NVM	Decoders/Migrator/Migrator.h	/^namespace NVM$/;"	n
__COIN_MIGRATOR_H__	Decoders/Migrator/Migrator.h	35;"	d
inputPage	Decoders/Migrator/Migrator.h	/^    uint64_t inputPage, outputPage;$/;"	m	class:NVM::Migrator
migratedAccesses	Decoders/Migrator/Migrator.h	/^    ncounter_t migratedAccesses;$/;"	m	class:NVM::Migrator
migrating	Decoders/Migrator/Migrator.h	/^    bool migrating;$/;"	m	class:NVM::Migrator
migrationMap	Decoders/Migrator/Migrator.h	/^    std::map<uint64_t, uint64_t> migrationMap;$/;"	m	class:NVM::Migrator
migrationState	Decoders/Migrator/Migrator.h	/^    std::map<uint64_t, MigratorState> migrationState;$/;"	m	class:NVM::Migrator
numBanks	Decoders/Migrator/Migrator.h	/^    uint64_t numChannels, numBanks, numRanks, numSubarrays;$/;"	m	class:NVM::Migrator
numChannels	Decoders/Migrator/Migrator.h	/^    uint64_t numChannels, numBanks, numRanks, numSubarrays;$/;"	m	class:NVM::Migrator
numRanks	Decoders/Migrator/Migrator.h	/^    uint64_t numChannels, numBanks, numRanks, numSubarrays;$/;"	m	class:NVM::Migrator
numSubarrays	Decoders/Migrator/Migrator.h	/^    uint64_t numChannels, numBanks, numRanks, numSubarrays;$/;"	m	class:NVM::Migrator
outputPage	Decoders/Migrator/Migrator.h	/^    uint64_t inputPage, outputPage;$/;"	m	class:NVM::Migrator
BitModel	Endurance/BitModel/BitModel.cpp	/^BitModel::BitModel( )$/;"	f	class:BitModel
Read	Endurance/BitModel/BitModel.cpp	/^ncycles_t BitModel::Read( NVMainRequest *request )$/;"	f	class:BitModel
SetConfig	Endurance/BitModel/BitModel.cpp	/^void BitModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:BitModel
Write	Endurance/BitModel/BitModel.cpp	/^ncycles_t BitModel::Write( NVMainRequest *request, NVMDataBlock& oldData ) $/;"	f	class:BitModel
~BitModel	Endurance/BitModel/BitModel.cpp	/^BitModel::~BitModel( )$/;"	f	class:BitModel
BitModel	Endurance/BitModel/BitModel.h	/^class BitModel : public EnduranceModel$/;"	c	namespace:NVM
NVM	Endurance/BitModel/BitModel.h	/^namespace NVM {$/;"	n
__BITMODEL_H__	Endurance/BitModel/BitModel.h	35;"	d
ByteModel	Endurance/ByteModel/ByteModel.cpp	/^ByteModel::ByteModel( )$/;"	f	class:ByteModel
Read	Endurance/ByteModel/ByteModel.cpp	/^ncycles_t ByteModel::Read( NVMainRequest *request ) $/;"	f	class:ByteModel
SetConfig	Endurance/ByteModel/ByteModel.cpp	/^void ByteModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:ByteModel
Write	Endurance/ByteModel/ByteModel.cpp	/^ncycles_t ByteModel::Write( NVMainRequest *request, NVMDataBlock& oldData ) $/;"	f	class:ByteModel
~ByteModel	Endurance/ByteModel/ByteModel.cpp	/^ByteModel::~ByteModel( )$/;"	f	class:ByteModel
ByteModel	Endurance/ByteModel/ByteModel.h	/^class ByteModel : public EnduranceModel$/;"	c	namespace:NVM
NVM	Endurance/ByteModel/ByteModel.h	/^namespace NVM {$/;"	n
__BYTEMODEL_H__	Endurance/ByteModel/ByteModel.h	35;"	d
GetEndurance	Endurance/Distributions/Normal.cpp	/^uint64_t NormalDistribution::GetEndurance( )$/;"	f	class:NormalDistribution
NormalDistribution	Endurance/Distributions/Normal.cpp	/^NormalDistribution::NormalDistribution( )$/;"	f	class:NormalDistribution
NormalDistribution	Endurance/Distributions/Normal.cpp	/^NormalDistribution::NormalDistribution( Config *conf )$/;"	f	class:NormalDistribution
GetMean	Endurance/Distributions/Normal.h	/^    uint64_t GetMean( ) { return mean; }$/;"	f	class:NVM::NormalDistribution
GetVariance	Endurance/Distributions/Normal.h	/^    uint64_t GetVariance( ) { return variance; }$/;"	f	class:NVM::NormalDistribution
NVM	Endurance/Distributions/Normal.h	/^namespace NVM {$/;"	n
NormalDistribution	Endurance/Distributions/Normal.h	/^class NormalDistribution : public EnduranceDistribution$/;"	c	namespace:NVM
SetMean	Endurance/Distributions/Normal.h	/^    void SetMean( uint64_t m ) { mean = m; }$/;"	f	class:NVM::NormalDistribution
SetVariance	Endurance/Distributions/Normal.h	/^    void SetVariance( uint64_t var ) { variance = var; }$/;"	f	class:NVM::NormalDistribution
__NORMALDISTRIBUTION_H__	Endurance/Distributions/Normal.h	35;"	d
config	Endurance/Distributions/Normal.h	/^    Config *config;$/;"	m	class:NVM::NormalDistribution
mean	Endurance/Distributions/Normal.h	/^    uint64_t mean;$/;"	m	class:NVM::NormalDistribution
nextEndurance	Endurance/Distributions/Normal.h	/^    double nextEndurance;$/;"	m	class:NVM::NormalDistribution
variance	Endurance/Distributions/Normal.h	/^    uint64_t variance;$/;"	m	class:NVM::NormalDistribution
~NormalDistribution	Endurance/Distributions/Normal.h	/^    ~NormalDistribution( ) { }$/;"	f	class:NVM::NormalDistribution
GetEndurance	Endurance/Distributions/Uniform.cpp	/^uint64_t UniformDistribution::GetEndurance( )$/;"	f	class:UniformDistribution
UniformDistribution	Endurance/Distributions/Uniform.cpp	/^UniformDistribution::UniformDistribution( Config *conf )$/;"	f	class:UniformDistribution
NVM	Endurance/Distributions/Uniform.h	/^namespace NVM {$/;"	n
UniformDistribution	Endurance/Distributions/Uniform.h	/^class UniformDistribution : public EnduranceDistribution$/;"	c	namespace:NVM
__UNIFORMDISTRIBUTION_H__	Endurance/Distributions/Uniform.h	35;"	d
config	Endurance/Distributions/Uniform.h	/^    Config *config;$/;"	m	class:NVM::UniformDistribution
mean	Endurance/Distributions/Uniform.h	/^    uint64_t mean;$/;"	m	class:NVM::UniformDistribution
~UniformDistribution	Endurance/Distributions/Uniform.h	/^    ~UniformDistribution( ) { }$/;"	f	class:NVM::UniformDistribution
CreateEnduranceDistribution	Endurance/EnduranceDistributionFactory.cpp	/^EnduranceDistribution *EnduranceDistributionFactory::CreateEnduranceDistribution( $/;"	f	class:EnduranceDistributionFactory
EnduranceDistributionFactory	Endurance/EnduranceDistributionFactory.h	/^    EnduranceDistributionFactory( ) { }$/;"	f	class:NVM::EnduranceDistributionFactory
EnduranceDistributionFactory	Endurance/EnduranceDistributionFactory.h	/^class EnduranceDistributionFactory$/;"	c	namespace:NVM
NVM	Endurance/EnduranceDistributionFactory.h	/^namespace NVM {$/;"	n
__ENDURANCEDISTRIBUTIONFACTORY_H__	Endurance/EnduranceDistributionFactory.h	35;"	d
~EnduranceDistributionFactory	Endurance/EnduranceDistributionFactory.h	/^    ~EnduranceDistributionFactory( ) { }$/;"	f	class:NVM::EnduranceDistributionFactory
CreateEnduranceModel	Endurance/EnduranceModelFactory.cpp	/^EnduranceModel *EnduranceModelFactory::CreateEnduranceModel( $/;"	f	class:EnduranceModelFactory
EnduranceModelFactory	Endurance/EnduranceModelFactory.h	/^    EnduranceModelFactory( ) {}$/;"	f	class:NVM::EnduranceModelFactory
EnduranceModelFactory	Endurance/EnduranceModelFactory.h	/^class EnduranceModelFactory$/;"	c	namespace:NVM
NVM	Endurance/EnduranceModelFactory.h	/^namespace NVM {$/;"	n
__ENDURANCEMODELFACTORY_H__	Endurance/EnduranceModelFactory.h	35;"	d
~EnduranceModelFactory	Endurance/EnduranceModelFactory.h	/^    ~EnduranceModelFactory( ) {}$/;"	f	class:NVM::EnduranceModelFactory
NullModel	Endurance/NullModel/NullModel.cpp	/^NullModel::NullModel( )$/;"	f	class:NullModel
Read	Endurance/NullModel/NullModel.cpp	/^ncycles_t NullModel::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:NullModel
Write	Endurance/NullModel/NullModel.cpp	/^ncycles_t NullModel::Write( NVMainRequest* \/*request*\/, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:NullModel
~NullModel	Endurance/NullModel/NullModel.cpp	/^NullModel::~NullModel( )$/;"	f	class:NullModel
NVM	Endurance/NullModel/NullModel.h	/^namespace NVM {$/;"	n
NullModel	Endurance/NullModel/NullModel.h	/^class NullModel : public EnduranceModel$/;"	c	namespace:NVM
__NULLMODEL_H__	Endurance/NullModel/NullModel.h	35;"	d
Read	Endurance/RowModel/RowModel.cpp	/^ncycles_t RowModel::Read( NVMainRequest *request )$/;"	f	class:RowModel
RowModel	Endurance/RowModel/RowModel.cpp	/^RowModel::RowModel( )$/;"	f	class:RowModel
SetConfig	Endurance/RowModel/RowModel.cpp	/^void RowModel::SetConfig( Config *conf, bool createChildren )$/;"	f	class:RowModel
Write	Endurance/RowModel/RowModel.cpp	/^ncycles_t RowModel::Write( NVMainRequest *request, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:RowModel
~RowModel	Endurance/RowModel/RowModel.cpp	/^RowModel::~RowModel( )$/;"	f	class:RowModel
NVM	Endurance/RowModel/RowModel.h	/^namespace NVM {$/;"	n
RowModel	Endurance/RowModel/RowModel.h	/^class RowModel : public EnduranceModel$/;"	c	namespace:NVM
__ROWMODEL_H__	Endurance/RowModel/RowModel.h	35;"	d
Read	Endurance/WordModel/WordModel.cpp	/^ncycles_t WordModel::Read( NVMainRequest *request )$/;"	f	class:WordModel
SetConfig	Endurance/WordModel/WordModel.cpp	/^void WordModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:WordModel
WordModel	Endurance/WordModel/WordModel.cpp	/^WordModel::WordModel( )$/;"	f	class:WordModel
Write	Endurance/WordModel/WordModel.cpp	/^ncycles_t WordModel::Write( NVMainRequest *request, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:WordModel
~WordModel	Endurance/WordModel/WordModel.cpp	/^WordModel::~WordModel( )$/;"	f	class:WordModel
NVM	Endurance/WordModel/WordModel.h	/^namespace NVM {$/;"	n
WordModel	Endurance/WordModel/WordModel.h	/^class WordModel : public EnduranceModel$/;"	c	namespace:NVM
__WORDMODEL_H__	Endurance/WordModel/WordModel.h	35;"	d
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
CreateInterconnect	Interconnect/InterconnectFactory.cpp	/^Interconnect *InterconnectFactory::CreateInterconnect( std::string type )$/;"	f	class:InterconnectFactory
InterconnectFactory	Interconnect/InterconnectFactory.h	/^    InterconnectFactory( ) { }$/;"	f	class:NVM::InterconnectFactory
InterconnectFactory	Interconnect/InterconnectFactory.h	/^class InterconnectFactory$/;"	c	namespace:NVM
NVM	Interconnect/InterconnectFactory.h	/^namespace NVM {$/;"	n
__INTERCONNECTFACTORY_H__	Interconnect/InterconnectFactory.h	35;"	d
~InterconnectFactory	Interconnect/InterconnectFactory.h	/^    ~InterconnectFactory( ) { }$/;"	f	class:NVM::InterconnectFactory
CalculateIOPower	Interconnect/OffChipBus/OffChipBus.cpp	/^double OffChipBus::CalculateIOPower( bool isRead, unsigned int bitValue )$/;"	f	class:OffChipBus
CalculateStats	Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::CalculateStats( )$/;"	f	class:OffChipBus
Cycle	Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::Cycle( ncycle_t steps )$/;"	f	class:OffChipBus
IsIssuable	Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:OffChipBus
IssueCommand	Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::IssueCommand( NVMainRequest *req )$/;"	f	class:OffChipBus
OffChipBus	Interconnect/OffChipBus/OffChipBus.cpp	/^OffChipBus::OffChipBus( )$/;"	f	class:OffChipBus
RequestComplete	Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::RequestComplete( NVMainRequest *request )$/;"	f	class:OffChipBus
SetConfig	Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::SetConfig( Config *c, bool createChildren )$/;"	f	class:OffChipBus
~OffChipBus	Interconnect/OffChipBus/OffChipBus.cpp	/^OffChipBus::~OffChipBus( )$/;"	f	class:OffChipBus
NVM	Interconnect/OffChipBus/OffChipBus.h	/^namespace NVM {$/;"	n
OffChipBus	Interconnect/OffChipBus/OffChipBus.h	/^class OffChipBus : public Interconnect$/;"	c	namespace:NVM
__INTERCONNECT_OFFCHIPBUS_H__	Interconnect/OffChipBus/OffChipBus.h	35;"	d
conf	Interconnect/OffChipBus/OffChipBus.h	/^    Config *conf;$/;"	m	class:NVM::OffChipBus
configSet	Interconnect/OffChipBus/OffChipBus.h	/^    bool configSet;$/;"	m	class:NVM::OffChipBus
numRanks	Interconnect/OffChipBus/OffChipBus.h	/^    ncounter_t numRanks;$/;"	m	class:NVM::OffChipBus
offChipDelay	Interconnect/OffChipBus/OffChipBus.h	/^    ncycle_t offChipDelay;$/;"	m	class:NVM::OffChipBus
syncValue	Interconnect/OffChipBus/OffChipBus.h	/^    double syncValue;$/;"	m	class:NVM::OffChipBus
CalculateStats	Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::CalculateStats( )$/;"	f	class:OnChipBus
Cycle	Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::Cycle( ncycle_t steps )$/;"	f	class:OnChipBus
IsIssuable	Interconnect/OnChipBus/OnChipBus.cpp	/^bool OnChipBus::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:OnChipBus
IssueCommand	Interconnect/OnChipBus/OnChipBus.cpp	/^bool OnChipBus::IssueCommand( NVMainRequest *req )$/;"	f	class:OnChipBus
OnChipBus	Interconnect/OnChipBus/OnChipBus.cpp	/^OnChipBus::OnChipBus( )$/;"	f	class:OnChipBus
SetConfig	Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::SetConfig( Config *c, bool createChildren )$/;"	f	class:OnChipBus
~OnChipBus	Interconnect/OnChipBus/OnChipBus.cpp	/^OnChipBus::~OnChipBus( )$/;"	f	class:OnChipBus
GetRank	Interconnect/OnChipBus/OnChipBus.h	/^    Rank *GetRank( ncounter_t rank ) { return ranks[rank]; }$/;"	f	class:NVM::OnChipBus
NVM	Interconnect/OnChipBus/OnChipBus.h	/^namespace NVM {$/;"	n
OnChipBus	Interconnect/OnChipBus/OnChipBus.h	/^class OnChipBus : public Interconnect$/;"	c	namespace:NVM
__INTERCONNECT_ONCHIPBUS_H__	Interconnect/OnChipBus/OnChipBus.h	35;"	d
conf	Interconnect/OnChipBus/OnChipBus.h	/^    Config *conf;$/;"	m	class:NVM::OnChipBus
configSet	Interconnect/OnChipBus/OnChipBus.h	/^    bool configSet;$/;"	m	class:NVM::OnChipBus
numRanks	Interconnect/OnChipBus/OnChipBus.h	/^    ncounter_t numRanks;$/;"	m	class:NVM::OnChipBus
ranks	Interconnect/OnChipBus/OnChipBus.h	/^    Rank **ranks;$/;"	m	class:NVM::OnChipBus
syncValue	Interconnect/OnChipBus/OnChipBus.h	/^    double syncValue;$/;"	m	class:NVM::OnChipBus
AbstractDRAMCache	MemControl/DRAMCache/AbstractDRAMCache.h	/^  AbstractDRAMCache( ) { }$/;"	f	class:NVM::AbstractDRAMCache
AbstractDRAMCache	MemControl/DRAMCache/AbstractDRAMCache.h	/^class AbstractDRAMCache : public MemoryController$/;"	c	namespace:NVM
NVM	MemControl/DRAMCache/AbstractDRAMCache.h	/^namespace NVM {$/;"	n
__MEMCONTROL_ABSTRACTDRAMCACHE_H__	MemControl/DRAMCache/AbstractDRAMCache.h	4;"	d
~AbstractDRAMCache	MemControl/DRAMCache/AbstractDRAMCache.h	/^  virtual ~AbstractDRAMCache( ) { };$/;"	f	class:NVM::AbstractDRAMCache
CalculateStats	MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::CalculateStats( )$/;"	f	class:DRAMCache
Cycle	MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::Cycle( ncycle_t steps )$/;"	f	class:DRAMCache
DRAMCache	MemControl/DRAMCache/DRAMCache.cpp	/^DRAMCache::DRAMCache( )$/;"	f	class:DRAMCache
GetMainMemory	MemControl/DRAMCache/DRAMCache.cpp	/^NVMain *DRAMCache::GetMainMemory( )$/;"	f	class:DRAMCache
IsIssuable	MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IsIssuable( NVMainRequest * req, FailReason * \/*fail*\/ )$/;"	f	class:DRAMCache
IssueAtomic	MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueAtomic( NVMainRequest *req )$/;"	f	class:DRAMCache
IssueCommand	MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueCommand( NVMainRequest *req )$/;"	f	class:DRAMCache
IssueFunctional	MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueFunctional( NVMainRequest *req )$/;"	f	class:DRAMCache
RegisterStats	MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::RegisterStats( )$/;"	f	class:DRAMCache
RequestComplete	MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::RequestComplete( NVMainRequest *req )$/;"	f	class:DRAMCache
Retranslate	MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::Retranslate( NVMainRequest *req )$/;"	f	class:DRAMCache
SetConfig	MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:DRAMCache
~DRAMCache	MemControl/DRAMCache/DRAMCache.cpp	/^DRAMCache::~DRAMCache( )$/;"	f	class:DRAMCache
DRAMCache	MemControl/DRAMCache/DRAMCache.h	/^class DRAMCache : public MemoryController$/;"	c	namespace:NVM
NVM	MemControl/DRAMCache/DRAMCache.h	/^namespace NVM {$/;"	n
__MEMCONTROL_DRAMCACHE_H__	MemControl/DRAMCache/DRAMCache.h	35;"	d
drcChannels	MemControl/DRAMCache/DRAMCache.h	/^    AbstractDRAMCache **drcChannels;$/;"	m	class:NVM::DRAMCache
mainMemory	MemControl/DRAMCache/DRAMCache.h	/^    NVMain *mainMemory;$/;"	m	class:NVM::DRAMCache
numChannels	MemControl/DRAMCache/DRAMCache.h	/^    ncounter_t numChannels;$/;"	m	class:NVM::DRAMCache
CalculateStats	MemControl/FCFS/FCFS.cpp	/^void FCFS::CalculateStats( )$/;"	f	class:FCFS
Cycle	MemControl/FCFS/FCFS.cpp	/^void FCFS::Cycle( ncycle_t steps )$/;"	f	class:FCFS
FCFS	MemControl/FCFS/FCFS.cpp	/^FCFS::FCFS( )$/;"	f	class:FCFS
IsIssuable	MemControl/FCFS/FCFS.cpp	/^bool FCFS::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:FCFS
IssueCommand	MemControl/FCFS/FCFS.cpp	/^bool FCFS::IssueCommand( NVMainRequest *request )$/;"	f	class:FCFS
RegisterStats	MemControl/FCFS/FCFS.cpp	/^void FCFS::RegisterStats( )$/;"	f	class:FCFS
RequestComplete	MemControl/FCFS/FCFS.cpp	/^bool FCFS::RequestComplete( NVMainRequest * request )$/;"	f	class:FCFS
SetConfig	MemControl/FCFS/FCFS.cpp	/^void FCFS::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FCFS
FCFS	MemControl/FCFS/FCFS.h	/^class FCFS : public MemoryController$/;"	c	namespace:NVM
NVM	MemControl/FCFS/FCFS.h	/^namespace NVM {$/;"	n
__MEMCONTROL_FCFS_H__	MemControl/FCFS/FCFS.h	35;"	d
averageLatency	MemControl/FCFS/FCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FCFS
averageQueueLatency	MemControl/FCFS/FCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FCFS
averageTotalLatency	MemControl/FCFS/FCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FCFS
measuredLatencies	MemControl/FCFS/FCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FCFS
measuredQueueLatencies	MemControl/FCFS/FCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FCFS
measuredTotalLatencies	MemControl/FCFS/FCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FCFS
mem_reads	MemControl/FCFS/FCFS.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FCFS
mem_writes	MemControl/FCFS/FCFS.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FCFS
queueSize	MemControl/FCFS/FCFS.h	/^    uint64_t queueSize;$/;"	m	class:NVM::FCFS
rb_hits	MemControl/FCFS/FCFS.h	/^    uint64_t rb_hits;$/;"	m	class:NVM::FCFS
rb_miss	MemControl/FCFS/FCFS.h	/^    uint64_t rb_miss;$/;"	m	class:NVM::FCFS
~FCFS	MemControl/FCFS/FCFS.h	/^    ~FCFS( ) { }$/;"	f	class:NVM::FCFS
CalculateStats	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::CalculateStats( )$/;"	f	class:FRFCFS_WQF
Cycle	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::Cycle( ncycle_t steps )$/;"	f	class:FRFCFS_WQF
Drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::Drain( )$/;"	f	class:FRFCFS_WQF
FRFCFS_WQF	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^FRFCFS_WQF::FRFCFS_WQF( ) : readQueueId(0), writeQueueId(1)$/;"	f	class:FRFCFS_WQF
IsIssuable	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::IsIssuable( NVMainRequest *request, FailReason * \/*fail*\/ )$/;"	f	class:FRFCFS_WQF
IssueCommand	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::IssueCommand( NVMainRequest *request )$/;"	f	class:FRFCFS_WQF
RegisterStats	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::RegisterStats( )$/;"	f	class:FRFCFS_WQF
RequestComplete	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::RequestComplete( NVMainRequest * request )$/;"	f	class:FRFCFS_WQF
SetConfig	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FRFCFS_WQF
~FRFCFS_WQF	MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^FRFCFS_WQF::~FRFCFS_WQF( )$/;"	f	class:FRFCFS_WQF
FRFCFS_WQF	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^class FRFCFS_WQF : public MemoryController$/;"	c	namespace:NVM
HighWaterMark	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t HighWaterMark;$/;"	m	class:NVM::FRFCFS_WQF
LowWaterMark	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t LowWaterMark;$/;"	m	class:NVM::FRFCFS_WQF
NVM	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^namespace NVM {$/;"	n
__FRFCFS_WQF_WQF_H__	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	37;"	d
averageLatency	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS_WQF
averageQueueLatency	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS_WQF
averageTotalLatency	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS_WQF
average_drain_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_drain_cycles;$/;"	m	class:NVM::FRFCFS_WQF
average_drain_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_drain_spacing;$/;"	m	class:NVM::FRFCFS_WQF
average_predrain_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_predrain_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
average_read_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_read_spacing;$/;"	m	class:NVM::FRFCFS_WQF
average_reads_during_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_reads_during_drain;$/;"	m	class:NVM::FRFCFS_WQF
average_writes_per_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    double   average_writes_per_drain;$/;"	m	class:NVM::FRFCFS_WQF
force_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    bool     force_drain;$/;"	m	class:NVM::FRFCFS_WQF
m_drain_end_cycle	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_drain_end_cycle;$/;"	m	class:NVM::FRFCFS_WQF
m_drain_end_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_drain_end_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
m_drain_start_cycle	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_drain_start_cycle;$/;"	m	class:NVM::FRFCFS_WQF
m_drain_start_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_drain_start_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
m_draining	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    bool     m_draining;$/;"	m	class:NVM::FRFCFS_WQF
m_last_drain_end_cycle	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_last_drain_end_cycle;$/;"	m	class:NVM::FRFCFS_WQF
m_request_per_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t m_request_per_drain;$/;"	m	class:NVM::FRFCFS_WQF
maximum_drain_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_drain_cycles;$/;"	m	class:NVM::FRFCFS_WQF
maximum_drain_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_drain_spacing;$/;"	m	class:NVM::FRFCFS_WQF
maximum_drain_writes	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_drain_writes;$/;"	m	class:NVM::FRFCFS_WQF
maximum_predrain_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_predrain_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
maximum_read_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_read_spacing;$/;"	m	class:NVM::FRFCFS_WQF
maximum_reads_during_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t maximum_reads_during_drain;$/;"	m	class:NVM::FRFCFS_WQF
measuredLatencies	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS_WQF
measuredQueueLatencies	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS_WQF
measuredTotalLatencies	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS_WQF
mem_reads	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FRFCFS_WQF
mem_writes	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FRFCFS_WQF
minimum_drain_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_drain_cycles;$/;"	m	class:NVM::FRFCFS_WQF
minimum_drain_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_drain_spacing;$/;"	m	class:NVM::FRFCFS_WQF
minimum_drain_writes	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_drain_writes;$/;"	m	class:NVM::FRFCFS_WQF
minimum_predrain_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_predrain_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
minimum_read_spacing	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_read_spacing;$/;"	m	class:NVM::FRFCFS_WQF
minimum_reads_during_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t minimum_reads_during_drain;$/;"	m	class:NVM::FRFCFS_WQF
readQueue	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    NVMTransactionQueue *readQueue;$/;"	m	class:NVM::FRFCFS_WQF
readQueueId	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    const int readQueueId;$/;"	m	class:NVM::FRFCFS_WQF
readQueueSize	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t readQueueSize;$/;"	m	class:NVM::FRFCFS_WQF
rq_rb_hits	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t rq_rb_hits;$/;"	m	class:NVM::FRFCFS_WQF
rq_rb_miss	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t rq_rb_miss;$/;"	m	class:NVM::FRFCFS_WQF
starvation_precharges	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t starvation_precharges;$/;"	m	class:NVM::FRFCFS_WQF
total_drain_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_drain_cycles;$/;"	m	class:NVM::FRFCFS_WQF
total_drain_writes	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_drain_writes;$/;"	m	class:NVM::FRFCFS_WQF
total_drains	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_drains;$/;"	m	class:NVM::FRFCFS_WQF
total_non_drain_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_non_drain_cycles;$/;"	m	class:NVM::FRFCFS_WQF
total_read_cycles	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_read_cycles;$/;"	m	class:NVM::FRFCFS_WQF
total_readqueue_size	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_readqueue_size;$/;"	m	class:NVM::FRFCFS_WQF
total_reads_during_drain	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t total_reads_during_drain;$/;"	m	class:NVM::FRFCFS_WQF
wq_rb_hits	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t wq_rb_hits;$/;"	m	class:NVM::FRFCFS_WQF
wq_rb_miss	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t wq_rb_miss;$/;"	m	class:NVM::FRFCFS_WQF
writeQueue	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    NVMTransactionQueue *writeQueue;$/;"	m	class:NVM::FRFCFS_WQF
writeQueueId	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    const int writeQueueId;$/;"	m	class:NVM::FRFCFS_WQF
writeQueueSize	MemControl/FRFCFS-WQF/FRFCFS-WQF.h	/^    uint64_t writeQueueSize;$/;"	m	class:NVM::FRFCFS_WQF
CalculateStats	MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::CalculateStats( )$/;"	f	class:FRFCFS
Cycle	MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::Cycle( ncycle_t steps )$/;"	f	class:FRFCFS
FRFCFS	MemControl/FRFCFS/FRFCFS.cpp	/^FRFCFS::FRFCFS( )$/;"	f	class:FRFCFS
IsIssuable	MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:FRFCFS
IssueCommand	MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::IssueCommand( NVMainRequest *req )$/;"	f	class:FRFCFS
RegisterStats	MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::RegisterStats( )$/;"	f	class:FRFCFS
RequestComplete	MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::RequestComplete( NVMainRequest * request )$/;"	f	class:FRFCFS
SetConfig	MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FRFCFS
~FRFCFS	MemControl/FRFCFS/FRFCFS.cpp	/^FRFCFS::~FRFCFS( )$/;"	f	class:FRFCFS
FRFCFS	MemControl/FRFCFS/FRFCFS.h	/^class FRFCFS : public MemoryController$/;"	c	namespace:NVM
NVM	MemControl/FRFCFS/FRFCFS.h	/^namespace NVM {$/;"	n
__FRFCFS_H__	MemControl/FRFCFS/FRFCFS.h	35;"	d
averageLatency	MemControl/FRFCFS/FRFCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS
averageQueueLatency	MemControl/FRFCFS/FRFCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS
averageTotalLatency	MemControl/FRFCFS/FRFCFS.h	/^    double averageLatency, averageQueueLatency, averageTotalLatency;$/;"	m	class:NVM::FRFCFS
cpu_insts	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t cpu_insts;$/;"	m	class:NVM::FRFCFS
measuredLatencies	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS
measuredQueueLatencies	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS
measuredTotalLatencies	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t measuredLatencies, measuredQueueLatencies, measuredTotalLatencies;$/;"	m	class:NVM::FRFCFS
memQueue	MemControl/FRFCFS/FRFCFS.h	/^    NVMTransactionQueue *memQueue;$/;"	m	class:NVM::FRFCFS
mem_reads	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FRFCFS
mem_writes	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::FRFCFS
queueSize	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t queueSize;$/;"	m	class:NVM::FRFCFS
rb_hits	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t rb_hits;$/;"	m	class:NVM::FRFCFS
rb_miss	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t rb_miss;$/;"	m	class:NVM::FRFCFS
starvation_precharges	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t starvation_precharges;$/;"	m	class:NVM::FRFCFS
write_pauses	MemControl/FRFCFS/FRFCFS.h	/^    uint64_t write_pauses;$/;"	m	class:NVM::FRFCFS
CalculateLatency	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateLatency( NVMainRequest *req, double *average, $/;"	f	class:LH_Cache
CalculateQueueLatency	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateQueueLatency( NVMainRequest *req, double *average, $/;"	f	class:LH_Cache
CalculateStats	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateStats( )$/;"	f	class:LH_Cache
Cycle	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:LH_Cache
IsIssuable	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:LH_Cache
IssueAtomic	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueAtomic( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueCommand	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueCommand( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueDRCCommands	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueDRCCommands( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueFillCommands	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueFillCommands( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueFunctional	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueFunctional( NVMainRequest *req )$/;"	f	class:LH_Cache
LH_Cache	MemControl/LH-Cache/LH-Cache.cpp	/^LH_Cache::LH_Cache( )$/;"	f	class:LH_Cache
MakeDRCRequest	MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeDRCRequest( NVMainRequest *triggerRequest)$/;"	f	class:LH_Cache
MakeTagRequest	MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeTagRequest( NVMainRequest *triggerRequest, int tag )$/;"	f	class:LH_Cache
MakeTagWriteRequest	MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeTagWriteRequest( NVMainRequest *triggerRequest )$/;"	f	class:LH_Cache
RegisterStats	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::RegisterStats( )$/;"	f	class:LH_Cache
RequestComplete	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::RequestComplete( NVMainRequest *req )$/;"	f	class:LH_Cache
SetConfig	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:LH_Cache
SetMainMemory	MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::SetMainMemory( NVMain *mm )$/;"	f	class:LH_Cache
operator ()	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::BankLocked::operator() ( NVMainRequest * request )$/;"	f	class:LH_Cache::BankLocked
operator ()	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::FillQueueFull::operator() ( NVMainRequest * \/*request*\/ )$/;"	f	class:LH_Cache::FillQueueFull
operator ()	MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::NoWriteBuffering::operator() ( NVMainRequest * \/*request*\/ )$/;"	f	class:LH_Cache::NoWriteBuffering
~LH_Cache	MemControl/LH-Cache/LH-Cache.cpp	/^LH_Cache::~LH_Cache( )$/;"	f	class:LH_Cache
BankLocked	MemControl/LH-Cache/LH-Cache.h	/^        BankLocked( LH_Cache &_memoryController ) $/;"	f	class:NVM::LH_Cache::BankLocked
BankLocked	MemControl/LH-Cache/LH-Cache.h	/^    class BankLocked : public SchedulingPredicate$/;"	c	class:NVM::LH_Cache
DRC_ACCESS	MemControl/LH-Cache/LH-Cache.h	47;"	d
DRC_FILL	MemControl/LH-Cache/LH-Cache.h	46;"	d
DRC_MEMREAD	MemControl/LH-Cache/LH-Cache.h	45;"	d
DRC_TAGREAD1	MemControl/LH-Cache/LH-Cache.h	42;"	d
DRC_TAGREAD2	MemControl/LH-Cache/LH-Cache.h	43;"	d
DRC_TAGREAD3	MemControl/LH-Cache/LH-Cache.h	44;"	d
FQF	MemControl/LH-Cache/LH-Cache.h	/^    FillQueueFull FQF;$/;"	m	class:NVM::LH_Cache
FillQueueFull	MemControl/LH-Cache/LH-Cache.h	/^        FillQueueFull( LH_Cache &_memoryController ) $/;"	f	class:NVM::LH_Cache::FillQueueFull
FillQueueFull	MemControl/LH-Cache/LH-Cache.h	/^    class FillQueueFull : public SchedulingPredicate$/;"	c	class:NVM::LH_Cache
LH_Cache	MemControl/LH-Cache/LH-Cache.h	/^class LH_Cache : public AbstractDRAMCache $/;"	c	namespace:NVM
NVM	MemControl/LH-Cache/LH-Cache.h	/^namespace NVM {$/;"	n
NWB	MemControl/LH-Cache/LH-Cache.h	/^    NoWriteBuffering NWB;$/;"	m	class:NVM::LH_Cache
NoWriteBuffering	MemControl/LH-Cache/LH-Cache.h	/^        NoWriteBuffering( LH_Cache &_memoryController ) $/;"	f	class:NVM::LH_Cache::NoWriteBuffering
NoWriteBuffering	MemControl/LH-Cache/LH-Cache.h	/^    class NoWriteBuffering : public SchedulingPredicate$/;"	c	class:NVM::LH_Cache
__MEMCONTROL_BASICDRC_H__	MemControl/LH-Cache/LH-Cache.h	35;"	d
averageFillLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageFillLatency, averageFillQueueLatency;$/;"	m	class:NVM::LH_Cache
averageFillQueueLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageFillLatency, averageFillQueueLatency;$/;"	m	class:NVM::LH_Cache
averageHitLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageHitLatency, averageHitQueueLatency;$/;"	m	class:NVM::LH_Cache
averageHitQueueLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageHitLatency, averageHitQueueLatency;$/;"	m	class:NVM::LH_Cache
averageMMLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageMMLatency, averageMMQueueLatency;$/;"	m	class:NVM::LH_Cache
averageMMQueueLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageMMLatency, averageMMQueueLatency;$/;"	m	class:NVM::LH_Cache
averageMissLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageMissLatency, averageMissQueueLatency;$/;"	m	class:NVM::LH_Cache
averageMissQueueLatency	MemControl/LH-Cache/LH-Cache.h	/^    double averageMissLatency, averageMissQueueLatency;$/;"	m	class:NVM::LH_Cache
bankLocked	MemControl/LH-Cache/LH-Cache.h	/^    bool **bankLocked;$/;"	m	class:NVM::LH_Cache
draining	MemControl/LH-Cache/LH-Cache.h	/^        bool draining;$/;"	m	class:NVM::LH_Cache::FillQueueFull
drcHits	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t drcHits, drcMiss;$/;"	m	class:NVM::LH_Cache
drcMiss	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t drcHits, drcMiss;$/;"	m	class:NVM::LH_Cache
drcQueue	MemControl/LH-Cache/LH-Cache.h	/^    NVMTransactionQueue *drcQueue;$/;"	m	class:NVM::LH_Cache
drcQueueSize	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t fillQueueSize, drcQueueSize;$/;"	m	class:NVM::LH_Cache
fillQueue	MemControl/LH-Cache/LH-Cache.h	/^    NVMTransactionQueue *fillQueue;$/;"	m	class:NVM::LH_Cache
fillQueueSize	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t fillQueueSize, drcQueueSize;$/;"	m	class:NVM::LH_Cache
fills	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t mm_reqs, mm_reads, fills;$/;"	m	class:NVM::LH_Cache
functionalCache	MemControl/LH-Cache/LH-Cache.h	/^    CacheBank ***functionalCache;$/;"	m	class:NVM::LH_Cache
locks	MemControl/LH-Cache/LH-Cache.h	/^    BankLocked locks;$/;"	m	class:NVM::LH_Cache
mainMemory	MemControl/LH-Cache/LH-Cache.h	/^    NVMain *mainMemory;$/;"	m	class:NVM::LH_Cache
measuredFillLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredFillLatencies, measuredFillQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredFillQueueLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredFillLatencies, measuredFillQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredHitLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredHitLatencies, measuredHitQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredHitQueueLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredHitLatencies, measuredHitQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredMMLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredMMLatencies, measuredMMQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredMMQueueLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredMMLatencies, measuredMMQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredMissLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredMissLatencies, measuredMissQueueLatencies;$/;"	m	class:NVM::LH_Cache
measuredMissQueueLatencies	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t measuredMissLatencies, measuredMissQueueLatencies;$/;"	m	class:NVM::LH_Cache
mem_reads	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::LH_Cache
mem_writes	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t mem_reads, mem_writes;$/;"	m	class:NVM::LH_Cache
memoryController	MemControl/LH-Cache/LH-Cache.h	/^        LH_Cache &memoryController;$/;"	m	class:NVM::LH_Cache::BankLocked
memoryController	MemControl/LH-Cache/LH-Cache.h	/^        LH_Cache &memoryController;$/;"	m	class:NVM::LH_Cache::FillQueueFull
memoryController	MemControl/LH-Cache/LH-Cache.h	/^        LH_Cache &memoryController;$/;"	m	class:NVM::LH_Cache::NoWriteBuffering
mm_reads	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t mm_reqs, mm_reads, fills;$/;"	m	class:NVM::LH_Cache
mm_reqs	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t mm_reqs, mm_reads, fills;$/;"	m	class:NVM::LH_Cache
psInterval	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t psInterval;$/;"	m	class:NVM::LH_Cache
rb_hits	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t rb_hits, rb_miss;$/;"	m	class:NVM::LH_Cache
rb_miss	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t rb_hits, rb_miss;$/;"	m	class:NVM::LH_Cache
starvation_precharges	MemControl/LH-Cache/LH-Cache.h	/^    uint64_t starvation_precharges;$/;"	m	class:NVM::LH_Cache
useWriteBuffer	MemControl/LH-Cache/LH-Cache.h	/^    bool useWriteBuffer;$/;"	m	class:NVM::LH_Cache
CalculateStats	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::CalculateStats( )$/;"	f	class:LO_Cache
CreateCheckpoint	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::CreateCheckpoint( std::string dir )$/;"	f	class:LO_Cache
Cycle	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::Cycle( ncycle_t steps )$/;"	f	class:LO_Cache
IsIssuable	MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:LO_Cache
IssueAtomic	MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueAtomic( NVMainRequest *req )$/;"	f	class:LO_Cache
IssueCommand	MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueCommand( NVMainRequest *req )$/;"	f	class:LO_Cache
IssueFunctional	MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueFunctional( NVMainRequest *req )$/;"	f	class:LO_Cache
LO_Cache	MemControl/LO-Cache/LO-Cache.cpp	/^LO_Cache::LO_Cache( )$/;"	f	class:LO_Cache
RegisterStats	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::RegisterStats( )$/;"	f	class:LO_Cache
RequestComplete	MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::RequestComplete( NVMainRequest *req )$/;"	f	class:LO_Cache
RestoreCheckpoint	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::RestoreCheckpoint( std::string dir )$/;"	f	class:LO_Cache
SetConfig	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:LO_Cache
SetMainMemory	MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::SetMainMemory( NVMain *mm )$/;"	f	class:LO_Cache
~LO_Cache	MemControl/LO-Cache/LO-Cache.cpp	/^LO_Cache::~LO_Cache( )$/;"	f	class:LO_Cache
DRC_FILL	MemControl/LO-Cache/LO-Cache.h	50;"	d
DRC_MEMREAD	MemControl/LO-Cache/LO-Cache.h	49;"	d
LO_Cache	MemControl/LO-Cache/LO-Cache.h	/^class LO_Cache : public AbstractDRAMCache$/;"	c	namespace:NVM
NVM	MemControl/LO-Cache/LO-Cache.h	/^namespace NVM {$/;"	n
__MEMCONTROL_LOCACHE_H__	MemControl/LO-Cache/LO-Cache.h	36;"	d
banks	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t ranks, banks;$/;"	m	class:NVM::LO_Cache
drcQueue	MemControl/LO-Cache/LO-Cache.h	/^    NVMTransactionQueue *drcQueue;$/;"	m	class:NVM::LO_Cache
drcQueueSize	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t drcQueueSize;$/;"	m	class:NVM::LO_Cache
drc_evicts	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t drc_evicts, drc_fills;$/;"	m	class:NVM::LO_Cache
drc_fills	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t drc_evicts, drc_fills;$/;"	m	class:NVM::LO_Cache
drc_hitrate	MemControl/LO-Cache/LO-Cache.h	/^    double drc_hitrate;$/;"	m	class:NVM::LO_Cache
drc_hits	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t drc_hits, drc_miss;$/;"	m	class:NVM::LO_Cache
drc_miss	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t drc_hits, drc_miss;$/;"	m	class:NVM::LO_Cache
functionalCache	MemControl/LO-Cache/LO-Cache.h	/^    CacheBank ***functionalCache;$/;"	m	class:NVM::LO_Cache
mainMemory	MemControl/LO-Cache/LO-Cache.h	/^    NVMain *mainMemory;$/;"	m	class:NVM::LO_Cache
mainMemoryConfig	MemControl/LO-Cache/LO-Cache.h	/^    Config *mainMemoryConfig;$/;"	m	class:NVM::LO_Cache
max_addr	MemControl/LO-Cache/LO-Cache.h	/^    uint64_t max_addr;$/;"	m	class:NVM::LO_Cache
outstandingFills	MemControl/LO-Cache/LO-Cache.h	/^    std::map<NVMainRequest *, NVMainRequest *> outstandingFills;$/;"	m	class:NVM::LO_Cache
perfectFills	MemControl/LO-Cache/LO-Cache.h	/^    bool perfectFills;$/;"	m	class:NVM::LO_Cache
ranks	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t ranks, banks;$/;"	m	class:NVM::LO_Cache
rb_hits	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t rb_hits, rb_miss;$/;"	m	class:NVM::LO_Cache
rb_miss	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t rb_hits, rb_miss;$/;"	m	class:NVM::LO_Cache
starvationThreshold	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t starvationThreshold;$/;"	m	class:NVM::LO_Cache
starvation_precharges	MemControl/LO-Cache/LO-Cache.h	/^    ncounter_t starvation_precharges;$/;"	m	class:NVM::LO_Cache
CreateNewController	MemControl/MemoryControllerFactory.cpp	/^MemoryController *MemoryControllerFactory::CreateNewController( std::string controller ) $/;"	f	class:MemoryControllerFactory
MemoryControllerFactory	MemControl/MemoryControllerFactory.h	/^    MemoryControllerFactory( ) {}$/;"	f	class:NVM::MemoryControllerFactory
MemoryControllerFactory	MemControl/MemoryControllerFactory.h	/^class MemoryControllerFactory$/;"	c	namespace:NVM
NVM	MemControl/MemoryControllerFactory.h	/^namespace NVM {$/;"	n
__MEMORYCONTROLLERFACTORY_H__	MemControl/MemoryControllerFactory.h	35;"	d
~MemoryControllerFactory	MemControl/MemoryControllerFactory.h	/^    ~MemoryControllerFactory( ) {}$/;"	f	class:NVM::MemoryControllerFactory
CalculateStats	MemControl/MissMap/MissMap.cpp	/^void MissMap::CalculateStats( )$/;"	f	class:MissMap
Cycle	MemControl/MissMap/MissMap.cpp	/^void MissMap::Cycle( ncycle_t )$/;"	f	class:MissMap
IssueAtomic	MemControl/MissMap/MissMap.cpp	/^bool MissMap::IssueAtomic( NVMainRequest *req )$/;"	f	class:MissMap
IssueCommand	MemControl/MissMap/MissMap.cpp	/^bool MissMap::IssueCommand( NVMainRequest *req )$/;"	f	class:MissMap
MissMap	MemControl/MissMap/MissMap.cpp	/^MissMap::MissMap( )$/;"	f	class:MissMap
QueueFull	MemControl/MissMap/MissMap.cpp	/^bool MissMap::QueueFull( NVMainRequest * )$/;"	f	class:MissMap
RegisterStats	MemControl/MissMap/MissMap.cpp	/^void MissMap::RegisterStats( )$/;"	f	class:MissMap
RequestComplete	MemControl/MissMap/MissMap.cpp	/^bool MissMap::RequestComplete( NVMainRequest *req )$/;"	f	class:MissMap
SetConfig	MemControl/MissMap/MissMap.cpp	/^void MissMap::SetConfig( Config *conf, bool createChildren )$/;"	f	class:MissMap
~MissMap	MemControl/MissMap/MissMap.cpp	/^MissMap::~MissMap( )$/;"	f	class:MissMap
MISSMAP_FORCE_EVICT	MemControl/MissMap/MissMap.h	48;"	d
MISSMAP_MEMREAD	MemControl/MissMap/MissMap.h	47;"	d
MISSMAP_READ	MemControl/MissMap/MissMap.h	45;"	d
MISSMAP_WRITE	MemControl/MissMap/MissMap.h	46;"	d
MissMap	MemControl/MissMap/MissMap.h	/^class MissMap : public MemoryController$/;"	c	namespace:NVM
NVM	MemControl/MissMap/MissMap.h	/^namespace NVM {$/;"	n
__UTILS_MISSMAP_H__	MemControl/MissMap/MissMap.h	35;"	d
drcChannels	MemControl/MissMap/MissMap.h	/^    LH_Cache **drcChannels;$/;"	m	class:NVM::MissMap
mainMemory	MemControl/MissMap/MissMap.h	/^    NVMain *mainMemory;$/;"	m	class:NVM::MissMap
missMap	MemControl/MissMap/MissMap.h	/^    CacheBank *missMap;$/;"	m	class:NVM::MissMap
missMapAllocations	MemControl/MissMap/MissMap.h	/^    uint64_t missMapAllocations, missMapWrites;$/;"	m	class:NVM::MissMap
missMapFillQueue	MemControl/MissMap/MissMap.h	/^    std::queue<NVMainRequest *> missMapFillQueue;$/;"	m	class:NVM::MissMap
missMapForceEvicts	MemControl/MissMap/MissMap.h	/^    uint64_t missMapForceEvicts;$/;"	m	class:NVM::MissMap
missMapHits	MemControl/MissMap/MissMap.h	/^    uint64_t missMapHits, missMapMisses;$/;"	m	class:NVM::MissMap
missMapMemReads	MemControl/MissMap/MissMap.h	/^    uint64_t missMapMemReads;$/;"	m	class:NVM::MissMap
missMapMisses	MemControl/MissMap/MissMap.h	/^    uint64_t missMapHits, missMapMisses;$/;"	m	class:NVM::MissMap
missMapQueue	MemControl/MissMap/MissMap.h	/^    std::queue<NVMainRequest *> missMapQueue;$/;"	m	class:NVM::MissMap
missMapQueueSize	MemControl/MissMap/MissMap.h	/^    uint64_t missMapQueueSize;$/;"	m	class:NVM::MissMap
missMapWrites	MemControl/MissMap/MissMap.h	/^    uint64_t missMapAllocations, missMapWrites;$/;"	m	class:NVM::MissMap
numChannels	MemControl/MissMap/MissMap.h	/^    ncounter_t numChannels;$/;"	m	class:NVM::MissMap
Cycle	MemControl/PerfectMemory/PerfectMemory.cpp	/^void PerfectMemory::Cycle( ncycle_t )$/;"	f	class:PerfectMemory
IssueCommand	MemControl/PerfectMemory/PerfectMemory.cpp	/^bool PerfectMemory::IssueCommand( NVMainRequest *req )$/;"	f	class:PerfectMemory
PerfectMemory	MemControl/PerfectMemory/PerfectMemory.cpp	/^PerfectMemory::PerfectMemory( )$/;"	f	class:PerfectMemory
PrintStats	MemControl/PerfectMemory/PerfectMemory.cpp	/^void PerfectMemory::PrintStats( std::ostream& )$/;"	f	class:PerfectMemory
NVM	MemControl/PerfectMemory/PerfectMemory.h	/^namespace NVM {$/;"	n
PerfectMemory	MemControl/PerfectMemory/PerfectMemory.h	/^class PerfectMemory : public MemoryController$/;"	c	namespace:NVM
__PERFECTMEMORY_H__	MemControl/PerfectMemory/PerfectMemory.h	35;"	d
~PerfectMemory	MemControl/PerfectMemory/PerfectMemory.h	/^    ~PerfectMemory( ) { }$/;"	f	class:NVM::PerfectMemory
CalculateStats	MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::CalculateStats( )$/;"	f	class:PredictorDRC
Cycle	MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::Cycle( ncycle_t steps )$/;"	f	class:PredictorDRC
IsIssuable	MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IsIssuable( NVMainRequest * req, FailReason * \/*fail*\/ )$/;"	f	class:PredictorDRC
IssueAtomic	MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IssueAtomic( NVMainRequest *req )$/;"	f	class:PredictorDRC
IssueCommand	MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IssueCommand( NVMainRequest *req )$/;"	f	class:PredictorDRC
PredictorDRC	MemControl/PredictorDRC/PredictorDRC.cpp	/^PredictorDRC::PredictorDRC( )$/;"	f	class:PredictorDRC
RegisterStats	MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::RegisterStats( )$/;"	f	class:PredictorDRC
RequestComplete	MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::RequestComplete( NVMainRequest *req )$/;"	f	class:PredictorDRC
SetConfig	MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::SetConfig( Config *conf, bool createChildren )$/;"	f	class:PredictorDRC
~PredictorDRC	MemControl/PredictorDRC/PredictorDRC.cpp	/^PredictorDRC::~PredictorDRC( )$/;"	f	class:PredictorDRC
DRC	MemControl/PredictorDRC/PredictorDRC.h	/^    DRAMCache *DRC;$/;"	m	class:NVM::PredictorDRC
NVM	MemControl/PredictorDRC/PredictorDRC.h	/^namespace NVM {$/;"	n
PredictorDRC	MemControl/PredictorDRC/PredictorDRC.h	/^class PredictorDRC : public MemoryController$/;"	c	namespace:NVM
__MEMCONTROL_PREDICTORDRC_H__	MemControl/PredictorDRC/PredictorDRC.h	35;"	d
mainMemory	MemControl/PredictorDRC/PredictorDRC.h	/^    NVMain *mainMemory;$/;"	m	class:NVM::PredictorDRC
numChannels	MemControl/PredictorDRC/PredictorDRC.h	/^    ncounter_t numChannels;$/;"	m	class:NVM::PredictorDRC
predictor	MemControl/PredictorDRC/PredictorDRC.h	/^    AccessPredictor *predictor;$/;"	m	class:NVM::PredictorDRC
CalculateStats	NVM/nvmain.cpp	/^void NVMain::CalculateStats( )$/;"	f	class:NVMain
CheckPrefetch	NVM/nvmain.cpp	/^bool NVMain::CheckPrefetch( NVMainRequest *request )$/;"	f	class:NVMain
Cycle	NVM/nvmain.cpp	/^void NVMain::Cycle( ncycle_t steps )$/;"	f	class:NVMain
EnqueuePendingMemoryRequests	NVM/nvmain.cpp	/^void NVMain::EnqueuePendingMemoryRequests( NVMainRequest *req )$/;"	f	class:NVMain
GeneratePrefetches	NVM/nvmain.cpp	/^void NVMain::GeneratePrefetches( NVMainRequest *request, std::vector<NVMAddress>& prefetchList )$/;"	f	class:NVMain
GetConfig	NVM/nvmain.cpp	/^Config *NVMain::GetConfig( )$/;"	f	class:NVMain
IsIssuable	NVM/nvmain.cpp	/^bool NVMain::IsIssuable( NVMainRequest *request, FailReason *reason )$/;"	f	class:NVMain
IssueAtomic	NVM/nvmain.cpp	/^bool NVMain::IssueAtomic( NVMainRequest *request )$/;"	f	class:NVMain
IssueCommand	NVM/nvmain.cpp	/^bool NVMain::IssueCommand( NVMainRequest *request )$/;"	f	class:NVMain
IssuePrefetch	NVM/nvmain.cpp	/^void NVMain::IssuePrefetch( NVMainRequest *request )$/;"	f	class:NVMain
NVMain	NVM/nvmain.cpp	/^NVMain::NVMain( )$/;"	f	class:NVMain
PrintPreTrace	NVM/nvmain.cpp	/^void NVMain::PrintPreTrace( NVMainRequest *request )$/;"	f	class:NVMain
RegisterStats	NVM/nvmain.cpp	/^void NVMain::RegisterStats( )$/;"	f	class:NVMain
RequestComplete	NVM/nvmain.cpp	/^bool NVMain::RequestComplete( NVMainRequest *request )$/;"	f	class:NVMain
SetConfig	NVM/nvmain.cpp	/^void NVMain::SetConfig( Config *conf, std::string memoryName, bool createChildren )$/;"	f	class:NVMain
~NVMain	NVM/nvmain.cpp	/^NVMain::~NVMain( )$/;"	f	class:NVMain
NVM	NVM/nvmain.h	/^namespace NVM {$/;"	n
NVMain	NVM/nvmain.h	/^class NVMain : public NVMObject$/;"	c	namespace:NVM
__NVMAIN_H__	NVM/nvmain.h	35;"	d
channelConfig	NVM/nvmain.h	/^    Config **channelConfig;$/;"	m	class:NVM::NVMain
config	NVM/nvmain.h	/^    Config *config;$/;"	m	class:NVM::NVMain
memoryControllers	NVM/nvmain.h	/^    MemoryController **memoryControllers;$/;"	m	class:NVM::NVMain
numChannels	NVM/nvmain.h	/^    unsigned int numChannels;$/;"	m	class:NVM::NVMain
pendingMemoryRequests	NVM/nvmain.h	/^    std::queue<NVMainRequest *> pendingMemoryRequests;$/;"	m	class:NVM::NVMain
preTracer	NVM/nvmain.h	/^    GenericTraceWriter *preTracer;$/;"	m	class:NVM::NVMain
prefetchBuffer	NVM/nvmain.h	/^    std::list<NVMainRequest *> prefetchBuffer;$/;"	m	class:NVM::NVMain
prefetcher	NVM/nvmain.h	/^    Prefetcher *prefetcher;$/;"	m	class:NVM::NVMain
pretraceOutput	NVM/nvmain.h	/^    std::ofstream pretraceOutput;$/;"	m	class:NVM::NVMain
simInterface	NVM/nvmain.h	/^    SimInterface *simInterface;$/;"	m	class:NVM::NVMain
successfulPrefetches	NVM/nvmain.h	/^    ncounter_t successfulPrefetches;$/;"	m	class:NVM::NVMain
syncValue	NVM/nvmain.h	/^    double syncValue;$/;"	m	class:NVM::NVMain
totalReadRequests	NVM/nvmain.h	/^    ncounter_t totalReadRequests;$/;"	m	class:NVM::NVMain
totalWriteRequests	NVM/nvmain.h	/^    ncounter_t totalWriteRequests;$/;"	m	class:NVM::NVMain
translator	NVM/nvmain.h	/^    AddressTranslator *translator;$/;"	m	class:NVM::NVMain
unsuccessfulPrefetches	NVM/nvmain.h	/^    ncounter_t unsuccessfulPrefetches;$/;"	m	class:NVM::NVMain
DoPrefetch	Prefetchers/NaivePrefetcher/NaivePrefetcher.cpp	/^bool NaivePrefetcher::DoPrefetch( NVMainRequest *triggerOp, $/;"	f	class:NaivePrefetcher
NVM	Prefetchers/NaivePrefetcher/NaivePrefetcher.h	/^namespace NVM {$/;"	n
NaivePrefetcher	Prefetchers/NaivePrefetcher/NaivePrefetcher.h	/^    NaivePrefetcher( ) { }$/;"	f	class:NVM::NaivePrefetcher
NaivePrefetcher	Prefetchers/NaivePrefetcher/NaivePrefetcher.h	/^class NaivePrefetcher : public Prefetcher$/;"	c	namespace:NVM
__PREFETCHERS_NAIVEPREFETCHER_H__	Prefetchers/NaivePrefetcher/NaivePrefetcher.h	35;"	d
~NaivePrefetcher	Prefetchers/NaivePrefetcher/NaivePrefetcher.h	/^    ~NaivePrefetcher( ) { }$/;"	f	class:NVM::NaivePrefetcher
CreateNewPrefetcher	Prefetchers/PrefetcherFactory.cpp	/^Prefetcher *PrefetcherFactory::CreateNewPrefetcher( std::string name )$/;"	f	class:PrefetcherFactory
NVM	Prefetchers/PrefetcherFactory.h	/^namespace NVM {$/;"	n
PrefetcherFactory	Prefetchers/PrefetcherFactory.h	/^    PrefetcherFactory( ) { }$/;"	f	class:NVM::PrefetcherFactory
PrefetcherFactory	Prefetchers/PrefetcherFactory.h	/^class PrefetcherFactory$/;"	c	namespace:NVM
__PREFETCHERFACTORY_H__	Prefetchers/PrefetcherFactory.h	35;"	d
~PrefetcherFactory	Prefetchers/PrefetcherFactory.h	/^    ~PrefetcherFactory( ) { }$/;"	f	class:NVM::PrefetcherFactory
DoPrefetch	Prefetchers/STeMS/STeMS.cpp	/^bool STeMS::DoPrefetch( NVMainRequest *triggerOp, $/;"	f	class:STeMS
FetchNextUnused	Prefetchers/STeMS/STeMS.cpp	/^void STeMS::FetchNextUnused( PatternSequence *rps, int count, $/;"	f	class:STeMS
NotifyAccess	Prefetchers/STeMS/STeMS.cpp	/^bool STeMS::NotifyAccess( NVMainRequest *accessOp, $/;"	f	class:STeMS
AGT	Prefetchers/STeMS/STeMS.h	/^    std::map<uint64_t, PatternSequence*> AGT; \/\/ Active Generation Table$/;"	m	class:NVM::STeMS
NVM	Prefetchers/STeMS/STeMS.h	/^namespace NVM {$/;"	n
PST	Prefetchers/STeMS/STeMS.h	/^    std::map<uint64_t, PatternSequence*> PST; \/\/ Pattern Sequence Table$/;"	m	class:NVM::STeMS
PatternSequence	Prefetchers/STeMS/STeMS.h	/^struct PatternSequence$/;"	s	namespace:NVM
ReconBuf	Prefetchers/STeMS/STeMS.h	/^    std::map<uint64_t, PatternSequence*> ReconBuf; \/\/ Reconstruction Buffer$/;"	m	class:NVM::STeMS
STeMS	Prefetchers/STeMS/STeMS.h	/^    STeMS( ) { }$/;"	f	class:NVM::STeMS
STeMS	Prefetchers/STeMS/STeMS.h	/^class STeMS : public Prefetcher$/;"	c	namespace:NVM
__PREFETCHERS_STEMS_H__	Prefetchers/STeMS/STeMS.h	35;"	d
address	Prefetchers/STeMS/STeMS.h	/^    uint64_t address;$/;"	m	struct:NVM::PatternSequence
delta	Prefetchers/STeMS/STeMS.h	/^    uint64_t delta[16];$/;"	m	struct:NVM::PatternSequence
fetched	Prefetchers/STeMS/STeMS.h	/^    bool fetched[16];$/;"	m	struct:NVM::PatternSequence
offset	Prefetchers/STeMS/STeMS.h	/^    uint64_t offset[16];$/;"	m	struct:NVM::PatternSequence
size	Prefetchers/STeMS/STeMS.h	/^    uint64_t size;$/;"	m	struct:NVM::PatternSequence
startedPrefetch	Prefetchers/STeMS/STeMS.h	/^    bool startedPrefetch;$/;"	m	struct:NVM::PatternSequence
useCount	Prefetchers/STeMS/STeMS.h	/^    uint64_t useCount;$/;"	m	struct:NVM::PatternSequence
used	Prefetchers/STeMS/STeMS.h	/^    bool used[16];$/;"	m	struct:NVM::PatternSequence
~STeMS	Prefetchers/STeMS/STeMS.h	/^    ~STeMS( ) { }$/;"	f	class:NVM::STeMS
CreateNewRank	Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateNewRank( std::string rankName )$/;"	f	class:RankFactory
CreateRank	Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateRank( std::string rankName )$/;"	f	class:RankFactory
CreateRankNoWarn	Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateRankNoWarn( std::string rankName )$/;"	f	class:RankFactory
NVM	Ranks/RankFactory.h	/^namespace NVM {$/;"	n
RankFactory	Ranks/RankFactory.h	/^    RankFactory( ) { }$/;"	f	class:NVM::RankFactory
RankFactory	Ranks/RankFactory.h	/^class RankFactory$/;"	c	namespace:NVM
__RANKFACTORY_H__	Ranks/RankFactory.h	35;"	d
~RankFactory	Ranks/RankFactory.h	/^    ~RankFactory( ) { }$/;"	f	class:NVM::RankFactory
Activate	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Activate( NVMainRequest *request )$/;"	f	class:StandardRank
CalculateStats	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::CalculateStats( )$/;"	f	class:StandardRank
CanPowerDown	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::CanPowerDown( NVMainRequest *request )$/;"	f	class:StandardRank
CanPowerUp	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::CanPowerUp( NVMainRequest *request )$/;"	f	class:StandardRank
Cycle	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::Cycle( ncycle_t steps )$/;"	f	class:StandardRank
Idle	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Idle( )$/;"	f	class:StandardRank
IsIssuable	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:StandardRank
IssueCommand	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::IssueCommand( NVMainRequest *req )$/;"	f	class:StandardRank
NextIssuable	Ranks/StandardRank/StandardRank.cpp	/^ncycle_t StandardRank::NextIssuable( NVMainRequest *request )$/;"	f	class:StandardRank
Notify	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::Notify( NVMainRequest *request )$/;"	f	class:StandardRank
PowerDown	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::PowerDown( NVMainRequest *request )$/;"	f	class:StandardRank
PowerUp	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::PowerUp( NVMainRequest *request )$/;"	f	class:StandardRank
Precharge	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Precharge( NVMainRequest *request )$/;"	f	class:StandardRank
Read	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Read( NVMainRequest *request )$/;"	f	class:StandardRank
Refresh	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Refresh( NVMainRequest *request )$/;"	f	class:StandardRank
RegisterStats	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::RegisterStats( )$/;"	f	class:StandardRank
RequestComplete	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::RequestComplete( NVMainRequest* req )$/;"	f	class:StandardRank
ResetStats	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::ResetStats( )$/;"	f	class:StandardRank
SetConfig	Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::SetConfig( Config *c, bool createChildren )$/;"	f	class:StandardRank
StandardRank	Ranks/StandardRank/StandardRank.cpp	/^StandardRank::StandardRank( )$/;"	f	class:StandardRank
Write	Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Write( NVMainRequest *request )$/;"	f	class:StandardRank
~StandardRank	Ranks/StandardRank/StandardRank.cpp	/^StandardRank::~StandardRank( )$/;"	f	class:StandardRank
NVM	Ranks/StandardRank/StandardRank.h	/^namespace NVM {$/;"	n
RAWindex	Ranks/StandardRank/StandardRank.h	/^    ncounter_t RAWindex;$/;"	m	class:NVM::StandardRank
STANDARDRANK_CLOSED	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_CLOSED,    \/***< all banks in the rank are closed (standby) *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_OPEN	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_OPEN,      \/***< Rank has at least one open bank  *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_PDA	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_PDA,       \/***< Rank is in active powered down mode *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_PDPF	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_PDPF,      \/***< Rank is in precharge powered down, fast exit mode *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_PDPS	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_PDPS       \/***< Rank is in precharge powered down, slow exit mode *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_REFRESHING	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_REFRESHING,\/***< some banks in the rank are refreshing *\/$/;"	e	enum:NVM::StandardRank_State
STANDARDRANK_UNKNOWN	Ranks/StandardRank/StandardRank.h	/^    STANDARDRANK_UNKNOWN,   \/***< Unknown state. Uh oh. *\/$/;"	e	enum:NVM::StandardRank_State
StandardRank	Ranks/StandardRank/StandardRank.h	/^class StandardRank : public Rank$/;"	c	namespace:NVM
StandardRank_State	Ranks/StandardRank/StandardRank.h	/^enum StandardRank_State $/;"	g	namespace:NVM
__STANDARDRANK_H__	Ranks/StandardRank/StandardRank.h	37;"	d
actWaitAverage	Ranks/StandardRank/StandardRank.h	/^    double actWaitAverage;$/;"	m	class:NVM::StandardRank
actWaitTotal	Ranks/StandardRank/StandardRank.h	/^    ncounter_t actWaitTotal;$/;"	m	class:NVM::StandardRank
actWaits	Ranks/StandardRank/StandardRank.h	/^    ncounter_t actWaits;$/;"	m	class:NVM::StandardRank
activateEnergy	Ranks/StandardRank/StandardRank.h	/^    double totalEnergy, backgroundEnergy, activateEnergy, burstEnergy, refreshEnergy;$/;"	m	class:NVM::StandardRank
activatePower	Ranks/StandardRank/StandardRank.h	/^    double totalPower, backgroundPower, activatePower, burstPower, refreshPower;$/;"	m	class:NVM::StandardRank
activeCycles	Ranks/StandardRank/StandardRank.h	/^    ncounter_t activeCycles;$/;"	m	class:NVM::StandardRank
backgroundEnergy	Ranks/StandardRank/StandardRank.h	/^    double totalEnergy, backgroundEnergy, activateEnergy, burstEnergy, refreshEnergy;$/;"	m	class:NVM::StandardRank
backgroundPower	Ranks/StandardRank/StandardRank.h	/^    double totalPower, backgroundPower, activatePower, burstPower, refreshPower;$/;"	m	class:NVM::StandardRank
bankCount	Ranks/StandardRank/StandardRank.h	/^    ncounter_t bankCount;$/;"	m	class:NVM::StandardRank
banksPerRefresh	Ranks/StandardRank/StandardRank.h	/^    ncounter_t banksPerRefresh;$/;"	m	class:NVM::StandardRank
burstEnergy	Ranks/StandardRank/StandardRank.h	/^    double totalEnergy, backgroundEnergy, activateEnergy, burstEnergy, refreshEnergy;$/;"	m	class:NVM::StandardRank
burstPower	Ranks/StandardRank/StandardRank.h	/^    double totalPower, backgroundPower, activatePower, burstPower, refreshPower;$/;"	m	class:NVM::StandardRank
busWidth	Ranks/StandardRank/StandardRank.h	/^    ncounter_t busWidth;$/;"	m	class:NVM::StandardRank
conf	Ranks/StandardRank/StandardRank.h	/^    Config *conf;$/;"	m	class:NVM::StandardRank
deviceCount	Ranks/StandardRank/StandardRank.h	/^    ncounter_t deviceCount;$/;"	m	class:NVM::StandardRank
deviceWidth	Ranks/StandardRank/StandardRank.h	/^    ncounter_t deviceWidth;$/;"	m	class:NVM::StandardRank
fastExitActiveCycles	Ranks/StandardRank/StandardRank.h	/^    ncounter_t fastExitActiveCycles;$/;"	m	class:NVM::StandardRank
fastExitPrechargeCycles	Ranks/StandardRank/StandardRank.h	/^    ncounter_t fastExitPrechargeCycles;$/;"	m	class:NVM::StandardRank
fawWaitAverage	Ranks/StandardRank/StandardRank.h	/^    double fawWaitAverage;$/;"	m	class:NVM::StandardRank
fawWaitTotal	Ranks/StandardRank/StandardRank.h	/^    ncounter_t fawWaitTotal;$/;"	m	class:NVM::StandardRank
fawWaits	Ranks/StandardRank/StandardRank.h	/^    ncounter_t fawWaits;$/;"	m	class:NVM::StandardRank
lastActivate	Ranks/StandardRank/StandardRank.h	/^    ncycle_t* lastActivate;$/;"	m	class:NVM::StandardRank
lastReset	Ranks/StandardRank/StandardRank.h	/^    ncycle_t lastReset;$/;"	m	class:NVM::StandardRank
nextActivate	Ranks/StandardRank/StandardRank.h	/^    ncycle_t nextActivate;$/;"	m	class:NVM::StandardRank
nextPrecharge	Ranks/StandardRank/StandardRank.h	/^    ncycle_t nextPrecharge;$/;"	m	class:NVM::StandardRank
nextRead	Ranks/StandardRank/StandardRank.h	/^    ncycle_t nextRead;$/;"	m	class:NVM::StandardRank
nextWrite	Ranks/StandardRank/StandardRank.h	/^    ncycle_t nextWrite;$/;"	m	class:NVM::StandardRank
psInterval	Ranks/StandardRank/StandardRank.h	/^    uint64_t psInterval;$/;"	m	class:NVM::StandardRank
rawNum	Ranks/StandardRank/StandardRank.h	/^    ncounter_t rawNum;$/;"	m	class:NVM::StandardRank
reads	Ranks/StandardRank/StandardRank.h	/^    ncounter_t reads, writes;$/;"	m	class:NVM::StandardRank
refreshEnergy	Ranks/StandardRank/StandardRank.h	/^    double totalEnergy, backgroundEnergy, activateEnergy, burstEnergy, refreshEnergy;$/;"	m	class:NVM::StandardRank
refreshPower	Ranks/StandardRank/StandardRank.h	/^    double totalPower, backgroundPower, activatePower, burstPower, refreshPower;$/;"	m	class:NVM::StandardRank
rrdWaitAverage	Ranks/StandardRank/StandardRank.h	/^    double rrdWaitAverage;$/;"	m	class:NVM::StandardRank
rrdWaitTotal	Ranks/StandardRank/StandardRank.h	/^    ncounter_t rrdWaitTotal;$/;"	m	class:NVM::StandardRank
rrdWaits	Ranks/StandardRank/StandardRank.h	/^    ncounter_t rrdWaits;$/;"	m	class:NVM::StandardRank
slowExitCycles	Ranks/StandardRank/StandardRank.h	/^    ncounter_t slowExitCycles;$/;"	m	class:NVM::StandardRank
standbyCycles	Ranks/StandardRank/StandardRank.h	/^    ncounter_t standbyCycles;$/;"	m	class:NVM::StandardRank
state	Ranks/StandardRank/StandardRank.h	/^    StandardRank_State state;$/;"	m	class:NVM::StandardRank
stateTimeout	Ranks/StandardRank/StandardRank.h	/^    ncounter_t stateTimeout;$/;"	m	class:NVM::StandardRank
totalEnergy	Ranks/StandardRank/StandardRank.h	/^    double totalEnergy, backgroundEnergy, activateEnergy, burstEnergy, refreshEnergy;$/;"	m	class:NVM::StandardRank
totalPower	Ranks/StandardRank/StandardRank.h	/^    double totalPower, backgroundPower, activatePower, burstPower, refreshPower;$/;"	m	class:NVM::StandardRank
writes	Ranks/StandardRank/StandardRank.h	/^    ncounter_t reads, writes;$/;"	m	class:NVM::StandardRank
common_interval	Scripts/StatsParser.py	/^        common_interval = max_int[index]$/;"	v
common_interval	Scripts/StatsParser.py	/^common_interval = 9999999$/;"	v
csvfile	Scripts/StatsParser.py	/^csvfile = open(options.output, 'w')$/;"	v
dump_interval	Scripts/StatsParser.py	/^    dump_interval = options.interval.split(',')$/;"	v
dump_interval	Scripts/StatsParser.py	/^dump_interval = [0] * len(options.files.split(','))$/;"	v
file_index	Scripts/StatsParser.py	/^    file_index = file_index + 1$/;"	v
file_index	Scripts/StatsParser.py	/^file_index = 0$/;"	v
files	Scripts/StatsParser.py	/^files = options.files.split(',')$/;"	v
handle	Scripts/StatsParser.py	/^    handle = open(f, 'r')$/;"	v
index	Scripts/StatsParser.py	/^        index = index + 1$/;"	v
index	Scripts/StatsParser.py	/^    index = 0$/;"	v
index	Scripts/StatsParser.py	/^    index = index + 1$/;"	v
index	Scripts/StatsParser.py	/^index = 0$/;"	v
interval	Scripts/StatsParser.py	/^            interval = int(interval_tag[1:])$/;"	v
interval_tag	Scripts/StatsParser.py	/^        interval_tag = tags[0]$/;"	v
item_index	Scripts/StatsParser.py	/^                    item_index = item_index + 1$/;"	v
item_index	Scripts/StatsParser.py	/^                item_index = item_index + 1$/;"	v
item_index	Scripts/StatsParser.py	/^            item_index = 0$/;"	v
item_index	Scripts/StatsParser.py	/^            item_index = item_index + 1$/;"	v
item_index	Scripts/StatsParser.py	/^        item_index = 0$/;"	v
m5findcount	Scripts/StatsParser.py	/^    m5findcount = [0] * len(m5stringlist)$/;"	v
m5handle	Scripts/StatsParser.py	/^        m5handle = open(m5out, 'r')$/;"	v
m5out	Scripts/StatsParser.py	/^        m5out = f[0:len(f)-4] + '\/m5out\/stats.txt'$/;"	v
m5stringlist	Scripts/StatsParser.py	/^m5stringlist = []$/;"	v
m5valuelist	Scripts/StatsParser.py	/^    m5valuelist = []$/;"	v
max_int	Scripts/StatsParser.py	/^max_int = [0] * len(options.files.split(','))$/;"	v
parser	Scripts/StatsParser.py	/^parser = OptionParser()$/;"	v
s	Scripts/StatsParser.py	/^    s = 'Finding max interval in file ' + f$/;"	v
s	Scripts/StatsParser.py	/^    s = 'i' + str(dump_interval[index]) + '.' + line.strip()$/;"	v
s	Scripts/StatsParser.py	/^    s = f + ' has ' + str(max_int[index]) + ' intervals'$/;"	v
s	Scripts/StatsParser.py	/^s = 'Common interval is ' + str(common_interval)$/;"	v
slist	Scripts/StatsParser.py	/^    slist = open(options.m5stats, 'r')$/;"	v
slist	Scripts/StatsParser.py	/^slist = open(options.stats, 'r')$/;"	v
split_line	Scripts/StatsParser.py	/^                    split_line = line.split('#')$/;"	v
split_string	Scripts/StatsParser.py	/^                    split_string = split_line[0]$/;"	v
stringlist	Scripts/StatsParser.py	/^stringlist = [] $/;"	v
tags	Scripts/StatsParser.py	/^        tags = line.split('.')$/;"	v
valuelist	Scripts/StatsParser.py	/^    valuelist = []$/;"	v
Gem5Interface	SimInterface/Gem5Interface/Gem5Interface.cpp	/^Gem5Interface::Gem5Interface( )$/;"	f	class:Gem5Interface
GetCacheHits	SimInterface/Gem5Interface/Gem5Interface.cpp	/^unsigned int Gem5Interface::GetCacheHits( int core, int level )$/;"	f	class:Gem5Interface
GetCacheMisses	SimInterface/Gem5Interface/Gem5Interface.cpp	/^unsigned int Gem5Interface::GetCacheMisses( int core, int level )$/;"	f	class:Gem5Interface
GetDataAtAddress	SimInterface/Gem5Interface/Gem5Interface.cpp	/^int  Gem5Interface::GetDataAtAddress( uint64_t \/*address*\/, NVMDataBlock* \/*data*\/ )$/;"	f	class:Gem5Interface
GetInstructionCount	SimInterface/Gem5Interface/Gem5Interface.cpp	/^unsigned int Gem5Interface::GetInstructionCount( int core )$/;"	f	class:Gem5Interface
GetUserMisses	SimInterface/Gem5Interface/Gem5Interface.cpp	/^unsigned int Gem5Interface::GetUserMisses( int core )$/;"	f	class:Gem5Interface
HasCacheHits	SimInterface/Gem5Interface/Gem5Interface.cpp	/^bool Gem5Interface::HasCacheHits( )$/;"	f	class:Gem5Interface
HasCacheMisses	SimInterface/Gem5Interface/Gem5Interface.cpp	/^bool Gem5Interface::HasCacheMisses( )$/;"	f	class:Gem5Interface
HasInstructionCount	SimInterface/Gem5Interface/Gem5Interface.cpp	/^bool Gem5Interface::HasInstructionCount( )$/;"	f	class:Gem5Interface
SetDataAtAddress	SimInterface/Gem5Interface/Gem5Interface.cpp	/^void Gem5Interface::SetDataAtAddress( uint64_t \/*address*\/, NVMDataBlock& \/*data*\/ )$/;"	f	class:Gem5Interface
~Gem5Interface	SimInterface/Gem5Interface/Gem5Interface.cpp	/^Gem5Interface::~Gem5Interface( )$/;"	f	class:Gem5Interface
Gem5Interface	SimInterface/Gem5Interface/Gem5Interface.h	/^class Gem5Interface : public SimInterface$/;"	c	namespace:NVM
NVM	SimInterface/Gem5Interface/Gem5Interface.h	/^namespace NVM {$/;"	n
__NVMAIN_SIMINTERFACE_GEM5_H__	SimInterface/Gem5Interface/Gem5Interface.h	35;"	d
GemsInterface	SimInterface/GemsInterface/GemsInterface.cpp	/^GemsInterface::GemsInterface( )$/;"	f	class:GemsInterface
GetCacheHits	SimInterface/GemsInterface/GemsInterface.cpp	/^unsigned int GemsInterface::GetCacheHits( int core, int level )$/;"	f	class:GemsInterface
GetCacheMisses	SimInterface/GemsInterface/GemsInterface.cpp	/^unsigned int GemsInterface::GetCacheMisses( int core, int level )$/;"	f	class:GemsInterface
GetDataAtAddress	SimInterface/GemsInterface/GemsInterface.cpp	/^int GemsInterface::GetDataAtAddress( uint64_t address, NVMDataBlock *data )$/;"	f	class:GemsInterface
GetEventQueuePtr	SimInterface/GemsInterface/GemsInterface.cpp	/^EventQueue *GemsInterface::GetEventQueuePtr( )$/;"	f	class:GemsInterface
GetInstructionCount	SimInterface/GemsInterface/GemsInterface.cpp	/^unsigned int GemsInterface::GetInstructionCount( int core )$/;"	f	class:GemsInterface
GetSystemPtr	SimInterface/GemsInterface/GemsInterface.cpp	/^System *GemsInterface::GetSystemPtr( )$/;"	f	class:GemsInterface
GetUserMisses	SimInterface/GemsInterface/GemsInterface.cpp	/^unsigned int GemsInterface::GetUserMisses( int core )$/;"	f	class:GemsInterface
HasCacheHits	SimInterface/GemsInterface/GemsInterface.cpp	/^bool GemsInterface::HasCacheHits( )$/;"	f	class:GemsInterface
HasCacheMisses	SimInterface/GemsInterface/GemsInterface.cpp	/^bool GemsInterface::HasCacheMisses( )$/;"	f	class:GemsInterface
HasInstructionCount	SimInterface/GemsInterface/GemsInterface.cpp	/^bool GemsInterface::HasInstructionCount( )$/;"	f	class:GemsInterface
SetDataAtAddress	SimInterface/GemsInterface/GemsInterface.cpp	/^void GemsInterface::SetDataAtAddress( uint64_t \/*address*\/, NVMDataBlock& \/*data*\/ )$/;"	f	class:GemsInterface
SetEventQueuePtr	SimInterface/GemsInterface/GemsInterface.cpp	/^void GemsInterface::SetEventQueuePtr( EventQueue *eventQueue_ptr )$/;"	f	class:GemsInterface
SetSystemPtr	SimInterface/GemsInterface/GemsInterface.cpp	/^void GemsInterface::SetSystemPtr( System *system_ptr )$/;"	f	class:GemsInterface
~GemsInterface	SimInterface/GemsInterface/GemsInterface.cpp	/^GemsInterface::~GemsInterface( )$/;"	f	class:GemsInterface
GemsInterface	SimInterface/GemsInterface/GemsInterface.h	/^class GemsInterface : public SimInterface$/;"	c	namespace:NVM
NVM	SimInterface/GemsInterface/GemsInterface.h	/^namespace NVM {$/;"	n
__NVMAIN_GEMS_H__	SimInterface/GemsInterface/GemsInterface.h	35;"	d
gems_eventQueue_ptr	SimInterface/GemsInterface/GemsInterface.h	/^    EventQueue *gems_eventQueue_ptr;$/;"	m	class:NVM::GemsInterface
gems_system_ptr	SimInterface/GemsInterface/GemsInterface.h	/^    System *gems_system_ptr;$/;"	m	class:NVM::GemsInterface
GetCacheHits	SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetCacheHits( int \/*core*\/, int \/*level*\/ )$/;"	f	class:NullInterface
GetCacheMisses	SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetCacheMisses( int \/*core*\/, int \/*level*\/ )$/;"	f	class:NullInterface
GetInstructionCount	SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetInstructionCount( int \/*core*\/ )$/;"	f	class:NullInterface
HasCacheHits	SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasCacheHits( )$/;"	f	class:NullInterface
HasCacheMisses	SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasCacheMisses( )$/;"	f	class:NullInterface
HasInstructionCount	SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasInstructionCount( )$/;"	f	class:NullInterface
NullInterface	SimInterface/NullInterface/NullInterface.cpp	/^NullInterface::NullInterface( )$/;"	f	class:NullInterface
~NullInterface	SimInterface/NullInterface/NullInterface.cpp	/^NullInterface::~NullInterface( )$/;"	f	class:NullInterface
NVM	SimInterface/NullInterface/NullInterface.h	/^namespace NVM {$/;"	n
NullInterface	SimInterface/NullInterface/NullInterface.h	/^class NullInterface : public SimInterface$/;"	c	namespace:NVM
__NULLINTERFACE_H__	SimInterface/NullInterface/NullInterface.h	35;"	d
NVMainControl	Simulators/gem5/NVMainControl.cc	/^NVMainControl::NVMainControl(const Params *p)$/;"	f	class:NVMainControl
RequestComplete	Simulators/gem5/NVMainControl.cc	/^NVMainControl::RequestComplete(NVMainRequest *creq)$/;"	f	class:NVMainControl
areNSlotsAvailable	Simulators/gem5/NVMainControl.cc	/^NVMainControl::areNSlotsAvailable(int n)$/;"	f	class:NVMainControl
clearStats	Simulators/gem5/NVMainControl.cc	/^NVMainControl::clearStats() const$/;"	f	class:NVMainControl
create	Simulators/gem5/NVMainControl.cc	/^NVMMemoryControlParams::create()$/;"	f	class:NVMMemoryControlParams
dequeue	Simulators/gem5/NVMainControl.cc	/^NVMainControl::dequeue()$/;"	f	class:NVMainControl
drain	Simulators/gem5/NVMainControl.cc	/^NVMainControl::drain(DrainManager *)$/;"	f	class:NVMainControl
enqueue	Simulators/gem5/NVMainControl.cc	/^NVMainControl::enqueue(const MsgPtr& message, Cycles latency)$/;"	f	class:NVMainControl
enqueueMemRef	Simulators/gem5/NVMainControl.cc	/^NVMainControl::enqueueMemRef(MemoryNode *memRef)$/;"	f	class:NVMainControl
enqueueToDirectory	Simulators/gem5/NVMainControl.cc	/^NVMainControl::enqueueToDirectory(MemoryNode *req, Cycles latency)$/;"	f	class:NVMainControl
executeCycle	Simulators/gem5/NVMainControl.cc	/^NVMainControl::executeCycle()$/;"	f	class:NVMainControl
functionalReadBuffers	Simulators/gem5/NVMainControl.cc	/^NVMainControl::functionalReadBuffers(Packet *pkt)$/;"	f	class:NVMainControl
functionalWriteBuffers	Simulators/gem5/NVMainControl.cc	/^NVMainControl::functionalWriteBuffers(Packet *pkt)$/;"	f	class:NVMainControl
getBank	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getBank(const physical_address_t) const$/;"	f	class:NVMainControl
getBanksPerRank	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getBanksPerRank()$/;"	f	class:NVMainControl
getChannel	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getChannel(const physical_address_t) const$/;"	f	class:NVMainControl
getDimmsPerChannel	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getDimmsPerChannel()$/;"	f	class:NVMainControl
getRank	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getRank(const physical_address_t) const$/;"	f	class:NVMainControl
getRanksPerDimm	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getRanksPerDimm()$/;"	f	class:NVMainControl
getRow	Simulators/gem5/NVMainControl.cc	/^NVMainControl::getRow(const physical_address_t) const$/;"	f	class:NVMainControl
init	Simulators/gem5/NVMainControl.cc	/^NVMainControl::init()$/;"	f	class:NVMainControl
isReady	Simulators/gem5/NVMainControl.cc	/^NVMainControl::isReady()$/;"	f	class:NVMainControl
peek	Simulators/gem5/NVMainControl.cc	/^NVMainControl::peek()$/;"	f	class:NVMainControl
peekNode	Simulators/gem5/NVMainControl.cc	/^NVMainControl::peekNode()$/;"	f	class:NVMainControl
print	Simulators/gem5/NVMainControl.cc	/^NVMainControl::print(std::ostream& out) const$/;"	f	class:NVMainControl
printStats	Simulators/gem5/NVMainControl.cc	/^NVMainControl::printStats(std::ostream& out) const$/;"	f	class:NVMainControl
process	Simulators/gem5/NVMainControl.cc	/^void NVMainControl::NVMainStatPrinter::process( )$/;"	f	class:NVMainControl::NVMainStatPrinter
process	Simulators/gem5/NVMainControl.cc	/^void NVMainControl::NVMainStatReseter::process()$/;"	f	class:NVMainControl::NVMainStatReseter
reset	Simulators/gem5/NVMainControl.cc	/^NVMainControl::reset()$/;"	f	class:NVMainControl
serialize	Simulators/gem5/NVMainControl.cc	/^NVMainControl::serialize(std::ostream& )$/;"	f	class:NVMainControl
setConsumer	Simulators/gem5/NVMainControl.cc	/^NVMainControl::setConsumer(Consumer* consumer_ptr)$/;"	f	class:NVMainControl
unserialize	Simulators/gem5/NVMainControl.cc	/^NVMainControl::unserialize(Checkpoint * \/*cp*\/, const std::string & \/*section*\/)$/;"	f	class:NVMainControl
wakeup	Simulators/gem5/NVMainControl.cc	/^NVMainControl::wakeup()$/;"	f	class:NVMainControl
~NVMainControl	Simulators/gem5/NVMainControl.cc	/^NVMainControl::~NVMainControl()$/;"	f	class:NVMainControl
Cycle	Simulators/gem5/NVMainControl.hh	/^    void Cycle(NVM::ncycle_t) {}$/;"	f	class:NVMainControl
NVMainControl	Simulators/gem5/NVMainControl.hh	/^class NVMainControl : public MemoryControl, public NVM::NVMObject$/;"	c
NVMainStatPrinter	Simulators/gem5/NVMainControl.hh	/^    class NVMainStatPrinter : public Callback$/;"	c	class:NVMainControl
NVMainStatReseter	Simulators/gem5/NVMainControl.hh	/^    class NVMainStatReseter : public Callback$/;"	c	class:NVMainControl
Params	Simulators/gem5/NVMainControl.hh	/^    typedef NVMMemoryControlParams Params;$/;"	t	class:NVMainControl
__MEM_RUBY_SYSTEM_NVMAIN_CONTROL_HH__	Simulators/gem5/NVMainControl.hh	63;"	d
getConsumer	Simulators/gem5/NVMainControl.hh	/^    Consumer* getConsumer() { return m_consumer_ptr; };$/;"	f	class:NVMainControl
getDescription	Simulators/gem5/NVMainControl.hh	/^    std::string getDescription() { return m_description; };$/;"	f	class:NVMainControl
m_BusWidth	Simulators/gem5/NVMainControl.hh	/^    int m_BusWidth, m_tBURST, m_RATE;$/;"	m	class:NVMainControl
m_RATE	Simulators/gem5/NVMainControl.hh	/^    int m_BusWidth, m_tBURST, m_RATE;$/;"	m	class:NVMainControl
m_awakened	Simulators/gem5/NVMainControl.hh	/^    int m_awakened;$/;"	m	class:NVMainControl
m_banks	Simulators/gem5/NVMainControl.hh	/^    int m_banks, m_ranks, m_ranksPerDimm;$/;"	m	class:NVMainControl
m_consumer_ptr	Simulators/gem5/NVMainControl.hh	/^    Consumer* m_consumer_ptr;$/;"	m	class:NVMainControl
m_description	Simulators/gem5/NVMainControl.hh	/^    std::string m_description;$/;"	m	class:NVMainControl
m_input_queue	Simulators/gem5/NVMainControl.hh	/^    std::list<MemoryNode *> m_input_queue;$/;"	m	class:NVMainControl
m_msg_counter	Simulators/gem5/NVMainControl.hh	/^    int m_msg_counter;$/;"	m	class:NVMainControl
m_nvmainConfig	Simulators/gem5/NVMainControl.hh	/^    NVM::Config *m_nvmainConfig;$/;"	m	class:NVMainControl
m_nvmainConfigPath	Simulators/gem5/NVMainControl.hh	/^    std::string m_nvmainConfigPath;$/;"	m	class:NVMainControl
m_nvmainEventQueue	Simulators/gem5/NVMainControl.hh	/^    NVM::EventQueue *m_nvmainEventQueue;$/;"	m	class:NVMainControl
m_nvmainGlobalEventQueue	Simulators/gem5/NVMainControl.hh	/^    NVM::GlobalEventQueue *m_nvmainGlobalEventQueue;$/;"	m	class:NVMainControl
m_nvmainPtr	Simulators/gem5/NVMainControl.hh	/^    NVM::NVMain *m_nvmainPtr;$/;"	m	class:NVMainControl
m_nvmainSimInterface	Simulators/gem5/NVMainControl.hh	/^    NVM::SimInterface *m_nvmainSimInterface;$/;"	m	class:NVMainControl
m_ranks	Simulators/gem5/NVMainControl.hh	/^    int m_banks, m_ranks, m_ranksPerDimm;$/;"	m	class:NVMainControl
m_ranksPerDimm	Simulators/gem5/NVMainControl.hh	/^    int m_banks, m_ranks, m_ranksPerDimm;$/;"	m	class:NVMainControl
m_replaying	Simulators/gem5/NVMainControl.hh	/^    bool m_replaying;$/;"	m	class:NVMainControl
m_response_queue	Simulators/gem5/NVMainControl.hh	/^    std::list<MemoryNode *> m_response_queue;$/;"	m	class:NVMainControl
m_retryRefs	Simulators/gem5/NVMainControl.hh	/^    std::list<MemoryNode *> m_retryRefs;$/;"	m	class:NVMainControl
m_retryRequest	Simulators/gem5/NVMainControl.hh	/^    NVM::NVMainRequest *m_retryRequest;$/;"	m	class:NVMainControl
m_slot_available	Simulators/gem5/NVMainControl.hh	/^    bool m_slot_available;$/;"	m	class:NVMainControl
m_statsPtr	Simulators/gem5/NVMainControl.hh	/^    NVM::Stats *m_statsPtr;$/;"	m	class:NVMainControl
m_tBURST	Simulators/gem5/NVMainControl.hh	/^    int m_BusWidth, m_tBURST, m_RATE;$/;"	m	class:NVMainControl
m_tagGenerator	Simulators/gem5/NVMainControl.hh	/^    NVM::TagGenerator *m_tagGenerator;$/;"	m	class:NVMainControl
nvmainPtr	Simulators/gem5/NVMainControl.hh	/^        NVM::NVMain *nvmainPtr;$/;"	m	class:NVMainControl::NVMainStatPrinter
nvmainPtr	Simulators/gem5/NVMainControl.hh	/^        NVM::NVMain *nvmainPtr;$/;"	m	class:NVMainControl::NVMainStatReseter
setDescription	Simulators/gem5/NVMainControl.hh	/^    void setDescription(const std::string& name) { m_description = name; };$/;"	f	class:NVMainControl
statPrinter	Simulators/gem5/NVMainControl.hh	/^    NVMainStatPrinter statPrinter;$/;"	m	class:NVMainControl
statReseter	Simulators/gem5/NVMainControl.hh	/^    NVMainStatReseter statReseter;$/;"	m	class:NVMainControl
statStream	Simulators/gem5/NVMainControl.hh	/^        std::ofstream statStream;$/;"	m	class:NVMainControl::NVMainStatPrinter
NVMMemoryControl	Simulators/gem5/NVMainControl.py	/^class NVMMemoryControl(MemoryControl):$/;"	c
__init__	Simulators/gem5/NVMainControl.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:NVMMemoryControl
bank_bit_0	Simulators/gem5/NVMainControl.py	/^    bank_bit_0 = Param.Int(8, "");$/;"	v	class:NVMMemoryControl
bank_busy_time	Simulators/gem5/NVMainControl.py	/^    bank_busy_time = Param.Int(11, "");$/;"	v	class:NVMMemoryControl
bank_queue_size	Simulators/gem5/NVMainControl.py	/^    bank_queue_size = Param.Int(12, "");$/;"	v	class:NVMMemoryControl
banks_per_rank	Simulators/gem5/NVMainControl.py	/^    banks_per_rank = Param.Int(8, "");$/;"	v	class:NVMMemoryControl
basic_bus_busy_time	Simulators/gem5/NVMainControl.py	/^    basic_bus_busy_time = Param.Int(2, "");$/;"	v	class:NVMMemoryControl
config	Simulators/gem5/NVMainControl.py	/^    config = Param.String("NULL", "")$/;"	v	class:NVMMemoryControl
configparams	Simulators/gem5/NVMainControl.py	/^    configparams = Param.String("", "")$/;"	v	class:NVMMemoryControl
configvalues	Simulators/gem5/NVMainControl.py	/^    configvalues = Param.String("", "")$/;"	v	class:NVMMemoryControl
cxx_class	Simulators/gem5/NVMainControl.py	/^    cxx_class = 'NVMainControl'$/;"	v	class:NVMMemoryControl
cxx_header	Simulators/gem5/NVMainControl.py	/^    cxx_header = "Simulators\/gem5\/NVMainControl.hh"$/;"	v	class:NVMMemoryControl
dimm_bit_0	Simulators/gem5/NVMainControl.py	/^    dimm_bit_0 = Param.Int(12, "");$/;"	v	class:NVMMemoryControl
dimms_per_channel	Simulators/gem5/NVMainControl.py	/^    dimms_per_channel = Param.Int(2, "");$/;"	v	class:NVMMemoryControl
mem_ctl_latency	Simulators/gem5/NVMainControl.py	/^    mem_ctl_latency = Param.Cycles(12, "");$/;"	v	class:NVMMemoryControl
mem_fixed_delay	Simulators/gem5/NVMainControl.py	/^    mem_fixed_delay = Param.Cycles(0, "");$/;"	v	class:NVMMemoryControl
mem_random_arbitrate	Simulators/gem5/NVMainControl.py	/^    mem_random_arbitrate = Param.Int(0, "");$/;"	v	class:NVMMemoryControl
rank_bit_0	Simulators/gem5/NVMainControl.py	/^    rank_bit_0 = Param.Int(11, "");$/;"	v	class:NVMMemoryControl
rank_rank_delay	Simulators/gem5/NVMainControl.py	/^    rank_rank_delay = Param.Int(1, "");$/;"	v	class:NVMMemoryControl
ranks_per_dimm	Simulators/gem5/NVMainControl.py	/^    ranks_per_dimm = Param.Int(2, "");$/;"	v	class:NVMMemoryControl
read_write_delay	Simulators/gem5/NVMainControl.py	/^    read_write_delay = Param.Int(2, "");$/;"	v	class:NVMMemoryControl
refresh_period	Simulators/gem5/NVMainControl.py	/^    refresh_period = Param.Cycles(1560, "");$/;"	v	class:NVMMemoryControl
tFaw	Simulators/gem5/NVMainControl.py	/^    tFaw = Param.Int(0, "");$/;"	v	class:NVMMemoryControl
type	Simulators/gem5/NVMainControl.py	/^    type = 'NVMMemoryControl'$/;"	v	class:NVMMemoryControl
version	Simulators/gem5/NVMainControl.py	/^    version = Param.Int("")$/;"	v	class:NVMMemoryControl
NVMainMemory	Simulators/gem5/NVMainMemory.py	/^class NVMainMemory(AbstractMemory):$/;"	c
NVMainWarmUp	Simulators/gem5/NVMainMemory.py	/^    NVMainWarmUp = Param.Bool(False, "Enable to warm up the internal cache in NVMain")$/;"	v	class:NVMainMemory
__init__	Simulators/gem5/NVMainMemory.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:NVMainMemory
atomic_latency	Simulators/gem5/NVMainMemory.py	/^    atomic_latency = Param.Latency('30ns', "Request latency in atomic mode")$/;"	v	class:NVMainMemory
atomic_mode	Simulators/gem5/NVMainMemory.py	/^    atomic_mode = Param.Bool(False, "Enable to use NVMain in atomic mode rather than latency\/variance")$/;"	v	class:NVMainMemory
atomic_variance	Simulators/gem5/NVMainMemory.py	/^    atomic_variance = Param.Latency('30ns', "Request latency in atomic mode")$/;"	v	class:NVMainMemory
config	Simulators/gem5/NVMainMemory.py	/^    config = Param.String("", "")$/;"	v	class:NVMainMemory
configparams	Simulators/gem5/NVMainMemory.py	/^    configparams = Param.String("", "")$/;"	v	class:NVMainMemory
configvalues	Simulators/gem5/NVMainMemory.py	/^    configvalues = Param.String("", "")$/;"	v	class:NVMainMemory
cxx_header	Simulators/gem5/NVMainMemory.py	/^    cxx_header = 'Simulators\/gem5\/nvmain_mem.hh'$/;"	v	class:NVMainMemory
port	Simulators/gem5/NVMainMemory.py	/^    port = SlavePort("Slave ports")$/;"	v	class:NVMainMemory
type	Simulators/gem5/NVMainMemory.py	/^    type = 'NVMainMemory'$/;"	v	class:NVMainMemory
CheckDrainState	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::CheckDrainState( )$/;"	f	class:NVMainMemory
MemoryPort	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::MemoryPort::MemoryPort(const std::string& _name, NVMainMemory& _memory)$/;"	f	class:NVMainMemory::MemoryPort
NVMainMemory	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::NVMainMemory(const Params *p)$/;"	f	class:NVMainMemory
RequestComplete	Simulators/gem5/nvmain_mem.cc	/^bool NVMainMemory::RequestComplete(NVM::NVMainRequest *req)$/;"	f	class:NVMainMemory
ScheduleClockEvent	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::ScheduleClockEvent( Tick nextWake )$/;"	f	class:NVMainMemory
ScheduleResponse	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::ScheduleResponse( )$/;"	f	class:NVMainMemory
SendResponses	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::SendResponses( )$/;"	f	class:NVMainMemory
SetRequestData	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::SetRequestData(NVMainRequest *request, PacketPtr pkt)$/;"	f	class:NVMainMemory
create	Simulators/gem5/nvmain_mem.cc	/^NVMainMemoryParams::create()$/;"	f	class:NVMainMemoryParams
doAtomicAccess	Simulators/gem5/nvmain_mem.cc	/^Tick NVMainMemory::doAtomicAccess(PacketPtr pkt)$/;"	f	class:NVMainMemory
doFunctionalAccess	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::doFunctionalAccess(PacketPtr pkt)$/;"	f	class:NVMainMemory
drain	Simulators/gem5/nvmain_mem.cc	/^unsigned int NVMainMemory::drain(DrainManager *dm)$/;"	f	class:NVMainMemory
getAddrRanges	Simulators/gem5/nvmain_mem.cc	/^AddrRangeList NVMainMemory::MemoryPort::getAddrRanges() const$/;"	f	class:NVMainMemory::MemoryPort
getSlavePort	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::getSlavePort(const std::string& if_name, PortID idx)$/;"	f	class:NVMainMemory
init	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::init()$/;"	f	class:NVMainMemory
process	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::NVMainStatPrinter::process()$/;"	f	class:NVMainMemory::NVMainStatPrinter
process	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::NVMainStatReseter::process()$/;"	f	class:NVMainMemory::NVMainStatReseter
recvAtomic	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::MemoryPort::recvAtomic(PacketPtr pkt)$/;"	f	class:NVMainMemory::MemoryPort
recvFunctional	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::MemoryPort::recvFunctional(PacketPtr pkt)$/;"	f	class:NVMainMemory::MemoryPort
recvRetry	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::MemoryPort::recvRetry( )$/;"	f	class:NVMainMemory::MemoryPort
recvRetry	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::recvRetry( )$/;"	f	class:NVMainMemory
recvTimingReq	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::MemoryPort::recvTimingReq(PacketPtr pkt)$/;"	f	class:NVMainMemory::MemoryPort
serialize	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::serialize(std::ostream& os)$/;"	f	class:NVMainMemory
startup	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::startup()$/;"	f	class:NVMainMemory
tick	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::tick( )$/;"	f	class:NVMainMemory
unserialize	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::unserialize(Checkpoint *cp, const std::string& section)$/;"	f	class:NVMainMemory
wakeup	Simulators/gem5/nvmain_mem.cc	/^void NVMainMemory::wakeup()$/;"	f	class:NVMainMemory
~NVMainMemory	Simulators/gem5/nvmain_mem.cc	/^NVMainMemory::~NVMainMemory()$/;"	f	class:NVMainMemory
BusWidth	Simulators/gem5/nvmain_mem.hh	/^    uint64_t BusWidth;$/;"	m	class:NVMainMemory
Cycle	Simulators/gem5/nvmain_mem.hh	/^    void Cycle(NVM::ncycle_t) { }$/;"	f	class:NVMainMemory
MemoryPort	Simulators/gem5/nvmain_mem.hh	/^    class MemoryPort : public SlavePort$/;"	c	class:NVMainMemory
NVMainMemory	Simulators/gem5/nvmain_mem.hh	/^class NVMainMemory : public AbstractMemory, public NVM::NVMObject$/;"	c
NVMainMemoryRequest	Simulators/gem5/nvmain_mem.hh	/^    struct NVMainMemoryRequest$/;"	s	class:NVMainMemory
NVMainStatPrinter	Simulators/gem5/nvmain_mem.hh	/^    class NVMainStatPrinter : public Callback$/;"	c	class:NVMainMemory
NVMainStatReseter	Simulators/gem5/nvmain_mem.hh	/^    class NVMainStatReseter : public Callback$/;"	c	class:NVMainMemory
NVMainWarmUp	Simulators/gem5/nvmain_mem.hh	/^    bool NVMainWarmUp;$/;"	m	class:NVMainMemory
Params	Simulators/gem5/nvmain_mem.hh	/^    typedef NVMainMemoryParams Params;$/;"	t	class:NVMainMemory
RATE	Simulators/gem5/nvmain_mem.hh	/^    uint64_t RATE;$/;"	m	class:NVMainMemory
__MEM_NVMAIN_MEM_HH__	Simulators/gem5/nvmain_mem.hh	46;"	d
atomic	Simulators/gem5/nvmain_mem.hh	/^        bool atomic;$/;"	m	struct:NVMainMemory::NVMainMemoryRequest
clock	Simulators/gem5/nvmain_mem.hh	/^    Tick clock;$/;"	m	class:NVMainMemory
clockEvent	Simulators/gem5/nvmain_mem.hh	/^    EventWrapper<NVMainMemory, &NVMainMemory::tick> clockEvent;$/;"	m	class:NVMainMemory
drainManager	Simulators/gem5/nvmain_mem.hh	/^    DrainManager *drainManager;$/;"	m	class:NVMainMemory
forgdb	Simulators/gem5/nvmain_mem.hh	/^        NVMainMemory *forgdb;$/;"	m	class:NVMainMemory::NVMainStatPrinter
forgdb	Simulators/gem5/nvmain_mem.hh	/^        NVMainMemory& forgdb;$/;"	m	class:NVMainMemory::MemoryPort
issueTick	Simulators/gem5/nvmain_mem.hh	/^        Tick issueTick;$/;"	m	struct:NVMainMemory::NVMainMemoryRequest
lastWakeup	Simulators/gem5/nvmain_mem.hh	/^    Tick lastWakeup;$/;"	m	class:NVMainMemory
lat	Simulators/gem5/nvmain_mem.hh	/^    Tick lat;$/;"	m	class:NVMainMemory
lat_var	Simulators/gem5/nvmain_mem.hh	/^    Tick lat_var;$/;"	m	class:NVMainMemory
m_avgAtomicLatency	Simulators/gem5/nvmain_mem.hh	/^    float m_avgAtomicLatency;$/;"	m	class:NVMainMemory
m_awake	Simulators/gem5/nvmain_mem.hh	/^    bool m_awake;$/;"	m	class:NVMainMemory
m_eventDriven	Simulators/gem5/nvmain_mem.hh	/^    bool m_eventDriven;$/;"	m	class:NVMainMemory
m_nacked_requests	Simulators/gem5/nvmain_mem.hh	/^    bool m_nacked_requests;$/;"	m	class:NVMainMemory
m_numAtomicAccesses	Simulators/gem5/nvmain_mem.hh	/^    uint64_t m_numAtomicAccesses;$/;"	m	class:NVMainMemory
m_nvmainConfig	Simulators/gem5/nvmain_mem.hh	/^    NVM::Config *m_nvmainConfig;$/;"	m	class:NVMainMemory
m_nvmainConfigPath	Simulators/gem5/nvmain_mem.hh	/^    std::string m_nvmainConfigPath;$/;"	m	class:NVMainMemory
m_nvmainEventQueue	Simulators/gem5/nvmain_mem.hh	/^    NVM::EventQueue *m_nvmainEventQueue;$/;"	m	class:NVMainMemory
m_nvmainGlobalEventQueue	Simulators/gem5/nvmain_mem.hh	/^    NVM::GlobalEventQueue *m_nvmainGlobalEventQueue;$/;"	m	class:NVMainMemory
m_nvmainPtr	Simulators/gem5/nvmain_mem.hh	/^    NVM::NVMain *m_nvmainPtr;$/;"	m	class:NVMainMemory
m_nvmainSimInterface	Simulators/gem5/nvmain_mem.hh	/^    NVM::SimInterface *m_nvmainSimInterface;$/;"	m	class:NVMainMemory
m_request_map	Simulators/gem5/nvmain_mem.hh	/^    std::map<NVM::NVMainRequest *, NVMainMemoryRequest *> m_request_map;$/;"	m	class:NVMainMemory
m_requests_outstanding	Simulators/gem5/nvmain_mem.hh	/^    uint64_t m_requests_outstanding;$/;"	m	class:NVMainMemory
m_statsPtr	Simulators/gem5/nvmain_mem.hh	/^    NVM::Stats *m_statsPtr;$/;"	m	class:NVMainMemory
m_tagGenerator	Simulators/gem5/nvmain_mem.hh	/^    NVM::TagGenerator *m_tagGenerator;$/;"	m	class:NVMainMemory
masterInstance	Simulators/gem5/nvmain_mem.hh	/^    static NVMainMemory *masterInstance;$/;"	m	class:NVMainMemory
memory	Simulators/gem5/nvmain_mem.hh	/^        NVMainMemory *memory;$/;"	m	class:NVMainMemory::NVMainStatPrinter
memory	Simulators/gem5/nvmain_mem.hh	/^        NVMainMemory& memory;$/;"	m	class:NVMainMemory::MemoryPort
nextEventCycle	Simulators/gem5/nvmain_mem.hh	/^    NVM::ncycle_t nextEventCycle;$/;"	m	class:NVMainMemory
nvmainPtr	Simulators/gem5/nvmain_mem.hh	/^        NVM::NVMain *nvmainPtr;$/;"	m	class:NVMainMemory::NVMainStatPrinter
nvmainPtr	Simulators/gem5/nvmain_mem.hh	/^        NVM::NVMain *nvmainPtr;$/;"	m	class:NVMainMemory::NVMainStatReseter
nvmain_atomic	Simulators/gem5/nvmain_mem.hh	/^    bool nvmain_atomic;$/;"	m	class:NVMainMemory
packet	Simulators/gem5/nvmain_mem.hh	/^        PacketPtr packet;$/;"	m	struct:NVMainMemory::NVMainMemoryRequest
params	Simulators/gem5/nvmain_mem.hh	/^    params() const$/;"	f	class:NVMainMemory
pendingDelete	Simulators/gem5/nvmain_mem.hh	/^    std::vector<PacketPtr> pendingDelete;$/;"	m	class:NVMainMemory
port	Simulators/gem5/nvmain_mem.hh	/^    MemoryPort port;$/;"	m	class:NVMainMemory
request	Simulators/gem5/nvmain_mem.hh	/^        NVM::NVMainRequest *request;$/;"	m	struct:NVMainMemory::NVMainMemoryRequest
respondEvent	Simulators/gem5/nvmain_mem.hh	/^    EventWrapper<NVMainMemory, &NVMainMemory::SendResponses> respondEvent;$/;"	m	class:NVMainMemory
responseQueue	Simulators/gem5/nvmain_mem.hh	/^    std::deque<PacketPtr> responseQueue;$/;"	m	class:NVMainMemory
retryRead	Simulators/gem5/nvmain_mem.hh	/^    bool retryRead, retryWrite, retryResp;$/;"	m	class:NVMainMemory
retryResp	Simulators/gem5/nvmain_mem.hh	/^    bool retryRead, retryWrite, retryResp;$/;"	m	class:NVMainMemory
retryWrite	Simulators/gem5/nvmain_mem.hh	/^    bool retryRead, retryWrite, retryResp;$/;"	m	class:NVMainMemory
statPrinter	Simulators/gem5/nvmain_mem.hh	/^    NVMainStatPrinter statPrinter;$/;"	m	class:NVMainMemory
statReseter	Simulators/gem5/nvmain_mem.hh	/^    NVMainStatReseter statReseter;$/;"	m	class:NVMainMemory
statStream	Simulators/gem5/nvmain_mem.hh	/^        std::ofstream statStream;$/;"	m	class:NVMainMemory::NVMainStatPrinter
tBURST	Simulators/gem5/nvmain_mem.hh	/^    uint64_t tBURST;$/;"	m	class:NVMainMemory
checkcount	Tests/Regressions.py	/^            checkcount = checkcount + 1$/;"	v
checkcount	Tests/Regressions.py	/^        checkcount = 0$/;"	v
checkcounter	Tests/Regressions.py	/^                                checkcounter = checkcounter + 1$/;"	v
checkcounter	Tests/Regressions.py	/^                        checkcounter = checkcounter + 1$/;"	v
checkcounter	Tests/Regressions.py	/^        checkcounter = 0$/;"	v
checkstat	Tests/Regressions.py	/^                        checkstat = check.split(' ')[0]$/;"	v
checkvalue	Tests/Regressions.py	/^                        checkvalue = float(''.join(c for c in check.split(' ')[1] if fval.match(c)))$/;"	v
command	Tests/Regressions.py	/^        command = [nvmainexec, testdata["tests"][idx]["config"], trace, testdata["tests"][idx]["cycles"]]$/;"	v
expectedrc	Tests/Regressions.py	/^            expectedrc = testdata["tests"][idx]["returncode"]$/;"	v
faillog	Tests/Regressions.py	/^        faillog = testdata["tests"][idx]["name"] + ".out"$/;"	v
fuzz	Tests/Regressions.py	/^                            fuzz = max( (1.0 - (checkvalue \/ refvalue)) * 100.0, (1.0 - (refvalue \/ checkvalue)) * 100.0)$/;"	v
fval	Tests/Regressions.py	/^                        fval = re.compile("[0-9.]")$/;"	v
gem5exec	Tests/Regressions.py	/^gem5exec = gem5path + os.sep + "build" + os.sep + options.arch + os.sep + "gem5." + options.build$/;"	v
gem5path	Tests/Regressions.py	/^    gem5path = options.gem5_path$/;"	v
gem5path	Tests/Regressions.py	/^gem5path = os.environ['M5_PATH']$/;"	v
json_data	Tests/Regressions.py	/^json_data = open('Tests.json')$/;"	v
nvmainexec	Tests/Regressions.py	/^nvmainexec = ".." + os.sep + "nvmain." + options.build$/;"	v
parser	Tests/Regressions.py	/^parser = OptionParser()$/;"	v
passedchecks	Tests/Regressions.py	/^        passedchecks = []$/;"	v
refvalue	Tests/Regressions.py	/^                            refvalue = float(''.join(c for c in line.split(' ')[1] if fval.match(c)))$/;"	v
testdata	Tests/Regressions.py	/^testdata = json.load(json_data)$/;"	v
testgem5	Tests/Regressions.py	/^    testgem5 = False$/;"	v
testgem5	Tests/Regressions.py	/^testgem5 = True$/;"	v
testlog	Tests/Regressions.py	/^        testlog = open(options.tempfile, 'w')$/;"	v
AccessPredictor	Utils/AccessPredictor/AccessPredictor.cpp	/^AccessPredictor::AccessPredictor( )$/;"	f	class:AccessPredictor
Cycle	Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::Cycle( ncycle_t )$/;"	f	class:AccessPredictor
GetHitDestination	Utils/AccessPredictor/AccessPredictor.cpp	/^ncounter_t AccessPredictor::GetHitDestination( )$/;"	f	class:AccessPredictor
GetMissDestination	Utils/AccessPredictor/AccessPredictor.cpp	/^ncounter_t AccessPredictor::GetMissDestination( )$/;"	f	class:AccessPredictor
SetHitDestination	Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::SetHitDestination( ncounter_t childId )$/;"	f	class:AccessPredictor
SetMissDestination	Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::SetMissDestination( ncounter_t childId )$/;"	f	class:AccessPredictor
~AccessPredictor	Utils/AccessPredictor/AccessPredictor.cpp	/^AccessPredictor::~AccessPredictor( )$/;"	f	class:AccessPredictor
AccessPredictor	Utils/AccessPredictor/AccessPredictor.h	/^class AccessPredictor : public AddressTranslator, public NVMObject$/;"	c	namespace:NVM
NVM	Utils/AccessPredictor/AccessPredictor.h	/^namespace NVM {$/;"	n
__UTILS_ACCESSPREDICTOR_H__	Utils/AccessPredictor/AccessPredictor.h	35;"	d
hitChildId	Utils/AccessPredictor/AccessPredictor.h	/^    ncounter_t hitChildId, missChildId;$/;"	m	class:NVM::AccessPredictor
missChildId	Utils/AccessPredictor/AccessPredictor.h	/^    ncounter_t hitChildId, missChildId;$/;"	m	class:NVM::AccessPredictor
CreateAccessPredictor	Utils/AccessPredictor/AccessPredictorFactory.cpp	/^AccessPredictor *AccessPredictorFactory::CreateAccessPredictor( std::string name )$/;"	f	class:AccessPredictorFactory
AccessPredictorFactory	Utils/AccessPredictor/AccessPredictorFactory.h	/^    AccessPredictorFactory( ) { };$/;"	f	class:NVM::AccessPredictorFactory
AccessPredictorFactory	Utils/AccessPredictor/AccessPredictorFactory.h	/^class AccessPredictorFactory$/;"	c	namespace:NVM
NVM	Utils/AccessPredictor/AccessPredictorFactory.h	/^namespace NVM {$/;"	n
__UTILS_ACCESSPREDICTORFACTORY_H__	Utils/AccessPredictor/AccessPredictorFactory.h	35;"	d
~AccessPredictorFactory	Utils/AccessPredictor/AccessPredictorFactory.h	/^    ~AccessPredictorFactory( ) { };$/;"	f	class:NVM::AccessPredictorFactory
PerfectPredictor	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^PerfectPredictor::PerfectPredictor( )$/;"	f	class:PerfectPredictor
Translate	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^uint64_t PerfectPredictor::Translate( NVMainRequest *request )$/;"	f	class:PerfectPredictor
~PerfectPredictor	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^PerfectPredictor::~PerfectPredictor( )$/;"	f	class:PerfectPredictor
NVM	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.h	/^namespace NVM {$/;"	n
PerfectPredictor	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.h	/^class PerfectPredictor : public AccessPredictor$/;"	c	namespace:NVM
__UTILS_PERFECTPREDICTOR_H__	Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.h	35;"	d
SetConfig	Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^void VariablePredictor::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:VariablePredictor
Translate	Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^uint64_t VariablePredictor::Translate( NVMainRequest *request )$/;"	f	class:VariablePredictor
VariablePredictor	Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^VariablePredictor::VariablePredictor( )$/;"	f	class:VariablePredictor
~VariablePredictor	Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^VariablePredictor::~VariablePredictor( )$/;"	f	class:VariablePredictor
NVM	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^namespace NVM {$/;"	n
VariablePredictor	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^class VariablePredictor : public AccessPredictor$/;"	c	namespace:NVM
__UTILS_VARIABLEPREDICTOR_H__	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	35;"	d
accuracy	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^    double accuracy;$/;"	m	class:NVM::VariablePredictor
falsePredictions	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^    ncounter_t truePredictions, falsePredictions;$/;"	m	class:NVM::VariablePredictor
seed	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^    unsigned int seed;$/;"	m	class:NVM::VariablePredictor
truePredictions	Utils/AccessPredictor/VariablePredictor/VariablePredictor.h	/^    ncounter_t truePredictions, falsePredictions;$/;"	m	class:NVM::VariablePredictor
CacheBank	Utils/Caches/CacheBank.cpp	/^CacheBank::CacheBank( uint64_t sets, uint64_t assoc, uint64_t lineSize )$/;"	f	class:CacheBank
ChooseVictim	Utils/Caches/CacheBank.cpp	/^bool CacheBank::ChooseVictim( NVMAddress& addr, NVMAddress *victim )$/;"	f	class:CacheBank
Cycle	Utils/Caches/CacheBank.cpp	/^void CacheBank::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:CacheBank
DefaultDecoder	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::DefaultDecoder( NVMAddress &addr )$/;"	f	class:CacheBank
Evict	Utils/Caches/CacheBank.cpp	/^bool CacheBank::Evict( NVMAddress& addr, NVMDataBlock *data )$/;"	f	class:CacheBank
FindSet	Utils/Caches/CacheBank.cpp	/^CacheEntry *CacheBank::FindSet( NVMAddress& addr )$/;"	f	class:CacheBank
GetAssociativity	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetAssociativity( )$/;"	f	class:CacheBank
GetCacheOccupancy	Utils/Caches/CacheBank.cpp	/^double CacheBank::GetCacheOccupancy( )$/;"	f	class:CacheBank
GetCachelineSize	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetCachelineSize( )$/;"	f	class:CacheBank
GetReadTime	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetReadTime( )$/;"	f	class:CacheBank
GetSetCount	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetSetCount( )$/;"	f	class:CacheBank
GetWriteTime	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetWriteTime( )$/;"	f	class:CacheBank
Install	Utils/Caches/CacheBank.cpp	/^bool CacheBank::Install( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
IsIssuable	Utils/Caches/CacheBank.cpp	/^bool CacheBank::IsIssuable( NVMainRequest * \/*req*\/, FailReason * \/*reason*\/ )$/;"	f	class:CacheBank
IssueCommand	Utils/Caches/CacheBank.cpp	/^bool CacheBank::IssueCommand( NVMainRequest *nreq )$/;"	f	class:CacheBank
Present	Utils/Caches/CacheBank.cpp	/^bool CacheBank::Present( NVMAddress& addr )$/;"	f	class:CacheBank
Read	Utils/Caches/CacheBank.cpp	/^bool CacheBank::Read( NVMAddress& addr, NVMDataBlock *data )$/;"	f	class:CacheBank
RequestComplete	Utils/Caches/CacheBank.cpp	/^bool CacheBank::RequestComplete( NVMainRequest *req )$/;"	f	class:CacheBank
SetDecodeFunction	Utils/Caches/CacheBank.cpp	/^void CacheBank::SetDecodeFunction( NVMObject *dcClass, CacheSetDecoder dcFunc )$/;"	f	class:CacheBank
SetFull	Utils/Caches/CacheBank.cpp	/^bool CacheBank::SetFull( NVMAddress& addr )$/;"	f	class:CacheBank
SetID	Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::SetID( NVMAddress& addr )$/;"	f	class:CacheBank
SetReadTime	Utils/Caches/CacheBank.cpp	/^void CacheBank::SetReadTime( uint64_t rtime )$/;"	f	class:CacheBank
SetWriteTime	Utils/Caches/CacheBank.cpp	/^void CacheBank::SetWriteTime( uint64_t wtime )$/;"	f	class:CacheBank
UpdateData	Utils/Caches/CacheBank.cpp	/^bool CacheBank::UpdateData( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
Write	Utils/Caches/CacheBank.cpp	/^bool CacheBank::Write( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
~CacheBank	Utils/Caches/CacheBank.cpp	/^CacheBank::~CacheBank( )$/;"	f	class:CacheBank
CACHE_BUSY	Utils/Caches/CacheBank.h	/^enum CacheState { CACHE_IDLE, CACHE_BUSY };$/;"	e	enum:NVM::CacheState
CACHE_ENTRY_DIRTY	Utils/Caches/CacheBank.h	/^       CACHE_ENTRY_DIRTY = 2,$/;"	e	enum:NVM::__anon1
CACHE_ENTRY_EXAMPLE	Utils/Caches/CacheBank.h	/^       CACHE_ENTRY_EXAMPLE = 4$/;"	e	enum:NVM::__anon1
CACHE_ENTRY_NONE	Utils/Caches/CacheBank.h	/^enum { CACHE_ENTRY_NONE = 0,$/;"	e	enum:NVM::__anon1
CACHE_ENTRY_VALID	Utils/Caches/CacheBank.h	/^       CACHE_ENTRY_VALID = 1,$/;"	e	enum:NVM::__anon1
CACHE_EVICT	Utils/Caches/CacheBank.h	/^                      CACHE_SCRUB, CACHE_EVICT };$/;"	e	enum:NVM::CacheOperation
CACHE_IDLE	Utils/Caches/CacheBank.h	/^enum CacheState { CACHE_IDLE, CACHE_BUSY };$/;"	e	enum:NVM::CacheState
CACHE_NONE	Utils/Caches/CacheBank.h	/^enum CacheOperation { CACHE_NONE, CACHE_READ, CACHE_WRITE, $/;"	e	enum:NVM::CacheOperation
CACHE_READ	Utils/Caches/CacheBank.h	/^enum CacheOperation { CACHE_NONE, CACHE_READ, CACHE_WRITE, $/;"	e	enum:NVM::CacheOperation
CACHE_SCRUB	Utils/Caches/CacheBank.h	/^                      CACHE_SCRUB, CACHE_EVICT };$/;"	e	enum:NVM::CacheOperation
CACHE_WRITE	Utils/Caches/CacheBank.h	/^enum CacheOperation { CACHE_NONE, CACHE_READ, CACHE_WRITE, $/;"	e	enum:NVM::CacheOperation
CacheBank	Utils/Caches/CacheBank.h	/^class CacheBank : public NVMObject$/;"	c	namespace:NVM
CacheEntry	Utils/Caches/CacheBank.h	/^struct CacheEntry$/;"	s	namespace:NVM
CacheOperation	Utils/Caches/CacheBank.h	/^enum CacheOperation { CACHE_NONE, CACHE_READ, CACHE_WRITE, $/;"	g	namespace:NVM
CacheRequest	Utils/Caches/CacheBank.h	/^struct CacheRequest$/;"	s	namespace:NVM
CacheSetDecoder	Utils/Caches/CacheBank.h	/^typedef uint64_t (NVMObject::*CacheSetDecoder)(NVMAddress&);$/;"	t	namespace:NVM
CacheState	Utils/Caches/CacheBank.h	/^enum CacheState { CACHE_IDLE, CACHE_BUSY };$/;"	g	namespace:NVM
NVM	Utils/Caches/CacheBank.h	/^namespace NVM {$/;"	n
__NVMAIN_UTILS_CACHES_CACHEBANK_H__	Utils/Caches/CacheBank.h	35;"	d
accessTime	Utils/Caches/CacheBank.h	/^    uint64_t accessTime, stateTimer;$/;"	m	class:NVM::CacheBank
address	Utils/Caches/CacheBank.h	/^    NVMAddress address;$/;"	m	struct:NVM::CacheEntry
address	Utils/Caches/CacheBank.h	/^    NVMAddress address;$/;"	m	struct:NVM::CacheRequest
cacheEntry	Utils/Caches/CacheBank.h	/^    CacheEntry **cacheEntry;$/;"	m	class:NVM::CacheBank
cachelineSize	Utils/Caches/CacheBank.h	/^    uint64_t numSets, numAssoc, cachelineSize;$/;"	m	class:NVM::CacheBank
data	Utils/Caches/CacheBank.h	/^    NVMDataBlock data;$/;"	m	struct:NVM::CacheEntry
data	Utils/Caches/CacheBank.h	/^    NVMDataBlock data;$/;"	m	struct:NVM::CacheRequest
decodeClass	Utils/Caches/CacheBank.h	/^    NVMObject *decodeClass;$/;"	m	class:NVM::CacheBank
decodeFunc	Utils/Caches/CacheBank.h	/^    CacheSetDecoder decodeFunc;$/;"	m	class:NVM::CacheBank
endAddr	Utils/Caches/CacheBank.h	/^    NVMAddress endAddr;$/;"	m	struct:NVM::CacheRequest
flags	Utils/Caches/CacheBank.h	/^    uint64_t flags;$/;"	m	struct:NVM::CacheEntry
hit	Utils/Caches/CacheBank.h	/^    bool hit;$/;"	m	struct:NVM::CacheRequest
isMissMap	Utils/Caches/CacheBank.h	/^    bool isMissMap;$/;"	m	class:NVM::CacheBank
numAssoc	Utils/Caches/CacheBank.h	/^    uint64_t numSets, numAssoc, cachelineSize;$/;"	m	class:NVM::CacheBank
numSets	Utils/Caches/CacheBank.h	/^    uint64_t numSets, numAssoc, cachelineSize;$/;"	m	class:NVM::CacheBank
optype	Utils/Caches/CacheBank.h	/^    CacheOperation optype;$/;"	m	struct:NVM::CacheRequest
originalRequest	Utils/Caches/CacheBank.h	/^    NVMainRequest *originalRequest;$/;"	m	struct:NVM::CacheRequest
owner	Utils/Caches/CacheBank.h	/^    NVMObject *owner;$/;"	m	struct:NVM::CacheRequest
readTime	Utils/Caches/CacheBank.h	/^    uint64_t readTime, writeTime;$/;"	m	class:NVM::CacheBank
state	Utils/Caches/CacheBank.h	/^    CacheState state;$/;"	m	class:NVM::CacheBank
stateTimer	Utils/Caches/CacheBank.h	/^    uint64_t accessTime, stateTimer;$/;"	m	class:NVM::CacheBank
writeTime	Utils/Caches/CacheBank.h	/^    uint64_t readTime, writeTime;$/;"	m	class:NVM::CacheBank
CheckIssuable	Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::CheckIssuable( NVMAddress address, OpType type )$/;"	f	class:CoinMigrator
ChooseVictim	Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::ChooseVictim( Migrator *at, NVMAddress& \/*promotee*\/, NVMAddress& victim )$/;"	f	class:CoinMigrator
CoinMigrator	Utils/CoinMigrator/CoinMigrator.cpp	/^CoinMigrator::CoinMigrator( )$/;"	f	class:CoinMigrator
Cycle	Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:CoinMigrator
Init	Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::Init( Config *config )$/;"	f	class:CoinMigrator
IssueAtomic	Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::IssueAtomic( NVMainRequest *request )$/;"	f	class:CoinMigrator
IssueCommand	Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::IssueCommand( NVMainRequest *request )$/;"	f	class:CoinMigrator
RequestComplete	Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::RequestComplete( NVMainRequest *request )$/;"	f	class:CoinMigrator
TryMigration	Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::TryMigration( NVMainRequest *request, bool atomic )$/;"	f	class:CoinMigrator
~CoinMigrator	Utils/CoinMigrator/CoinMigrator.cpp	/^CoinMigrator::~CoinMigrator( )$/;"	f	class:CoinMigrator
CoinMigrator	Utils/CoinMigrator/CoinMigrator.h	/^class CoinMigrator : public NVMObject$/;"	c	namespace:NVM
MIG_READ_TAG	Utils/CoinMigrator/CoinMigrator.h	43;"	d
MIG_WRITE_TAG	Utils/CoinMigrator/CoinMigrator.h	44;"	d
NVM	Utils/CoinMigrator/CoinMigrator.h	/^namespace NVM {$/;"	n
__NVMAIN_UTILS_COINMIGRATOR_H__	Utils/CoinMigrator/CoinMigrator.h	35;"	d
bufferReadLatency	Utils/CoinMigrator/CoinMigrator.h	/^    ncycle_t bufferReadLatency;$/;"	m	class:NVM::CoinMigrator
bufferedReads	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t bufferedReads;$/;"	m	class:NVM::CoinMigrator
currentPromotionPage	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t currentPromotionPage;$/;"	m	class:NVM::CoinMigrator
demoBuffered	Utils/CoinMigrator/CoinMigrator.h	/^    bool promoBuffered, demoBuffered; $/;"	m	class:NVM::CoinMigrator
demoRequest	Utils/CoinMigrator/CoinMigrator.h	/^    NVMainRequest *demoRequest;$/;"	m	class:NVM::CoinMigrator
demotee	Utils/CoinMigrator/CoinMigrator.h	/^    NVMAddress demotee, promotee; $/;"	m	class:NVM::CoinMigrator
migrationCount	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t migrationCount;$/;"	m	class:NVM::CoinMigrator
numCols	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t numCols;$/;"	m	class:NVM::CoinMigrator
probability	Utils/CoinMigrator/CoinMigrator.h	/^    double probability;$/;"	m	class:NVM::CoinMigrator
promoBuffered	Utils/CoinMigrator/CoinMigrator.h	/^    bool promoBuffered, demoBuffered; $/;"	m	class:NVM::CoinMigrator
promoRequest	Utils/CoinMigrator/CoinMigrator.h	/^    NVMainRequest *promoRequest;$/;"	m	class:NVM::CoinMigrator
promotee	Utils/CoinMigrator/CoinMigrator.h	/^    NVMAddress demotee, promotee; $/;"	m	class:NVM::CoinMigrator
promotionChannel	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t promotionChannel;$/;"	m	class:NVM::CoinMigrator
promotionChannelParams	Utils/CoinMigrator/CoinMigrator.h	/^    Params *promotionChannelParams;$/;"	m	class:NVM::CoinMigrator
queriedMemory	Utils/CoinMigrator/CoinMigrator.h	/^    bool queriedMemory;$/;"	m	class:NVM::CoinMigrator
queueWaits	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t queueWaits;$/;"	m	class:NVM::CoinMigrator
seed	Utils/CoinMigrator/CoinMigrator.h	/^    unsigned int seed;$/;"	m	class:NVM::CoinMigrator
totalPromotionPages	Utils/CoinMigrator/CoinMigrator.h	/^    ncounter_t totalPromotionPages;$/;"	m	class:NVM::CoinMigrator
CreateHook	Utils/HookFactory.cpp	/^NVMObject *HookFactory::CreateHook( std::string hookName )$/;"	f	class:HookFactory
HookFactory	Utils/HookFactory.h	/^    HookFactory( ) { }$/;"	f	class:NVM::HookFactory
HookFactory	Utils/HookFactory.h	/^class HookFactory$/;"	c	namespace:NVM
NVM	Utils/HookFactory.h	/^namespace NVM {$/;"	n
__NVMAIN_UTILS_HOOKFACTORY_H__	Utils/HookFactory.h	35;"	d
~HookFactory	Utils/HookFactory.h	/^    ~HookFactory( ) { }$/;"	f	class:NVM::HookFactory
Cycle	Utils/PostTrace/PostTrace.cpp	/^void PostTrace::Cycle( ncycle_t )$/;"	f	class:PostTrace
Init	Utils/PostTrace/PostTrace.cpp	/^void PostTrace::Init( Config *conf )$/;"	f	class:PostTrace
IssueAtomic	Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::IssueAtomic( NVMainRequest *request )$/;"	f	class:PostTrace
IssueCommand	Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::IssueCommand( NVMainRequest *request )$/;"	f	class:PostTrace
PostTrace	Utils/PostTrace/PostTrace.cpp	/^PostTrace::PostTrace( )$/;"	f	class:PostTrace
RequestComplete	Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::RequestComplete( NVMainRequest * \/*request*\/ )$/;"	f	class:PostTrace
~PostTrace	Utils/PostTrace/PostTrace.cpp	/^PostTrace::~PostTrace( )$/;"	f	class:PostTrace
NVM	Utils/PostTrace/PostTrace.h	/^namespace NVM {$/;"	n
PostTrace	Utils/PostTrace/PostTrace.h	/^class PostTrace : public NVMObject$/;"	c	namespace:NVM
__NVMAIN_UTILS_POSTTRACE_H__	Utils/PostTrace/PostTrace.h	35;"	d
numBanks	Utils/PostTrace/PostTrace.h	/^    ncounter_t numRanks, numBanks, numChannels;$/;"	m	class:NVM::PostTrace
numChannels	Utils/PostTrace/PostTrace.h	/^    ncounter_t numRanks, numBanks, numChannels;$/;"	m	class:NVM::PostTrace
numRanks	Utils/PostTrace/PostTrace.h	/^    ncounter_t numRanks, numBanks, numChannels;$/;"	m	class:NVM::PostTrace
traceChannels	Utils/PostTrace/PostTrace.h	/^    ncounter_t traceRanks, traceChannels;$/;"	m	class:NVM::PostTrace
traceRanks	Utils/PostTrace/PostTrace.h	/^    ncounter_t traceRanks, traceChannels;$/;"	m	class:NVM::PostTrace
traceWriter	Utils/PostTrace/PostTrace.h	/^    GenericTraceWriter ***traceWriter;$/;"	m	class:NVM::PostTrace
Callback	Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Callback( void *data )$/;"	f	class:RequestTracer
Cycle	Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Cycle( ncycle_t )$/;"	f	class:RequestTracer
Demangle	Utils/RequestTracer/RequestTracer.cpp	/^std::string RequestTracer::Demangle( const char* cxxname )$/;"	f	class:RequestTracer
Init	Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Init( Config *conf )$/;"	f	class:RequestTracer
IssueAtomic	Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::IssueAtomic( NVMainRequest * \/*req*\/ )$/;"	f	class:RequestTracer
IssueCommand	Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::IssueCommand( NVMainRequest *req )$/;"	f	class:RequestTracer
RequestComplete	Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::RequestComplete( NVMainRequest *req )$/;"	f	class:RequestTracer
RequestTracer	Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::RequestTracer( )$/;"	f	class:RequestTracer
TraceAddress	Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::TraceAddress( NVMainRequest *req, TracedType traceType )$/;"	f	class:RequestTracer
TracedRequest	Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::TracedRequest::TracedRequest( )$/;"	f	class:RequestTracer::TracedRequest
~RequestTracer	Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::~RequestTracer( )$/;"	f	class:RequestTracer
~TracedRequest	Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::TracedRequest::~TracedRequest( )$/;"	f	class:RequestTracer::TracedRequest
NVM	Utils/RequestTracer/RequestTracer.h	/^namespace NVM {$/;"	n
RequestTracer	Utils/RequestTracer/RequestTracer.h	/^class RequestTracer : public NVMObject$/;"	c	namespace:NVM
TracedCompletion	Utils/RequestTracer/RequestTracer.h	/^typedef enum  { TracedIssue, TracedCompletion } TracedType;$/;"	e	enum:NVM::__anon2
TracedIssue	Utils/RequestTracer/RequestTracer.h	/^typedef enum  { TracedIssue, TracedCompletion } TracedType;$/;"	e	enum:NVM::__anon2
TracedRequest	Utils/RequestTracer/RequestTracer.h	/^    class TracedRequest$/;"	c	class:NVM::RequestTracer
TracedType	Utils/RequestTracer/RequestTracer.h	/^typedef enum  { TracedIssue, TracedCompletion } TracedType;$/;"	t	namespace:NVM	typeref:enum:NVM::__anon2
__NVMAIN_UTILS_REQUESTTRACER_H__	Utils/RequestTracer/RequestTracer.h	35;"	d
deadlockEvent	Utils/RequestTracer/RequestTracer.h	/^        Event *deadlockEvent;$/;"	m	class:NVM::RequestTracer::TracedRequest
deadlockThreshold	Utils/RequestTracer/RequestTracer.h	/^    ncycle_t deadlockThreshold;$/;"	m	class:NVM::RequestTracer
deadlockTimer	Utils/RequestTracer/RequestTracer.h	/^        ncycle_t deadlockTimer;$/;"	m	class:NVM::RequestTracer::TracedRequest
detectDeadlocks	Utils/RequestTracer/RequestTracer.h	/^    bool detectDeadlocks;$/;"	m	class:NVM::RequestTracer
moduleName	Utils/RequestTracer/RequestTracer.h	/^        std::string moduleName;$/;"	m	class:NVM::RequestTracer::TracedRequest
next	Utils/RequestTracer/RequestTracer.h	/^        TracedRequest *next;$/;"	m	class:NVM::RequestTracer::TracedRequest
printTrace	Utils/RequestTracer/RequestTracer.h	/^    bool printTrace;$/;"	m	class:NVM::RequestTracer
selfHook	Utils/RequestTracer/RequestTracer.h	/^    NVMObject_hook *selfHook;$/;"	m	class:NVM::RequestTracer
tracedRequests	Utils/RequestTracer/RequestTracer.h	/^    std::map<uint64_t, TracedRequest*> tracedRequests;$/;"	m	class:NVM::RequestTracer
type	Utils/RequestTracer/RequestTracer.h	/^        TracedType type;$/;"	m	class:NVM::RequestTracer::TracedRequest
Cycle	Utils/Visualizer/Visualizer.cpp	/^void Visualizer::Cycle( ncycle_t )$/;"	f	class:Visualizer
Init	Utils/Visualizer/Visualizer.cpp	/^void Visualizer::Init( Config *conf )$/;"	f	class:Visualizer
IssueAtomic	Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::IssueAtomic( NVMainRequest *req )$/;"	f	class:Visualizer
IssueCommand	Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::IssueCommand( NVMainRequest *req )$/;"	f	class:Visualizer
RequestComplete	Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::RequestComplete( NVMainRequest *req )$/;"	f	class:Visualizer
Visualizer	Utils/Visualizer/Visualizer.cpp	/^Visualizer::Visualizer( )$/;"	f	class:Visualizer
~Visualizer	Utils/Visualizer/Visualizer.cpp	/^Visualizer::~Visualizer( )$/;"	f	class:Visualizer
NVM	Utils/Visualizer/Visualizer.h	/^namespace NVM {$/;"	n
Visualizer	Utils/Visualizer/Visualizer.h	/^class Visualizer : public NVMObject$/;"	c	namespace:NVM
__NVMAIN_UTILS_VISUALIZER_H__	Utils/Visualizer/Visualizer.h	35;"	d
busBurstLength	Utils/Visualizer/Visualizer.h	/^    ncycle_t busBurstLength;$/;"	m	class:NVM::Visualizer
endCycle	Utils/Visualizer/Visualizer.h	/^    ncycle_t startCycle, endCycle, endCycle2;$/;"	m	class:NVM::Visualizer
endCycle2	Utils/Visualizer/Visualizer.h	/^    ncycle_t startCycle, endCycle, endCycle2;$/;"	m	class:NVM::Visualizer
graphLines	Utils/Visualizer/Visualizer.h	/^    std::vector<std::string> graphLines;$/;"	m	class:NVM::Visualizer
graphSymbol	Utils/Visualizer/Visualizer.h	/^    std::vector<char> graphSymbol;$/;"	m	class:NVM::Visualizer
lineLength	Utils/Visualizer/Visualizer.h	/^    ncounter_t lineLength;$/;"	m	class:NVM::Visualizer
numBanks	Utils/Visualizer/Visualizer.h	/^    ncounter_t numRanks, numBanks;$/;"	m	class:NVM::Visualizer
numRanks	Utils/Visualizer/Visualizer.h	/^    ncounter_t numRanks, numBanks;$/;"	m	class:NVM::Visualizer
startCycle	Utils/Visualizer/Visualizer.h	/^    ncycle_t startCycle, endCycle, endCycle2;$/;"	m	class:NVM::Visualizer
CreateBank	build/Banks/BankFactory.cpp	/^Bank *BankFactory::CreateBank( std::string bankName )$/;"	f	class:BankFactory
CreateBankNoWarn	build/Banks/BankFactory.cpp	/^Bank *BankFactory::CreateBankNoWarn( std::string bankName )$/;"	f	class:BankFactory
CreateNewBank	build/Banks/BankFactory.cpp	/^Bank *BankFactory::CreateNewBank( std::string bankName )$/;"	f	class:BankFactory
Activate	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Activate( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
CachedDDR3Bank	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^CachedDDR3Bank::CachedDDR3Bank( )$/;"	f	class:CachedDDR3Bank
CalculateStats	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::CalculateStats( )$/;"	f	class:CachedDDR3Bank
IsIssuable	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::IsIssuable( NVMainRequest *request, FailReason *reason )$/;"	f	class:CachedDDR3Bank
Read	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Read( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
RegisterStats	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::RegisterStats( )$/;"	f	class:CachedDDR3Bank
SetConfig	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^void CachedDDR3Bank::SetConfig( Config *config, bool createChildren )$/;"	f	class:CachedDDR3Bank
Write	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^bool CachedDDR3Bank::Write( NVMainRequest *request )$/;"	f	class:CachedDDR3Bank
~CachedDDR3Bank	build/Banks/CachedDDR3Bank/CachedDDR3Bank.cpp	/^CachedDDR3Bank::~CachedDDR3Bank( )$/;"	f	class:CachedDDR3Bank
Activate	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Activate( NVMainRequest *request )$/;"	f	class:DDR3Bank
CalculatePower	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::CalculatePower( )$/;"	f	class:DDR3Bank
CalculateStats	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::CalculateStats( )$/;"	f	class:DDR3Bank
Cycle	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::Cycle( ncycle_t steps )$/;"	f	class:DDR3Bank
DDR3Bank	build/Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3Bank::DDR3Bank( )$/;"	f	class:DDR3Bank
GetId	build/Banks/DDR3Bank/DDR3Bank.cpp	/^ncounter_t DDR3Bank::GetId( )$/;"	f	class:DDR3Bank
GetName	build/Banks/DDR3Bank/DDR3Bank.cpp	/^std::string DDR3Bank::GetName( )$/;"	f	class:DDR3Bank
GetPower	build/Banks/DDR3Bank/DDR3Bank.cpp	/^double DDR3Bank::GetPower( )$/;"	f	class:DDR3Bank
GetState	build/Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3BankState DDR3Bank::GetState( ) $/;"	f	class:DDR3Bank
Idle	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Idle( )$/;"	f	class:DDR3Bank
IsIssuable	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:DDR3Bank
IssueCommand	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::IssueCommand( NVMainRequest *req )$/;"	f	class:DDR3Bank
NextIssuable	build/Banks/DDR3Bank/DDR3Bank.cpp	/^ncycle_t DDR3Bank::NextIssuable( NVMainRequest *request )$/;"	f	class:DDR3Bank
PowerDown	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::PowerDown( NVMainRequest *request )$/;"	f	class:DDR3Bank
PowerUp	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::PowerUp( NVMainRequest * \/*request*\/ )$/;"	f	class:DDR3Bank
Precharge	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Precharge( NVMainRequest *request )$/;"	f	class:DDR3Bank
Read	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Read( NVMainRequest *request )$/;"	f	class:DDR3Bank
Refresh	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Refresh( NVMainRequest *request )$/;"	f	class:DDR3Bank
RegisterStats	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::RegisterStats( )$/;"	f	class:DDR3Bank
SetConfig	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetConfig( Config *config, bool createChildren )$/;"	f	class:DDR3Bank
SetId	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetId( ncounter_t id )$/;"	f	class:DDR3Bank
SetName	build/Banks/DDR3Bank/DDR3Bank.cpp	/^void DDR3Bank::SetName( std::string )$/;"	f	class:DDR3Bank
Write	build/Banks/DDR3Bank/DDR3Bank.cpp	/^bool DDR3Bank::Write( NVMainRequest *request )$/;"	f	class:DDR3Bank
~DDR3Bank	build/Banks/DDR3Bank/DDR3Bank.cpp	/^DDR3Bank::~DDR3Bank( )$/;"	f	class:DDR3Bank
CreateDataEncoder	build/DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateDataEncoder( std::string encoderName )$/;"	f	class:DataEncoderFactory
CreateDataEncoderNoWarn	build/DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateDataEncoderNoWarn( std::string encoderName )$/;"	f	class:DataEncoderFactory
CreateNewDataEncoder	build/DataEncoders/DataEncoderFactory.cpp	/^DataEncoder *DataEncoderFactory::CreateNewDataEncoder( std::string encoderName )$/;"	f	class:DataEncoderFactory
CalculateStats	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::CalculateStats( )$/;"	f	class:FlipNWrite
FlipNWrite	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^FlipNWrite::FlipNWrite( )$/;"	f	class:FlipNWrite
InvertData	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::InvertData( NVMDataBlock& data, uint64_t startBit, uint64_t endBit )$/;"	f	class:FlipNWrite
Read	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^ncycle_t FlipNWrite::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:FlipNWrite
RegisterStats	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::RegisterStats( )$/;"	f	class:FlipNWrite
SetConfig	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^void FlipNWrite::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:FlipNWrite
Write	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^ncycle_t FlipNWrite::Write( NVMainRequest *request ) $/;"	f	class:FlipNWrite
~FlipNWrite	build/DataEncoders/FlipNWrite/FlipNWrite.cpp	/^FlipNWrite::~FlipNWrite( )$/;"	f	class:FlipNWrite
DRCDecoder	build/Decoders/DRCDecoder/DRCDecoder.cpp	/^DRCDecoder::DRCDecoder( )$/;"	f	class:DRCDecoder
ReverseTranslate	build/Decoders/DRCDecoder/DRCDecoder.cpp	/^uint64_t DRCDecoder::ReverseTranslate( const uint64_t& row, $/;"	f	class:DRCDecoder
SetCachelineSize	build/Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::SetCachelineSize( uint64_t lineSize )$/;"	f	class:DRCDecoder
SetIgnoreBits	build/Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::SetIgnoreBits( uint64_t numIgnore )$/;"	f	class:DRCDecoder
Translate	build/Decoders/DRCDecoder/DRCDecoder.cpp	/^void DRCDecoder::Translate( uint64_t address, uint64_t *row, uint64_t *col, $/;"	f	class:DRCDecoder
CreateDecoder	build/Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateDecoder( std::string decoder )$/;"	f	class:DecoderFactory
CreateDecoderNoWarn	build/Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateDecoderNoWarn( std::string decoder )$/;"	f	class:DecoderFactory
CreateNewDecoder	build/Decoders/DecoderFactory.cpp	/^AddressTranslator *DecoderFactory::CreateNewDecoder( std::string decoder )$/;"	f	class:DecoderFactory
CreateCheckpoint	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::CreateCheckpoint( std::string dir )$/;"	f	class:Migrator
GetAddressKey	build/Decoders/Migrator/Migrator.cpp	/^uint64_t Migrator::GetAddressKey( NVMAddress& address )$/;"	f	class:Migrator
IsBuffered	build/Decoders/Migrator/Migrator.cpp	/^bool Migrator::IsBuffered( NVMAddress& address )$/;"	f	class:Migrator
IsMigrated	build/Decoders/Migrator/Migrator.cpp	/^bool Migrator::IsMigrated( NVMAddress& address )$/;"	f	class:Migrator
Migrating	build/Decoders/Migrator/Migrator.cpp	/^bool Migrator::Migrating( )$/;"	f	class:Migrator
Migrator	build/Decoders/Migrator/Migrator.cpp	/^Migrator::Migrator( )$/;"	f	class:Migrator
RegisterStats	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::RegisterStats( )$/;"	f	class:Migrator
RestoreCheckpoint	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::RestoreCheckpoint( std::string dir )$/;"	f	class:Migrator
SetConfig	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:Migrator
SetMigrationState	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::SetMigrationState( NVMAddress& address, MigratorState newState )$/;"	f	class:Migrator
StartMigration	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::StartMigration( NVMAddress& promotee, NVMAddress& demotee )$/;"	f	class:Migrator
Translate	build/Decoders/Migrator/Migrator.cpp	/^void Migrator::Translate( uint64_t address, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:Migrator
~Migrator	build/Decoders/Migrator/Migrator.cpp	/^Migrator::~Migrator( )$/;"	f	class:Migrator
BitModel	build/Endurance/BitModel/BitModel.cpp	/^BitModel::BitModel( )$/;"	f	class:BitModel
Read	build/Endurance/BitModel/BitModel.cpp	/^ncycles_t BitModel::Read( NVMainRequest *request )$/;"	f	class:BitModel
SetConfig	build/Endurance/BitModel/BitModel.cpp	/^void BitModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:BitModel
Write	build/Endurance/BitModel/BitModel.cpp	/^ncycles_t BitModel::Write( NVMainRequest *request, NVMDataBlock& oldData ) $/;"	f	class:BitModel
~BitModel	build/Endurance/BitModel/BitModel.cpp	/^BitModel::~BitModel( )$/;"	f	class:BitModel
ByteModel	build/Endurance/ByteModel/ByteModel.cpp	/^ByteModel::ByteModel( )$/;"	f	class:ByteModel
Read	build/Endurance/ByteModel/ByteModel.cpp	/^ncycles_t ByteModel::Read( NVMainRequest *request ) $/;"	f	class:ByteModel
SetConfig	build/Endurance/ByteModel/ByteModel.cpp	/^void ByteModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:ByteModel
Write	build/Endurance/ByteModel/ByteModel.cpp	/^ncycles_t ByteModel::Write( NVMainRequest *request, NVMDataBlock& oldData ) $/;"	f	class:ByteModel
~ByteModel	build/Endurance/ByteModel/ByteModel.cpp	/^ByteModel::~ByteModel( )$/;"	f	class:ByteModel
GetEndurance	build/Endurance/Distributions/Normal.cpp	/^uint64_t NormalDistribution::GetEndurance( )$/;"	f	class:NormalDistribution
NormalDistribution	build/Endurance/Distributions/Normal.cpp	/^NormalDistribution::NormalDistribution( )$/;"	f	class:NormalDistribution
NormalDistribution	build/Endurance/Distributions/Normal.cpp	/^NormalDistribution::NormalDistribution( Config *conf )$/;"	f	class:NormalDistribution
GetEndurance	build/Endurance/Distributions/Uniform.cpp	/^uint64_t UniformDistribution::GetEndurance( )$/;"	f	class:UniformDistribution
UniformDistribution	build/Endurance/Distributions/Uniform.cpp	/^UniformDistribution::UniformDistribution( Config *conf )$/;"	f	class:UniformDistribution
CreateEnduranceDistribution	build/Endurance/EnduranceDistributionFactory.cpp	/^EnduranceDistribution *EnduranceDistributionFactory::CreateEnduranceDistribution( $/;"	f	class:EnduranceDistributionFactory
CreateEnduranceModel	build/Endurance/EnduranceModelFactory.cpp	/^EnduranceModel *EnduranceModelFactory::CreateEnduranceModel( $/;"	f	class:EnduranceModelFactory
NullModel	build/Endurance/NullModel/NullModel.cpp	/^NullModel::NullModel( )$/;"	f	class:NullModel
Read	build/Endurance/NullModel/NullModel.cpp	/^ncycles_t NullModel::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:NullModel
Write	build/Endurance/NullModel/NullModel.cpp	/^ncycles_t NullModel::Write( NVMainRequest* \/*request*\/, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:NullModel
~NullModel	build/Endurance/NullModel/NullModel.cpp	/^NullModel::~NullModel( )$/;"	f	class:NullModel
Read	build/Endurance/RowModel/RowModel.cpp	/^ncycles_t RowModel::Read( NVMainRequest *request )$/;"	f	class:RowModel
RowModel	build/Endurance/RowModel/RowModel.cpp	/^RowModel::RowModel( )$/;"	f	class:RowModel
SetConfig	build/Endurance/RowModel/RowModel.cpp	/^void RowModel::SetConfig( Config *conf, bool createChildren )$/;"	f	class:RowModel
Write	build/Endurance/RowModel/RowModel.cpp	/^ncycles_t RowModel::Write( NVMainRequest *request, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:RowModel
~RowModel	build/Endurance/RowModel/RowModel.cpp	/^RowModel::~RowModel( )$/;"	f	class:RowModel
Read	build/Endurance/WordModel/WordModel.cpp	/^ncycles_t WordModel::Read( NVMainRequest *request )$/;"	f	class:WordModel
SetConfig	build/Endurance/WordModel/WordModel.cpp	/^void WordModel::SetConfig( Config *config, bool createChildren )$/;"	f	class:WordModel
WordModel	build/Endurance/WordModel/WordModel.cpp	/^WordModel::WordModel( )$/;"	f	class:WordModel
Write	build/Endurance/WordModel/WordModel.cpp	/^ncycles_t WordModel::Write( NVMainRequest *request, NVMDataBlock& \/*oldData*\/ ) $/;"	f	class:WordModel
~WordModel	build/Endurance/WordModel/WordModel.cpp	/^WordModel::~WordModel( )$/;"	f	class:WordModel
CreateInterconnect	build/Interconnect/InterconnectFactory.cpp	/^Interconnect *InterconnectFactory::CreateInterconnect( std::string type )$/;"	f	class:InterconnectFactory
CalculateIOPower	build/Interconnect/OffChipBus/OffChipBus.cpp	/^double OffChipBus::CalculateIOPower( bool isRead, unsigned int bitValue )$/;"	f	class:OffChipBus
CalculateStats	build/Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::CalculateStats( )$/;"	f	class:OffChipBus
Cycle	build/Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::Cycle( ncycle_t steps )$/;"	f	class:OffChipBus
IsIssuable	build/Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:OffChipBus
IssueCommand	build/Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::IssueCommand( NVMainRequest *req )$/;"	f	class:OffChipBus
OffChipBus	build/Interconnect/OffChipBus/OffChipBus.cpp	/^OffChipBus::OffChipBus( )$/;"	f	class:OffChipBus
RequestComplete	build/Interconnect/OffChipBus/OffChipBus.cpp	/^bool OffChipBus::RequestComplete( NVMainRequest *request )$/;"	f	class:OffChipBus
SetConfig	build/Interconnect/OffChipBus/OffChipBus.cpp	/^void OffChipBus::SetConfig( Config *c, bool createChildren )$/;"	f	class:OffChipBus
~OffChipBus	build/Interconnect/OffChipBus/OffChipBus.cpp	/^OffChipBus::~OffChipBus( )$/;"	f	class:OffChipBus
CalculateStats	build/Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::CalculateStats( )$/;"	f	class:OnChipBus
Cycle	build/Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::Cycle( ncycle_t steps )$/;"	f	class:OnChipBus
IsIssuable	build/Interconnect/OnChipBus/OnChipBus.cpp	/^bool OnChipBus::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:OnChipBus
IssueCommand	build/Interconnect/OnChipBus/OnChipBus.cpp	/^bool OnChipBus::IssueCommand( NVMainRequest *req )$/;"	f	class:OnChipBus
OnChipBus	build/Interconnect/OnChipBus/OnChipBus.cpp	/^OnChipBus::OnChipBus( )$/;"	f	class:OnChipBus
SetConfig	build/Interconnect/OnChipBus/OnChipBus.cpp	/^void OnChipBus::SetConfig( Config *c, bool createChildren )$/;"	f	class:OnChipBus
~OnChipBus	build/Interconnect/OnChipBus/OnChipBus.cpp	/^OnChipBus::~OnChipBus( )$/;"	f	class:OnChipBus
CalculateStats	build/MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::CalculateStats( )$/;"	f	class:DRAMCache
Cycle	build/MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::Cycle( ncycle_t steps )$/;"	f	class:DRAMCache
DRAMCache	build/MemControl/DRAMCache/DRAMCache.cpp	/^DRAMCache::DRAMCache( )$/;"	f	class:DRAMCache
GetMainMemory	build/MemControl/DRAMCache/DRAMCache.cpp	/^NVMain *DRAMCache::GetMainMemory( )$/;"	f	class:DRAMCache
IsIssuable	build/MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IsIssuable( NVMainRequest * req, FailReason * \/*fail*\/ )$/;"	f	class:DRAMCache
IssueAtomic	build/MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueAtomic( NVMainRequest *req )$/;"	f	class:DRAMCache
IssueCommand	build/MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueCommand( NVMainRequest *req )$/;"	f	class:DRAMCache
IssueFunctional	build/MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::IssueFunctional( NVMainRequest *req )$/;"	f	class:DRAMCache
RegisterStats	build/MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::RegisterStats( )$/;"	f	class:DRAMCache
RequestComplete	build/MemControl/DRAMCache/DRAMCache.cpp	/^bool DRAMCache::RequestComplete( NVMainRequest *req )$/;"	f	class:DRAMCache
Retranslate	build/MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::Retranslate( NVMainRequest *req )$/;"	f	class:DRAMCache
SetConfig	build/MemControl/DRAMCache/DRAMCache.cpp	/^void DRAMCache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:DRAMCache
~DRAMCache	build/MemControl/DRAMCache/DRAMCache.cpp	/^DRAMCache::~DRAMCache( )$/;"	f	class:DRAMCache
CalculateStats	build/MemControl/FCFS/FCFS.cpp	/^void FCFS::CalculateStats( )$/;"	f	class:FCFS
Cycle	build/MemControl/FCFS/FCFS.cpp	/^void FCFS::Cycle( ncycle_t steps )$/;"	f	class:FCFS
FCFS	build/MemControl/FCFS/FCFS.cpp	/^FCFS::FCFS( )$/;"	f	class:FCFS
IsIssuable	build/MemControl/FCFS/FCFS.cpp	/^bool FCFS::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:FCFS
IssueCommand	build/MemControl/FCFS/FCFS.cpp	/^bool FCFS::IssueCommand( NVMainRequest *request )$/;"	f	class:FCFS
RegisterStats	build/MemControl/FCFS/FCFS.cpp	/^void FCFS::RegisterStats( )$/;"	f	class:FCFS
RequestComplete	build/MemControl/FCFS/FCFS.cpp	/^bool FCFS::RequestComplete( NVMainRequest * request )$/;"	f	class:FCFS
SetConfig	build/MemControl/FCFS/FCFS.cpp	/^void FCFS::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FCFS
CalculateStats	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::CalculateStats( )$/;"	f	class:FRFCFS_WQF
Cycle	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::Cycle( ncycle_t steps )$/;"	f	class:FRFCFS_WQF
Drain	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::Drain( )$/;"	f	class:FRFCFS_WQF
FRFCFS_WQF	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^FRFCFS_WQF::FRFCFS_WQF( ) : readQueueId(0), writeQueueId(1)$/;"	f	class:FRFCFS_WQF
IsIssuable	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::IsIssuable( NVMainRequest *request, FailReason * \/*fail*\/ )$/;"	f	class:FRFCFS_WQF
IssueCommand	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::IssueCommand( NVMainRequest *request )$/;"	f	class:FRFCFS_WQF
RegisterStats	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::RegisterStats( )$/;"	f	class:FRFCFS_WQF
RequestComplete	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^bool FRFCFS_WQF::RequestComplete( NVMainRequest * request )$/;"	f	class:FRFCFS_WQF
SetConfig	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^void FRFCFS_WQF::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FRFCFS_WQF
~FRFCFS_WQF	build/MemControl/FRFCFS-WQF/FRFCFS-WQF.cpp	/^FRFCFS_WQF::~FRFCFS_WQF( )$/;"	f	class:FRFCFS_WQF
CalculateStats	build/MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::CalculateStats( )$/;"	f	class:FRFCFS
Cycle	build/MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::Cycle( ncycle_t steps )$/;"	f	class:FRFCFS
FRFCFS	build/MemControl/FRFCFS/FRFCFS.cpp	/^FRFCFS::FRFCFS( )$/;"	f	class:FRFCFS
IsIssuable	build/MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:FRFCFS
IssueCommand	build/MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::IssueCommand( NVMainRequest *req )$/;"	f	class:FRFCFS
RegisterStats	build/MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::RegisterStats( )$/;"	f	class:FRFCFS
RequestComplete	build/MemControl/FRFCFS/FRFCFS.cpp	/^bool FRFCFS::RequestComplete( NVMainRequest * request )$/;"	f	class:FRFCFS
SetConfig	build/MemControl/FRFCFS/FRFCFS.cpp	/^void FRFCFS::SetConfig( Config *conf, bool createChildren )$/;"	f	class:FRFCFS
~FRFCFS	build/MemControl/FRFCFS/FRFCFS.cpp	/^FRFCFS::~FRFCFS( )$/;"	f	class:FRFCFS
CalculateLatency	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateLatency( NVMainRequest *req, double *average, $/;"	f	class:LH_Cache
CalculateQueueLatency	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateQueueLatency( NVMainRequest *req, double *average, $/;"	f	class:LH_Cache
CalculateStats	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::CalculateStats( )$/;"	f	class:LH_Cache
Cycle	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:LH_Cache
IsIssuable	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:LH_Cache
IssueAtomic	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueAtomic( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueCommand	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueCommand( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueDRCCommands	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueDRCCommands( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueFillCommands	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueFillCommands( NVMainRequest *req )$/;"	f	class:LH_Cache
IssueFunctional	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::IssueFunctional( NVMainRequest *req )$/;"	f	class:LH_Cache
LH_Cache	build/MemControl/LH-Cache/LH-Cache.cpp	/^LH_Cache::LH_Cache( )$/;"	f	class:LH_Cache
MakeDRCRequest	build/MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeDRCRequest( NVMainRequest *triggerRequest)$/;"	f	class:LH_Cache
MakeTagRequest	build/MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeTagRequest( NVMainRequest *triggerRequest, int tag )$/;"	f	class:LH_Cache
MakeTagWriteRequest	build/MemControl/LH-Cache/LH-Cache.cpp	/^NVMainRequest *LH_Cache::MakeTagWriteRequest( NVMainRequest *triggerRequest )$/;"	f	class:LH_Cache
RegisterStats	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::RegisterStats( )$/;"	f	class:LH_Cache
RequestComplete	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::RequestComplete( NVMainRequest *req )$/;"	f	class:LH_Cache
SetConfig	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:LH_Cache
SetMainMemory	build/MemControl/LH-Cache/LH-Cache.cpp	/^void LH_Cache::SetMainMemory( NVMain *mm )$/;"	f	class:LH_Cache
operator ()	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::BankLocked::operator() ( NVMainRequest * request )$/;"	f	class:LH_Cache::BankLocked
operator ()	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::FillQueueFull::operator() ( NVMainRequest * \/*request*\/ )$/;"	f	class:LH_Cache::FillQueueFull
operator ()	build/MemControl/LH-Cache/LH-Cache.cpp	/^bool LH_Cache::NoWriteBuffering::operator() ( NVMainRequest * \/*request*\/ )$/;"	f	class:LH_Cache::NoWriteBuffering
~LH_Cache	build/MemControl/LH-Cache/LH-Cache.cpp	/^LH_Cache::~LH_Cache( )$/;"	f	class:LH_Cache
CalculateStats	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::CalculateStats( )$/;"	f	class:LO_Cache
CreateCheckpoint	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::CreateCheckpoint( std::string dir )$/;"	f	class:LO_Cache
Cycle	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::Cycle( ncycle_t steps )$/;"	f	class:LO_Cache
IsIssuable	build/MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:LO_Cache
IssueAtomic	build/MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueAtomic( NVMainRequest *req )$/;"	f	class:LO_Cache
IssueCommand	build/MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueCommand( NVMainRequest *req )$/;"	f	class:LO_Cache
IssueFunctional	build/MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::IssueFunctional( NVMainRequest *req )$/;"	f	class:LO_Cache
LO_Cache	build/MemControl/LO-Cache/LO-Cache.cpp	/^LO_Cache::LO_Cache( )$/;"	f	class:LO_Cache
RegisterStats	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::RegisterStats( )$/;"	f	class:LO_Cache
RequestComplete	build/MemControl/LO-Cache/LO-Cache.cpp	/^bool LO_Cache::RequestComplete( NVMainRequest *req )$/;"	f	class:LO_Cache
RestoreCheckpoint	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::RestoreCheckpoint( std::string dir )$/;"	f	class:LO_Cache
SetConfig	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::SetConfig( Config *conf, bool createChildren )$/;"	f	class:LO_Cache
SetMainMemory	build/MemControl/LO-Cache/LO-Cache.cpp	/^void LO_Cache::SetMainMemory( NVMain *mm )$/;"	f	class:LO_Cache
~LO_Cache	build/MemControl/LO-Cache/LO-Cache.cpp	/^LO_Cache::~LO_Cache( )$/;"	f	class:LO_Cache
CreateNewController	build/MemControl/MemoryControllerFactory.cpp	/^MemoryController *MemoryControllerFactory::CreateNewController( std::string controller ) $/;"	f	class:MemoryControllerFactory
CalculateStats	build/MemControl/MissMap/MissMap.cpp	/^void MissMap::CalculateStats( )$/;"	f	class:MissMap
Cycle	build/MemControl/MissMap/MissMap.cpp	/^void MissMap::Cycle( ncycle_t )$/;"	f	class:MissMap
IssueAtomic	build/MemControl/MissMap/MissMap.cpp	/^bool MissMap::IssueAtomic( NVMainRequest *req )$/;"	f	class:MissMap
IssueCommand	build/MemControl/MissMap/MissMap.cpp	/^bool MissMap::IssueCommand( NVMainRequest *req )$/;"	f	class:MissMap
MissMap	build/MemControl/MissMap/MissMap.cpp	/^MissMap::MissMap( )$/;"	f	class:MissMap
QueueFull	build/MemControl/MissMap/MissMap.cpp	/^bool MissMap::QueueFull( NVMainRequest * )$/;"	f	class:MissMap
RegisterStats	build/MemControl/MissMap/MissMap.cpp	/^void MissMap::RegisterStats( )$/;"	f	class:MissMap
RequestComplete	build/MemControl/MissMap/MissMap.cpp	/^bool MissMap::RequestComplete( NVMainRequest *req )$/;"	f	class:MissMap
SetConfig	build/MemControl/MissMap/MissMap.cpp	/^void MissMap::SetConfig( Config *conf, bool createChildren )$/;"	f	class:MissMap
~MissMap	build/MemControl/MissMap/MissMap.cpp	/^MissMap::~MissMap( )$/;"	f	class:MissMap
Cycle	build/MemControl/PerfectMemory/PerfectMemory.cpp	/^void PerfectMemory::Cycle( ncycle_t )$/;"	f	class:PerfectMemory
IssueCommand	build/MemControl/PerfectMemory/PerfectMemory.cpp	/^bool PerfectMemory::IssueCommand( NVMainRequest *req )$/;"	f	class:PerfectMemory
PerfectMemory	build/MemControl/PerfectMemory/PerfectMemory.cpp	/^PerfectMemory::PerfectMemory( )$/;"	f	class:PerfectMemory
PrintStats	build/MemControl/PerfectMemory/PerfectMemory.cpp	/^void PerfectMemory::PrintStats( std::ostream& )$/;"	f	class:PerfectMemory
CalculateStats	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::CalculateStats( )$/;"	f	class:PredictorDRC
Cycle	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::Cycle( ncycle_t steps )$/;"	f	class:PredictorDRC
IsIssuable	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IsIssuable( NVMainRequest * req, FailReason * \/*fail*\/ )$/;"	f	class:PredictorDRC
IssueAtomic	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IssueAtomic( NVMainRequest *req )$/;"	f	class:PredictorDRC
IssueCommand	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::IssueCommand( NVMainRequest *req )$/;"	f	class:PredictorDRC
PredictorDRC	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^PredictorDRC::PredictorDRC( )$/;"	f	class:PredictorDRC
RegisterStats	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::RegisterStats( )$/;"	f	class:PredictorDRC
RequestComplete	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^bool PredictorDRC::RequestComplete( NVMainRequest *req )$/;"	f	class:PredictorDRC
SetConfig	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^void PredictorDRC::SetConfig( Config *conf, bool createChildren )$/;"	f	class:PredictorDRC
~PredictorDRC	build/MemControl/PredictorDRC/PredictorDRC.cpp	/^PredictorDRC::~PredictorDRC( )$/;"	f	class:PredictorDRC
CalculateStats	build/NVM/nvmain.cpp	/^void NVMain::CalculateStats( )$/;"	f	class:NVMain
CheckPrefetch	build/NVM/nvmain.cpp	/^bool NVMain::CheckPrefetch( NVMainRequest *request )$/;"	f	class:NVMain
Cycle	build/NVM/nvmain.cpp	/^void NVMain::Cycle( ncycle_t steps )$/;"	f	class:NVMain
EnqueuePendingMemoryRequests	build/NVM/nvmain.cpp	/^void NVMain::EnqueuePendingMemoryRequests( NVMainRequest *req )$/;"	f	class:NVMain
GeneratePrefetches	build/NVM/nvmain.cpp	/^void NVMain::GeneratePrefetches( NVMainRequest *request, std::vector<NVMAddress>& prefetchList )$/;"	f	class:NVMain
GetConfig	build/NVM/nvmain.cpp	/^Config *NVMain::GetConfig( )$/;"	f	class:NVMain
IsIssuable	build/NVM/nvmain.cpp	/^bool NVMain::IsIssuable( NVMainRequest *request, FailReason *reason )$/;"	f	class:NVMain
IssueAtomic	build/NVM/nvmain.cpp	/^bool NVMain::IssueAtomic( NVMainRequest *request )$/;"	f	class:NVMain
IssueCommand	build/NVM/nvmain.cpp	/^bool NVMain::IssueCommand( NVMainRequest *request )$/;"	f	class:NVMain
IssuePrefetch	build/NVM/nvmain.cpp	/^void NVMain::IssuePrefetch( NVMainRequest *request )$/;"	f	class:NVMain
NVMain	build/NVM/nvmain.cpp	/^NVMain::NVMain( )$/;"	f	class:NVMain
PrintPreTrace	build/NVM/nvmain.cpp	/^void NVMain::PrintPreTrace( NVMainRequest *request )$/;"	f	class:NVMain
RegisterStats	build/NVM/nvmain.cpp	/^void NVMain::RegisterStats( )$/;"	f	class:NVMain
RequestComplete	build/NVM/nvmain.cpp	/^bool NVMain::RequestComplete( NVMainRequest *request )$/;"	f	class:NVMain
SetConfig	build/NVM/nvmain.cpp	/^void NVMain::SetConfig( Config *conf, std::string memoryName, bool createChildren )$/;"	f	class:NVMain
~NVMain	build/NVM/nvmain.cpp	/^NVMain::~NVMain( )$/;"	f	class:NVMain
NVM	build/NVM/nvmain.h	/^namespace NVM {$/;"	n
NVMain	build/NVM/nvmain.h	/^class NVMain : public NVMObject$/;"	c	namespace:NVM
__NVMAIN_H__	build/NVM/nvmain.h	35;"	d
channelConfig	build/NVM/nvmain.h	/^    Config **channelConfig;$/;"	m	class:NVM::NVMain
config	build/NVM/nvmain.h	/^    Config *config;$/;"	m	class:NVM::NVMain
memoryControllers	build/NVM/nvmain.h	/^    MemoryController **memoryControllers;$/;"	m	class:NVM::NVMain
numChannels	build/NVM/nvmain.h	/^    unsigned int numChannels;$/;"	m	class:NVM::NVMain
pendingMemoryRequests	build/NVM/nvmain.h	/^    std::queue<NVMainRequest *> pendingMemoryRequests;$/;"	m	class:NVM::NVMain
preTracer	build/NVM/nvmain.h	/^    GenericTraceWriter *preTracer;$/;"	m	class:NVM::NVMain
prefetchBuffer	build/NVM/nvmain.h	/^    std::list<NVMainRequest *> prefetchBuffer;$/;"	m	class:NVM::NVMain
prefetcher	build/NVM/nvmain.h	/^    Prefetcher *prefetcher;$/;"	m	class:NVM::NVMain
pretraceOutput	build/NVM/nvmain.h	/^    std::ofstream pretraceOutput;$/;"	m	class:NVM::NVMain
simInterface	build/NVM/nvmain.h	/^    SimInterface *simInterface;$/;"	m	class:NVM::NVMain
successfulPrefetches	build/NVM/nvmain.h	/^    ncounter_t successfulPrefetches;$/;"	m	class:NVM::NVMain
syncValue	build/NVM/nvmain.h	/^    double syncValue;$/;"	m	class:NVM::NVMain
totalReadRequests	build/NVM/nvmain.h	/^    ncounter_t totalReadRequests;$/;"	m	class:NVM::NVMain
totalWriteRequests	build/NVM/nvmain.h	/^    ncounter_t totalWriteRequests;$/;"	m	class:NVM::NVMain
translator	build/NVM/nvmain.h	/^    AddressTranslator *translator;$/;"	m	class:NVM::NVMain
unsuccessfulPrefetches	build/NVM/nvmain.h	/^    ncounter_t unsuccessfulPrefetches;$/;"	m	class:NVM::NVMain
DoPrefetch	build/Prefetchers/NaivePrefetcher/NaivePrefetcher.cpp	/^bool NaivePrefetcher::DoPrefetch( NVMainRequest *triggerOp, $/;"	f	class:NaivePrefetcher
CreateNewPrefetcher	build/Prefetchers/PrefetcherFactory.cpp	/^Prefetcher *PrefetcherFactory::CreateNewPrefetcher( std::string name )$/;"	f	class:PrefetcherFactory
DoPrefetch	build/Prefetchers/STeMS/STeMS.cpp	/^bool STeMS::DoPrefetch( NVMainRequest *triggerOp, $/;"	f	class:STeMS
FetchNextUnused	build/Prefetchers/STeMS/STeMS.cpp	/^void STeMS::FetchNextUnused( PatternSequence *rps, int count, $/;"	f	class:STeMS
NotifyAccess	build/Prefetchers/STeMS/STeMS.cpp	/^bool STeMS::NotifyAccess( NVMainRequest *accessOp, $/;"	f	class:STeMS
CreateNewRank	build/Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateNewRank( std::string rankName )$/;"	f	class:RankFactory
CreateRank	build/Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateRank( std::string rankName )$/;"	f	class:RankFactory
CreateRankNoWarn	build/Ranks/RankFactory.cpp	/^Rank *RankFactory::CreateRankNoWarn( std::string rankName )$/;"	f	class:RankFactory
Activate	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Activate( NVMainRequest *request )$/;"	f	class:StandardRank
CalculateStats	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::CalculateStats( )$/;"	f	class:StandardRank
CanPowerDown	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::CanPowerDown( NVMainRequest *request )$/;"	f	class:StandardRank
CanPowerUp	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::CanPowerUp( NVMainRequest *request )$/;"	f	class:StandardRank
Cycle	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::Cycle( ncycle_t steps )$/;"	f	class:StandardRank
Idle	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Idle( )$/;"	f	class:StandardRank
IsIssuable	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:StandardRank
IssueCommand	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::IssueCommand( NVMainRequest *req )$/;"	f	class:StandardRank
NextIssuable	build/Ranks/StandardRank/StandardRank.cpp	/^ncycle_t StandardRank::NextIssuable( NVMainRequest *request )$/;"	f	class:StandardRank
Notify	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::Notify( NVMainRequest *request )$/;"	f	class:StandardRank
PowerDown	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::PowerDown( NVMainRequest *request )$/;"	f	class:StandardRank
PowerUp	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::PowerUp( NVMainRequest *request )$/;"	f	class:StandardRank
Precharge	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Precharge( NVMainRequest *request )$/;"	f	class:StandardRank
Read	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Read( NVMainRequest *request )$/;"	f	class:StandardRank
Refresh	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Refresh( NVMainRequest *request )$/;"	f	class:StandardRank
RegisterStats	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::RegisterStats( )$/;"	f	class:StandardRank
RequestComplete	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::RequestComplete( NVMainRequest* req )$/;"	f	class:StandardRank
ResetStats	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::ResetStats( )$/;"	f	class:StandardRank
SetConfig	build/Ranks/StandardRank/StandardRank.cpp	/^void StandardRank::SetConfig( Config *c, bool createChildren )$/;"	f	class:StandardRank
StandardRank	build/Ranks/StandardRank/StandardRank.cpp	/^StandardRank::StandardRank( )$/;"	f	class:StandardRank
Write	build/Ranks/StandardRank/StandardRank.cpp	/^bool StandardRank::Write( NVMainRequest *request )$/;"	f	class:StandardRank
~StandardRank	build/Ranks/StandardRank/StandardRank.cpp	/^StandardRank::~StandardRank( )$/;"	f	class:StandardRank
GetCacheHits	build/SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetCacheHits( int \/*core*\/, int \/*level*\/ )$/;"	f	class:NullInterface
GetCacheMisses	build/SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetCacheMisses( int \/*core*\/, int \/*level*\/ )$/;"	f	class:NullInterface
GetInstructionCount	build/SimInterface/NullInterface/NullInterface.cpp	/^unsigned int NullInterface::GetInstructionCount( int \/*core*\/ )$/;"	f	class:NullInterface
HasCacheHits	build/SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasCacheHits( )$/;"	f	class:NullInterface
HasCacheMisses	build/SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasCacheMisses( )$/;"	f	class:NullInterface
HasInstructionCount	build/SimInterface/NullInterface/NullInterface.cpp	/^bool NullInterface::HasInstructionCount( )$/;"	f	class:NullInterface
NullInterface	build/SimInterface/NullInterface/NullInterface.cpp	/^NullInterface::NullInterface( )$/;"	f	class:NullInterface
~NullInterface	build/SimInterface/NullInterface/NullInterface.cpp	/^NullInterface::~NullInterface( )$/;"	f	class:NullInterface
AccessPredictor	build/Utils/AccessPredictor/AccessPredictor.cpp	/^AccessPredictor::AccessPredictor( )$/;"	f	class:AccessPredictor
Cycle	build/Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::Cycle( ncycle_t )$/;"	f	class:AccessPredictor
GetHitDestination	build/Utils/AccessPredictor/AccessPredictor.cpp	/^ncounter_t AccessPredictor::GetHitDestination( )$/;"	f	class:AccessPredictor
GetMissDestination	build/Utils/AccessPredictor/AccessPredictor.cpp	/^ncounter_t AccessPredictor::GetMissDestination( )$/;"	f	class:AccessPredictor
SetHitDestination	build/Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::SetHitDestination( ncounter_t childId )$/;"	f	class:AccessPredictor
SetMissDestination	build/Utils/AccessPredictor/AccessPredictor.cpp	/^void AccessPredictor::SetMissDestination( ncounter_t childId )$/;"	f	class:AccessPredictor
~AccessPredictor	build/Utils/AccessPredictor/AccessPredictor.cpp	/^AccessPredictor::~AccessPredictor( )$/;"	f	class:AccessPredictor
CreateAccessPredictor	build/Utils/AccessPredictor/AccessPredictorFactory.cpp	/^AccessPredictor *AccessPredictorFactory::CreateAccessPredictor( std::string name )$/;"	f	class:AccessPredictorFactory
PerfectPredictor	build/Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^PerfectPredictor::PerfectPredictor( )$/;"	f	class:PerfectPredictor
Translate	build/Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^uint64_t PerfectPredictor::Translate( NVMainRequest *request )$/;"	f	class:PerfectPredictor
~PerfectPredictor	build/Utils/AccessPredictor/PerfectPredictor/PerfectPredictor.cpp	/^PerfectPredictor::~PerfectPredictor( )$/;"	f	class:PerfectPredictor
SetConfig	build/Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^void VariablePredictor::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:VariablePredictor
Translate	build/Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^uint64_t VariablePredictor::Translate( NVMainRequest *request )$/;"	f	class:VariablePredictor
VariablePredictor	build/Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^VariablePredictor::VariablePredictor( )$/;"	f	class:VariablePredictor
~VariablePredictor	build/Utils/AccessPredictor/VariablePredictor/VariablePredictor.cpp	/^VariablePredictor::~VariablePredictor( )$/;"	f	class:VariablePredictor
CacheBank	build/Utils/Caches/CacheBank.cpp	/^CacheBank::CacheBank( uint64_t sets, uint64_t assoc, uint64_t lineSize )$/;"	f	class:CacheBank
ChooseVictim	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::ChooseVictim( NVMAddress& addr, NVMAddress *victim )$/;"	f	class:CacheBank
Cycle	build/Utils/Caches/CacheBank.cpp	/^void CacheBank::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:CacheBank
DefaultDecoder	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::DefaultDecoder( NVMAddress &addr )$/;"	f	class:CacheBank
Evict	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::Evict( NVMAddress& addr, NVMDataBlock *data )$/;"	f	class:CacheBank
FindSet	build/Utils/Caches/CacheBank.cpp	/^CacheEntry *CacheBank::FindSet( NVMAddress& addr )$/;"	f	class:CacheBank
GetAssociativity	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetAssociativity( )$/;"	f	class:CacheBank
GetCacheOccupancy	build/Utils/Caches/CacheBank.cpp	/^double CacheBank::GetCacheOccupancy( )$/;"	f	class:CacheBank
GetCachelineSize	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetCachelineSize( )$/;"	f	class:CacheBank
GetReadTime	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetReadTime( )$/;"	f	class:CacheBank
GetSetCount	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetSetCount( )$/;"	f	class:CacheBank
GetWriteTime	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::GetWriteTime( )$/;"	f	class:CacheBank
Install	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::Install( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
IsIssuable	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::IsIssuable( NVMainRequest * \/*req*\/, FailReason * \/*reason*\/ )$/;"	f	class:CacheBank
IssueCommand	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::IssueCommand( NVMainRequest *nreq )$/;"	f	class:CacheBank
Present	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::Present( NVMAddress& addr )$/;"	f	class:CacheBank
Read	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::Read( NVMAddress& addr, NVMDataBlock *data )$/;"	f	class:CacheBank
RequestComplete	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::RequestComplete( NVMainRequest *req )$/;"	f	class:CacheBank
SetDecodeFunction	build/Utils/Caches/CacheBank.cpp	/^void CacheBank::SetDecodeFunction( NVMObject *dcClass, CacheSetDecoder dcFunc )$/;"	f	class:CacheBank
SetFull	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::SetFull( NVMAddress& addr )$/;"	f	class:CacheBank
SetID	build/Utils/Caches/CacheBank.cpp	/^uint64_t CacheBank::SetID( NVMAddress& addr )$/;"	f	class:CacheBank
SetReadTime	build/Utils/Caches/CacheBank.cpp	/^void CacheBank::SetReadTime( uint64_t rtime )$/;"	f	class:CacheBank
SetWriteTime	build/Utils/Caches/CacheBank.cpp	/^void CacheBank::SetWriteTime( uint64_t wtime )$/;"	f	class:CacheBank
UpdateData	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::UpdateData( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
Write	build/Utils/Caches/CacheBank.cpp	/^bool CacheBank::Write( NVMAddress& addr, NVMDataBlock& data )$/;"	f	class:CacheBank
~CacheBank	build/Utils/Caches/CacheBank.cpp	/^CacheBank::~CacheBank( )$/;"	f	class:CacheBank
CheckIssuable	build/Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::CheckIssuable( NVMAddress address, OpType type )$/;"	f	class:CoinMigrator
ChooseVictim	build/Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::ChooseVictim( Migrator *at, NVMAddress& \/*promotee*\/, NVMAddress& victim )$/;"	f	class:CoinMigrator
CoinMigrator	build/Utils/CoinMigrator/CoinMigrator.cpp	/^CoinMigrator::CoinMigrator( )$/;"	f	class:CoinMigrator
Cycle	build/Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:CoinMigrator
Init	build/Utils/CoinMigrator/CoinMigrator.cpp	/^void CoinMigrator::Init( Config *config )$/;"	f	class:CoinMigrator
IssueAtomic	build/Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::IssueAtomic( NVMainRequest *request )$/;"	f	class:CoinMigrator
IssueCommand	build/Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::IssueCommand( NVMainRequest *request )$/;"	f	class:CoinMigrator
RequestComplete	build/Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::RequestComplete( NVMainRequest *request )$/;"	f	class:CoinMigrator
TryMigration	build/Utils/CoinMigrator/CoinMigrator.cpp	/^bool CoinMigrator::TryMigration( NVMainRequest *request, bool atomic )$/;"	f	class:CoinMigrator
~CoinMigrator	build/Utils/CoinMigrator/CoinMigrator.cpp	/^CoinMigrator::~CoinMigrator( )$/;"	f	class:CoinMigrator
CreateHook	build/Utils/HookFactory.cpp	/^NVMObject *HookFactory::CreateHook( std::string hookName )$/;"	f	class:HookFactory
Cycle	build/Utils/PostTrace/PostTrace.cpp	/^void PostTrace::Cycle( ncycle_t )$/;"	f	class:PostTrace
Init	build/Utils/PostTrace/PostTrace.cpp	/^void PostTrace::Init( Config *conf )$/;"	f	class:PostTrace
IssueAtomic	build/Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::IssueAtomic( NVMainRequest *request )$/;"	f	class:PostTrace
IssueCommand	build/Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::IssueCommand( NVMainRequest *request )$/;"	f	class:PostTrace
PostTrace	build/Utils/PostTrace/PostTrace.cpp	/^PostTrace::PostTrace( )$/;"	f	class:PostTrace
RequestComplete	build/Utils/PostTrace/PostTrace.cpp	/^bool PostTrace::RequestComplete( NVMainRequest * \/*request*\/ )$/;"	f	class:PostTrace
~PostTrace	build/Utils/PostTrace/PostTrace.cpp	/^PostTrace::~PostTrace( )$/;"	f	class:PostTrace
Callback	build/Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Callback( void *data )$/;"	f	class:RequestTracer
Cycle	build/Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Cycle( ncycle_t )$/;"	f	class:RequestTracer
Demangle	build/Utils/RequestTracer/RequestTracer.cpp	/^std::string RequestTracer::Demangle( const char* cxxname )$/;"	f	class:RequestTracer
Init	build/Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::Init( Config *conf )$/;"	f	class:RequestTracer
IssueAtomic	build/Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::IssueAtomic( NVMainRequest * \/*req*\/ )$/;"	f	class:RequestTracer
IssueCommand	build/Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::IssueCommand( NVMainRequest *req )$/;"	f	class:RequestTracer
RequestComplete	build/Utils/RequestTracer/RequestTracer.cpp	/^bool RequestTracer::RequestComplete( NVMainRequest *req )$/;"	f	class:RequestTracer
RequestTracer	build/Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::RequestTracer( )$/;"	f	class:RequestTracer
TraceAddress	build/Utils/RequestTracer/RequestTracer.cpp	/^void RequestTracer::TraceAddress( NVMainRequest *req, TracedType traceType )$/;"	f	class:RequestTracer
TracedRequest	build/Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::TracedRequest::TracedRequest( )$/;"	f	class:RequestTracer::TracedRequest
~RequestTracer	build/Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::~RequestTracer( )$/;"	f	class:RequestTracer
~TracedRequest	build/Utils/RequestTracer/RequestTracer.cpp	/^RequestTracer::TracedRequest::~TracedRequest( )$/;"	f	class:RequestTracer::TracedRequest
Cycle	build/Utils/Visualizer/Visualizer.cpp	/^void Visualizer::Cycle( ncycle_t )$/;"	f	class:Visualizer
Init	build/Utils/Visualizer/Visualizer.cpp	/^void Visualizer::Init( Config *conf )$/;"	f	class:Visualizer
IssueAtomic	build/Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::IssueAtomic( NVMainRequest *req )$/;"	f	class:Visualizer
IssueCommand	build/Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::IssueCommand( NVMainRequest *req )$/;"	f	class:Visualizer
RequestComplete	build/Utils/Visualizer/Visualizer.cpp	/^bool Visualizer::RequestComplete( NVMainRequest *req )$/;"	f	class:Visualizer
Visualizer	build/Utils/Visualizer/Visualizer.cpp	/^Visualizer::Visualizer( )$/;"	f	class:Visualizer
~Visualizer	build/Utils/Visualizer/Visualizer.cpp	/^Visualizer::~Visualizer( )$/;"	f	class:Visualizer
GetBank	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetBank( )$/;"	f	class:NVMAddress
GetBitAddress	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetBitAddress( )$/;"	f	class:NVMAddress
GetChannel	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetChannel( )$/;"	f	class:NVMAddress
GetCol	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetCol( )$/;"	f	class:NVMAddress
GetPhysicalAddress	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetPhysicalAddress( )$/;"	f	class:NVMAddress
GetRank	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetRank( )$/;"	f	class:NVMAddress
GetRow	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetRow( )$/;"	f	class:NVMAddress
GetSubArray	build/include/NVMAddress.cpp	/^uint64_t NVMAddress::GetSubArray( )$/;"	f	class:NVMAddress
GetTranslatedAddress	build/include/NVMAddress.cpp	/^void NVMAddress::GetTranslatedAddress( uint64_t *addrRow, uint64_t *addrCol, uint64_t *addrBank, $/;"	f	class:NVMAddress
HasPhysicalAddress	build/include/NVMAddress.cpp	/^bool NVMAddress::HasPhysicalAddress( )$/;"	f	class:NVMAddress
IsTranslated	build/include/NVMAddress.cpp	/^bool NVMAddress::IsTranslated( )$/;"	f	class:NVMAddress
NVMAddress	build/include/NVMAddress.cpp	/^NVMAddress::NVMAddress( )$/;"	f	class:NVMAddress
NVMAddress	build/include/NVMAddress.cpp	/^NVMAddress::NVMAddress( uint64_t addrRow, uint64_t addrCol, uint64_t addrBank,$/;"	f	class:NVMAddress
SetBitAddress	build/include/NVMAddress.cpp	/^void NVMAddress::SetBitAddress( uint8_t bitAddr )$/;"	f	class:NVMAddress
SetPhysicalAddress	build/include/NVMAddress.cpp	/^void NVMAddress::SetPhysicalAddress( uint64_t pAddress )$/;"	f	class:NVMAddress
SetTranslatedAddress	build/include/NVMAddress.cpp	/^void NVMAddress::SetTranslatedAddress( uint64_t addrRow, uint64_t addrCol, uint64_t addrBank, $/;"	f	class:NVMAddress
operator =	build/include/NVMAddress.cpp	/^NVMAddress& NVMAddress::operator=( const NVMAddress& m )$/;"	f	class:NVMAddress
~NVMAddress	build/include/NVMAddress.cpp	/^NVMAddress::~NVMAddress( )$/;"	f	class:NVMAddress
GetByte	build/include/NVMDataBlock.cpp	/^uint8_t NVMDataBlock::GetByte( uint64_t byte )$/;"	f	class:NVMDataBlock
GetSize	build/include/NVMDataBlock.cpp	/^uint64_t NVMDataBlock::GetSize( )$/;"	f	class:NVMDataBlock
IsValid	build/include/NVMDataBlock.cpp	/^bool NVMDataBlock::IsValid( )$/;"	f	class:NVMDataBlock
NVMDataBlock	build/include/NVMDataBlock.cpp	/^NVMDataBlock::NVMDataBlock( )$/;"	f	class:NVMDataBlock
Print	build/include/NVMDataBlock.cpp	/^void NVMDataBlock::Print( std::ostream& out ) const$/;"	f	class:NVMDataBlock
SetByte	build/include/NVMDataBlock.cpp	/^void NVMDataBlock::SetByte( uint64_t byte, uint8_t value )$/;"	f	class:NVMDataBlock
SetSize	build/include/NVMDataBlock.cpp	/^void NVMDataBlock::SetSize( uint64_t s )$/;"	f	class:NVMDataBlock
SetValid	build/include/NVMDataBlock.cpp	/^void NVMDataBlock::SetValid( bool valid )$/;"	f	class:NVMDataBlock
operator <<	build/include/NVMDataBlock.cpp	/^std::ostream& operator<<( std::ostream& out, const NVMDataBlock& obj )$/;"	f
operator =	build/include/NVMDataBlock.cpp	/^NVMDataBlock& NVMDataBlock::operator=( const NVMDataBlock& m )$/;"	f	class:NVMDataBlock
~NVMDataBlock	build/include/NVMDataBlock.cpp	/^NVMDataBlock::~NVMDataBlock( )$/;"	f	class:NVMDataBlock
GetFilePath	build/include/NVMHelpers.cpp	/^std::string GetFilePath( std::string file )$/;"	f	namespace:NVM
NVM	build/include/NVMHelpers.cpp	/^namespace NVM {$/;"	n	file:
mlog2	build/include/NVMHelpers.cpp	/^int mlog2( int num )$/;"	f	namespace:NVM
AddressTranslator	build/src/AddressTranslator.cpp	/^AddressTranslator::AddressTranslator( )$/;"	f	class:AddressTranslator
Divide	build/src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Divide( uint64_t partSize, MemoryPartition partition )$/;"	f	class:AddressTranslator
FindOrder	build/src/AddressTranslator.cpp	/^void AddressTranslator::FindOrder( int order, MemoryPartition *p )$/;"	f	class:AddressTranslator
GetStats	build/src/AddressTranslator.cpp	/^Stats *AddressTranslator::GetStats( )$/;"	f	class:AddressTranslator
GetTranslationMethod	build/src/AddressTranslator.cpp	/^TranslationMethod *AddressTranslator::GetTranslationMethod( )$/;"	f	class:AddressTranslator
Modulo	build/src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Modulo( uint64_t partialAddr, MemoryPartition partition )$/;"	f	class:AddressTranslator
ReverseTranslate	build/src/AddressTranslator.cpp	/^uint64_t AddressTranslator::ReverseTranslate( const uint64_t& row, $/;"	f	class:AddressTranslator
SetBurstLength	build/src/AddressTranslator.cpp	/^void AddressTranslator::SetBurstLength( int beat )$/;"	f	class:AddressTranslator
SetBusWidth	build/src/AddressTranslator.cpp	/^void AddressTranslator::SetBusWidth( int bits )$/;"	f	class:AddressTranslator
SetDefaultField	build/src/AddressTranslator.cpp	/^void AddressTranslator::SetDefaultField( TranslationField f )$/;"	f	class:AddressTranslator
SetStats	build/src/AddressTranslator.cpp	/^void AddressTranslator::SetStats( Stats *s )$/;"	f	class:AddressTranslator
SetTranslationMethod	build/src/AddressTranslator.cpp	/^void AddressTranslator::SetTranslationMethod( TranslationMethod *m )$/;"	f	class:AddressTranslator
StatName	build/src/AddressTranslator.cpp	/^std::string AddressTranslator::StatName( )$/;"	f	class:AddressTranslator
StatName	build/src/AddressTranslator.cpp	/^void AddressTranslator::StatName( std::string name )$/;"	f	class:AddressTranslator
Translate	build/src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Translate( NVMainRequest *request )$/;"	f	class:AddressTranslator
Translate	build/src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Translate( uint64_t address )$/;"	f	class:AddressTranslator
Translate	build/src/AddressTranslator.cpp	/^void AddressTranslator::Translate( NVMainRequest *request, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:AddressTranslator
Translate	build/src/AddressTranslator.cpp	/^void AddressTranslator::Translate( uint64_t address, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:AddressTranslator
~AddressTranslator	build/src/AddressTranslator.cpp	/^AddressTranslator::~AddressTranslator( )$/;"	f	class:AddressTranslator
GetId	build/src/Bank.cpp	/^ncounter_t Bank::GetId( )$/;"	f	class:Bank
Idle	build/src/Bank.cpp	/^bool Bank::Idle( )$/;"	f	class:Bank
SetId	build/src/Bank.cpp	/^void Bank::SetId( ncounter_t id )$/;"	f	class:Bank
Config	build/src/Config.cpp	/^Config::Config( )$/;"	f	class:Config
Config	build/src/Config.cpp	/^Config::Config(const Config& conf)$/;"	f	class:Config
GetBool	build/src/Config.cpp	/^bool Config::GetBool( std::string key )$/;"	f	class:Config
GetBool	build/src/Config.cpp	/^void Config::GetBool( std::string key, bool& value )$/;"	f	class:Config
GetDebugLog	build/src/Config.cpp	/^std::ostream *Config::GetDebugLog( )$/;"	f	class:Config
GetEnergy	build/src/Config.cpp	/^double Config::GetEnergy( std::string key )$/;"	f	class:Config
GetEnergy	build/src/Config.cpp	/^void Config::GetEnergy( std::string key, double& value )$/;"	f	class:Config
GetFileName	build/src/Config.cpp	/^std::string Config::GetFileName( )$/;"	f	class:Config
GetHooks	build/src/Config.cpp	/^std::vector<std::string>& Config::GetHooks( )$/;"	f	class:Config
GetSimInterface	build/src/Config.cpp	/^SimInterface *Config::GetSimInterface( )$/;"	f	class:Config
GetString	build/src/Config.cpp	/^std::string Config::GetString( std::string key )$/;"	f	class:Config
GetString	build/src/Config.cpp	/^void Config::GetString( std::string key, std::string& value )$/;"	f	class:Config
GetValue	build/src/Config.cpp	/^int Config::GetValue( std::string key )$/;"	f	class:Config
GetValue	build/src/Config.cpp	/^void Config::GetValue( std::string key, int& value )$/;"	f	class:Config
GetValueUL	build/src/Config.cpp	/^uint64_t Config::GetValueUL( std::string key )$/;"	f	class:Config
GetValueUL	build/src/Config.cpp	/^void Config::GetValueUL( std::string key, uint64_t& value )$/;"	f	class:Config
KeyExists	build/src/Config.cpp	/^bool Config::KeyExists( std::string key )$/;"	f	class:Config
Print	build/src/Config.cpp	/^void Config::Print( )$/;"	f	class:Config
Read	build/src/Config.cpp	/^void Config::Read( std::string filename )$/;"	f	class:Config
SetBool	build/src/Config.cpp	/^void Config::SetBool( std::string key, bool value )$/;"	f	class:Config
SetDebugLog	build/src/Config.cpp	/^void Config::SetDebugLog( )$/;"	f	class:Config
SetEnergy	build/src/Config.cpp	/^void Config::SetEnergy( std::string key, std::string energy )$/;"	f	class:Config
SetSimInterface	build/src/Config.cpp	/^void Config::SetSimInterface( SimInterface *ptr )$/;"	f	class:Config
SetString	build/src/Config.cpp	/^void Config::SetString( std::string key, std::string value )$/;"	f	class:Config
SetValue	build/src/Config.cpp	/^void Config::SetValue( std::string key, std::string value )$/;"	f	class:Config
~Config	build/src/Config.cpp	/^Config::~Config( )$/;"	f	class:Config
Cycle	build/src/DataEncoder.cpp	/^void DataEncoder::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:DataEncoder
DataEncoder	build/src/DataEncoder.cpp	/^DataEncoder::DataEncoder( )$/;"	f	class:DataEncoder
Read	build/src/DataEncoder.cpp	/^ncycle_t DataEncoder::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:DataEncoder
SetConfig	build/src/DataEncoder.cpp	/^void DataEncoder::SetConfig( Config* \/*conf*\/, bool \/*createChildren*\/ )$/;"	f	class:DataEncoder
Write	build/src/DataEncoder.cpp	/^ncycle_t DataEncoder::Write( NVMainRequest* \/*request*\/ )$/;"	f	class:DataEncoder
~DataEncoder	build/src/DataEncoder.cpp	/^DataEncoder::~DataEncoder( )$/;"	f	class:DataEncoder
Cycle	build/src/EnduranceModel.cpp	/^void EnduranceModel::Cycle( ncycle_t )$/;"	f	class:EnduranceModel
DecrementLife	build/src/EnduranceModel.cpp	/^bool EnduranceModel::DecrementLife( uint64_t addr )$/;"	f	class:EnduranceModel
EnduranceModel	build/src/EnduranceModel.cpp	/^EnduranceModel::EnduranceModel( )$/;"	f	class:EnduranceModel
GetAverageLife	build/src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetAverageLife( )$/;"	f	class:EnduranceModel
GetGranularity	build/src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetGranularity( )$/;"	f	class:EnduranceModel
GetWorstLife	build/src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetWorstLife( )$/;"	f	class:EnduranceModel
IsDead	build/src/EnduranceModel.cpp	/^bool EnduranceModel::IsDead( uint64_t addr )$/;"	f	class:EnduranceModel
SetConfig	build/src/EnduranceModel.cpp	/^void EnduranceModel::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:EnduranceModel
SetGranularity	build/src/EnduranceModel.cpp	/^void EnduranceModel::SetGranularity( uint64_t bits )$/;"	f	class:EnduranceModel
AddSystem	build/src/EventQueue.cpp	/^void GlobalEventQueue::AddSystem( NVMain *subSystem, Config *config )$/;"	f	class:GlobalEventQueue
Cycle	build/src/EventQueue.cpp	/^void GlobalEventQueue::Cycle( ncycle_t steps )$/;"	f	class:GlobalEventQueue
EventQueue	build/src/EventQueue.cpp	/^EventQueue::EventQueue( )$/;"	f	class:EventQueue
FindCallback	build/src/EventQueue.cpp	/^Event *EventQueue::FindCallback( NVMObject *recipient, CallbackPtr method, ncycle_t when, void *data, int priority ) const$/;"	f	class:EventQueue
FindEvent	build/src/EventQueue.cpp	/^Event *EventQueue::FindEvent( EventType type, NVMObject *recipient, NVMainRequest *req, ncycle_t when ) const$/;"	f	class:EventQueue
FindEvent	build/src/EventQueue.cpp	/^Event *EventQueue::FindEvent( EventType type, NVMObject_hook *recipient, NVMainRequest *req, ncycle_t when ) const$/;"	f	class:EventQueue
GetCurrentCycle	build/src/EventQueue.cpp	/^ncycle_t EventQueue::GetCurrentCycle( )$/;"	f	class:EventQueue
GetCurrentCycle	build/src/EventQueue.cpp	/^ncycle_t GlobalEventQueue::GetCurrentCycle( )$/;"	f	class:GlobalEventQueue
GetFrequency	build/src/EventQueue.cpp	/^double EventQueue::GetFrequency( )$/;"	f	class:EventQueue
GetFrequency	build/src/EventQueue.cpp	/^double GlobalEventQueue::GetFrequency( )$/;"	f	class:GlobalEventQueue
GetNextEvent	build/src/EventQueue.cpp	/^ncycle_t EventQueue::GetNextEvent( )$/;"	f	class:EventQueue
GetNextEvent	build/src/EventQueue.cpp	/^ncycle_t GlobalEventQueue::GetNextEvent( EventQueue **eq )$/;"	f	class:GlobalEventQueue
GlobalEventQueue	build/src/EventQueue.cpp	/^GlobalEventQueue::GlobalEventQueue( )$/;"	f	class:GlobalEventQueue
InsertCallback	build/src/EventQueue.cpp	/^void EventQueue::InsertCallback( NVMObject *recipient, CallbackPtr method,$/;"	f	class:EventQueue
InsertEvent	build/src/EventQueue.cpp	/^void EventQueue::InsertEvent( Event *event, ncycle_t when, int priority )$/;"	f	class:EventQueue
InsertEvent	build/src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject *recipient, NVMainRequest *req, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	build/src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject *recipient, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	build/src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject_hook *recipient, NVMainRequest *req, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	build/src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject_hook *recipient, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
Loop	build/src/EventQueue.cpp	/^void EventQueue::Loop( )$/;"	f	class:EventQueue
Loop	build/src/EventQueue.cpp	/^void EventQueue::Loop( ncycle_t steps )$/;"	f	class:EventQueue
Process	build/src/EventQueue.cpp	/^void EventQueue::Process( )$/;"	f	class:EventQueue
RemoveEvent	build/src/EventQueue.cpp	/^bool EventQueue::RemoveEvent( Event *event, ncycle_t when )$/;"	f	class:EventQueue
SetCurrentCycle	build/src/EventQueue.cpp	/^void EventQueue::SetCurrentCycle( ncycle_t curCycle )$/;"	f	class:EventQueue
SetFrequency	build/src/EventQueue.cpp	/^void EventQueue::SetFrequency( double freq )$/;"	f	class:EventQueue
SetFrequency	build/src/EventQueue.cpp	/^void GlobalEventQueue::SetFrequency( double freq )$/;"	f	class:GlobalEventQueue
SetRecipient	build/src/EventQueue.cpp	/^void Event::SetRecipient( NVMObject *r )$/;"	f	class:Event
Sync	build/src/EventQueue.cpp	/^void GlobalEventQueue::Sync( )$/;"	f	class:GlobalEventQueue
~EventQueue	build/src/EventQueue.cpp	/^EventQueue::~EventQueue( )$/;"	f	class:EventQueue
~GlobalEventQueue	build/src/EventQueue.cpp	/^GlobalEventQueue::~GlobalEventQueue( )$/;"	f	class:GlobalEventQueue
CalculateStats	build/src/MemoryController.cpp	/^void MemoryController::CalculateStats( )$/;"	f	class:MemoryController
CleanupCallback	build/src/MemoryController.cpp	/^void MemoryController::CleanupCallback( void * \/*data*\/ )$/;"	f	class:MemoryController
CommandQueueCallback	build/src/MemoryController.cpp	/^void MemoryController::CommandQueueCallback( void * \/*data*\/ )$/;"	f	class:MemoryController
Cycle	build/src/MemoryController.cpp	/^void MemoryController::Cycle( ncycle_t steps )$/;"	f	class:MemoryController
CycleCommandQueues	build/src/MemoryController.cpp	/^void MemoryController::CycleCommandQueues( )$/;"	f	class:MemoryController
DecrementRefreshCounter	build/src/MemoryController.cpp	/^void MemoryController::DecrementRefreshCounter( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
EffectivelyEmpty	build/src/MemoryController.cpp	/^bool MemoryController::EffectivelyEmpty( const ncounter_t& queueId )$/;"	f	class:MemoryController
Enqueue	build/src/MemoryController.cpp	/^void MemoryController::Enqueue( ncounter_t queueNum, NVMainRequest *request )$/;"	f	class:MemoryController
FindCachedAddress	build/src/MemoryController.cpp	/^bool MemoryController::FindCachedAddress( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
FindClosedBankRequest	build/src/MemoryController.cpp	/^bool MemoryController::FindClosedBankRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindOldestReadyRequest	build/src/MemoryController.cpp	/^bool MemoryController::FindOldestReadyRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindRowBufferHit	build/src/MemoryController.cpp	/^bool MemoryController::FindRowBufferHit( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindStarvedRequest	build/src/MemoryController.cpp	/^bool MemoryController::FindStarvedRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindWriteStalledRead	build/src/MemoryController.cpp	/^bool MemoryController::FindWriteStalledRead( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindWriteStalledRead	build/src/MemoryController.cpp	/^bool MemoryController::FindWriteStalledRead( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
GetCommandQueueId	build/src/MemoryController.cpp	/^ncounter_t MemoryController::GetCommandQueueId( NVMAddress addr )$/;"	f	class:MemoryController
GetConfig	build/src/MemoryController.cpp	/^Config *MemoryController::GetConfig( )$/;"	f	class:MemoryController
GetID	build/src/MemoryController.cpp	/^unsigned int MemoryController::GetID( )$/;"	f	class:MemoryController
HandleLowPower	build/src/MemoryController.cpp	/^void MemoryController::HandleLowPower( )$/;"	f	class:MemoryController
HandleRefresh	build/src/MemoryController.cpp	/^bool MemoryController::HandleRefresh( )$/;"	f	class:MemoryController
IncrementRefreshCounter	build/src/MemoryController.cpp	/^void MemoryController::IncrementRefreshCounter( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
InitQueues	build/src/MemoryController.cpp	/^void MemoryController::InitQueues( unsigned int numQueues )$/;"	f	class:MemoryController
IsIssuable	build/src/MemoryController.cpp	/^bool MemoryController::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:MemoryController
IsLastRequest	build/src/MemoryController.cpp	/^bool MemoryController::IsLastRequest( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
IsRefreshBankQueueEmpty	build/src/MemoryController.cpp	/^bool MemoryController::IsRefreshBankQueueEmpty( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
IssueMemoryCommands	build/src/MemoryController.cpp	/^bool MemoryController::IssueMemoryCommands( NVMainRequest *req )$/;"	f	class:MemoryController
MakeActivateRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeActivateRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakeActivateRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeActivateRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakeCachedRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeCachedRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakeImplicitPrechargeRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeImplicitPrechargeRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePowerdownRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePowerdownRequest( OpType pdOp,$/;"	f	class:MemoryController
MakePowerupRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePowerupRequest( const ncounter_t rank )$/;"	f	class:MemoryController
MakePrechargeAllRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeAllRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePrechargeAllRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeAllRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakePrechargeRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePrechargeRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakeRefreshRequest	build/src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeRefreshRequest( const ncounter_t row,$/;"	f	class:MemoryController
MemoryController	build/src/MemoryController.cpp	/^MemoryController::MemoryController( )$/;"	f	class:MemoryController
MoveCurrentQueue	build/src/MemoryController.cpp	/^void MemoryController::MoveCurrentQueue( )$/;"	f	class:MemoryController
NeedRefresh	build/src/MemoryController.cpp	/^bool MemoryController::NeedRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
NextIssuable	build/src/MemoryController.cpp	/^ncycle_t MemoryController::NextIssuable( NVMainRequest * \/*request*\/ )$/;"	f	class:MemoryController
PowerDown	build/src/MemoryController.cpp	/^void MemoryController::PowerDown( const ncounter_t& rankId )$/;"	f	class:MemoryController
PowerUp	build/src/MemoryController.cpp	/^void MemoryController::PowerUp( const ncounter_t& rankId )$/;"	f	class:MemoryController
Prequeue	build/src/MemoryController.cpp	/^void MemoryController::Prequeue( ncounter_t queueNum, NVMainRequest *request )$/;"	f	class:MemoryController
ProcessRefreshPulse	build/src/MemoryController.cpp	/^void MemoryController::ProcessRefreshPulse( NVMainRequest* refresh )$/;"	f	class:MemoryController
RankQueueEmpty	build/src/MemoryController.cpp	/^bool MemoryController::RankQueueEmpty( const ncounter_t& rankId )$/;"	f	class:MemoryController
RefreshCallback	build/src/MemoryController.cpp	/^void MemoryController::RefreshCallback( void *data )$/;"	f	class:MemoryController
RegisterStats	build/src/MemoryController.cpp	/^void MemoryController::RegisterStats( )$/;"	f	class:MemoryController
RequestComplete	build/src/MemoryController.cpp	/^bool MemoryController::RequestComplete( NVMainRequest *request )$/;"	f	class:MemoryController
ResetRefresh	build/src/MemoryController.cpp	/^void MemoryController::ResetRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
ResetRefreshQueued	build/src/MemoryController.cpp	/^void MemoryController::ResetRefreshQueued( const ncounter_t bank, const ncounter_t rank )$/;"	f	class:MemoryController
ScheduleCommandWake	build/src/MemoryController.cpp	/^void MemoryController::ScheduleCommandWake( )$/;"	f	class:MemoryController
SetConfig	build/src/MemoryController.cpp	/^void MemoryController::SetConfig( Config *conf, bool createChildren )$/;"	f	class:MemoryController
SetID	build/src/MemoryController.cpp	/^void MemoryController::SetID( unsigned int id )$/;"	f	class:MemoryController
SetMappingScheme	build/src/MemoryController.cpp	/^void MemoryController::SetMappingScheme( )$/;"	f	class:MemoryController
SetRefresh	build/src/MemoryController.cpp	/^void MemoryController::SetRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
TransactionAvailable	build/src/MemoryController.cpp	/^bool MemoryController::TransactionAvailable( ncounter_t queueId )$/;"	f	class:MemoryController
WasIssued	build/src/MemoryController.cpp	/^bool WasIssued( NVMainRequest *request ) { return (request->flags & NVMainRequest::FLAG_ISSUED); }$/;"	f
operator ()	build/src/MemoryController.cpp	/^bool MemoryController::DummyPredicate::operator() ( NVMainRequest* \/*request*\/ )$/;"	f	class:MemoryController::DummyPredicate
~MemoryController	build/src/MemoryController.cpp	/^MemoryController::~MemoryController( )$/;"	f	class:MemoryController
AddChild	build/src/NVMObject.cpp	/^void NVMObject::AddChild( NVMObject *c )$/;"	f	class:NVMObject
AddHook	build/src/NVMObject.cpp	/^void NVMObject::AddHook( NVMObject *hook )$/;"	f	class:NVMObject
AddHookUnique	build/src/NVMObject.cpp	/^void NVMObject::AddHookUnique( std::vector<NVMObject *>& list, NVMObject *hook )$/;"	f	class:NVMObject
CalculateStats	build/src/NVMObject.cpp	/^void NVMObject::CalculateStats( )$/;"	f	class:NVMObject
CalculateStats	build/src/NVMObject.cpp	/^void NVMObject_hook::CalculateStats( )$/;"	f	class:NVMObject_hook
Callback	build/src/NVMObject.cpp	/^void NVMObject::Callback( void * \/*data*\/ )$/;"	f	class:NVMObject
Callback	build/src/NVMObject.cpp	/^void NVMObject_hook::Callback( void *data )$/;"	f	class:NVMObject_hook
CreateCheckpoint	build/src/NVMObject.cpp	/^void NVMObject::CreateCheckpoint( std::string dir )$/;"	f	class:NVMObject
Cycle	build/src/NVMObject.cpp	/^void NVMObject_hook::Cycle( ncycle_t steps )$/;"	f	class:NVMObject_hook
Drain	build/src/NVMObject.cpp	/^bool NVMObject::Drain( )$/;"	f	class:NVMObject
Drain	build/src/NVMObject.cpp	/^bool NVMObject_hook::Drain( )$/;"	f	class:NVMObject_hook
GetChild	build/src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( NVMainRequest *req )$/;"	f	class:NVMObject
GetChild	build/src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( ncounter_t child )$/;"	f	class:NVMObject
GetChild	build/src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( void )$/;"	f	class:NVMObject
GetChildCount	build/src/NVMObject.cpp	/^ncounter_t NVMObject::GetChildCount( )$/;"	f	class:NVMObject
GetChildId	build/src/NVMObject.cpp	/^ncounter_t NVMObject::GetChildId( NVMObject *c )$/;"	f	class:NVMObject
GetChildren	build/src/NVMObject.cpp	/^std::vector<NVMObject_hook *>& NVMObject::GetChildren( )$/;"	f	class:NVMObject
GetCurrentHookType	build/src/NVMObject.cpp	/^HookType NVMObject::GetCurrentHookType( )$/;"	f	class:NVMObject
GetDecoder	build/src/NVMObject.cpp	/^AddressTranslator *NVMObject::GetDecoder( )$/;"	f	class:NVMObject
GetEventQueue	build/src/NVMObject.cpp	/^EventQueue *NVMObject::GetEventQueue( )$/;"	f	class:NVMObject
GetGlobalEventQueue	build/src/NVMObject.cpp	/^GlobalEventQueue *NVMObject::GetGlobalEventQueue( )$/;"	f	class:NVMObject
GetHookType	build/src/NVMObject.cpp	/^HookType NVMObject::GetHookType( )$/;"	f	class:NVMObject
GetHooks	build/src/NVMObject.cpp	/^std::vector<NVMObject *>& NVMObject::GetHooks( HookType h )$/;"	f	class:NVMObject
GetParams	build/src/NVMObject.cpp	/^Params *NVMObject::GetParams( )$/;"	f	class:NVMObject
GetParent	build/src/NVMObject.cpp	/^NVMObject_hook* NVMObject::GetParent( )$/;"	f	class:NVMObject
GetStats	build/src/NVMObject.cpp	/^Stats *NVMObject::GetStats( )$/;"	f	class:NVMObject
GetStats	build/src/NVMObject.cpp	/^Stats *NVMObject_hook::GetStats( )$/;"	f	class:NVMObject_hook
GetTagGenerator	build/src/NVMObject.cpp	/^TagGenerator *NVMObject::GetTagGenerator( )$/;"	f	class:NVMObject
GetTrampoline	build/src/NVMObject.cpp	/^NVMObject *NVMObject_hook::GetTrampoline( )$/;"	f	class:NVMObject_hook
Idle	build/src/NVMObject.cpp	/^bool NVMObject::Idle( )$/;"	f	class:NVMObject
Idle	build/src/NVMObject.cpp	/^bool NVMObject_hook::Idle( )$/;"	f	class:NVMObject_hook
Init	build/src/NVMObject.cpp	/^void NVMObject::Init( Config * )$/;"	f	class:NVMObject
IsIssuable	build/src/NVMObject.cpp	/^bool NVMObject::IsIssuable( NVMainRequest *, FailReason * )$/;"	f	class:NVMObject
IsIssuable	build/src/NVMObject.cpp	/^bool NVMObject_hook::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:NVMObject_hook
IssueAtomic	build/src/NVMObject.cpp	/^bool NVMObject::IssueAtomic( NVMainRequest * )$/;"	f	class:NVMObject
IssueAtomic	build/src/NVMObject.cpp	/^bool NVMObject_hook::IssueAtomic( NVMainRequest *req )$/;"	f	class:NVMObject_hook
IssueCommand	build/src/NVMObject.cpp	/^bool NVMObject::IssueCommand( NVMainRequest * )$/;"	f	class:NVMObject
IssueCommand	build/src/NVMObject.cpp	/^bool NVMObject_hook::IssueCommand( NVMainRequest *req )$/;"	f	class:NVMObject_hook
IssueFunctional	build/src/NVMObject.cpp	/^bool NVMObject::IssueFunctional( NVMainRequest * )$/;"	f	class:NVMObject
IssueFunctional	build/src/NVMObject.cpp	/^bool NVMObject_hook::IssueFunctional( NVMainRequest *req )$/;"	f	class:NVMObject_hook
MAX	build/src/NVMObject.cpp	/^ncycle_t NVMObject::MAX( const ncycle_t a, const ncycle_t b )$/;"	f	class:NVMObject
MIN	build/src/NVMObject.cpp	/^ncycle_t NVMObject::MIN( const ncycle_t a, const ncycle_t b )$/;"	f	class:NVMObject
NVMObject	build/src/NVMObject.cpp	/^NVMObject::NVMObject( )$/;"	f	class:NVMObject
NVMObject_hook	build/src/NVMObject.cpp	/^NVMObject_hook::NVMObject_hook( NVMObject *t )$/;"	f	class:NVMObject_hook
NextIssuable	build/src/NVMObject.cpp	/^ncycle_t NVMObject::NextIssuable( NVMainRequest *req )$/;"	f	class:NVMObject
NextIssuable	build/src/NVMObject.cpp	/^ncycle_t NVMObject_hook::NextIssuable( NVMainRequest *req )$/;"	f	class:NVMObject_hook
Notify	build/src/NVMObject.cpp	/^void NVMObject::Notify( NVMainRequest * )$/;"	f	class:NVMObject
Notify	build/src/NVMObject.cpp	/^void NVMObject_hook::Notify( NVMainRequest *req )$/;"	f	class:NVMObject_hook
PrintHierarchy	build/src/NVMObject.cpp	/^void NVMObject::PrintHierarchy( int depth )$/;"	f	class:NVMObject
PrintHierarchy	build/src/NVMObject.cpp	/^void NVMObject_hook::PrintHierarchy( int depth )$/;"	f	class:NVMObject_hook
RegisterStats	build/src/NVMObject.cpp	/^void NVMObject::RegisterStats( )$/;"	f	class:NVMObject
RegisterStats	build/src/NVMObject.cpp	/^void NVMObject_hook::RegisterStats( )$/;"	f	class:NVMObject_hook
RequestComplete	build/src/NVMObject.cpp	/^bool NVMObject::RequestComplete( NVMainRequest *request )$/;"	f	class:NVMObject
RequestComplete	build/src/NVMObject.cpp	/^bool NVMObject_hook::RequestComplete( NVMainRequest *req )$/;"	f	class:NVMObject_hook
ResetStats	build/src/NVMObject.cpp	/^void NVMObject::ResetStats( )$/;"	f	class:NVMObject
ResetStats	build/src/NVMObject.cpp	/^void NVMObject_hook::ResetStats( )$/;"	f	class:NVMObject_hook
RestoreCheckpoint	build/src/NVMObject.cpp	/^void NVMObject::RestoreCheckpoint( std::string dir )$/;"	f	class:NVMObject
SetCurrentHookType	build/src/NVMObject.cpp	/^void NVMObject::SetCurrentHookType( HookType h )$/;"	f	class:NVMObject
SetDebugName	build/src/NVMObject.cpp	/^void NVMObject::SetDebugName( std::string dn, Config *config )$/;"	f	class:NVMObject
SetDecoder	build/src/NVMObject.cpp	/^void NVMObject::SetDecoder( AddressTranslator *at )$/;"	f	class:NVMObject
SetEventQueue	build/src/NVMObject.cpp	/^void NVMObject::SetEventQueue( EventQueue *eq )$/;"	f	class:NVMObject
SetGlobalEventQueue	build/src/NVMObject.cpp	/^void NVMObject::SetGlobalEventQueue( GlobalEventQueue *geq )$/;"	f	class:NVMObject
SetHookType	build/src/NVMObject.cpp	/^void NVMObject::SetHookType( HookType h )$/;"	f	class:NVMObject
SetParams	build/src/NVMObject.cpp	/^void NVMObject::SetParams( Params *params )$/;"	f	class:NVMObject
SetParent	build/src/NVMObject.cpp	/^void NVMObject::SetParent( NVMObject *p )$/;"	f	class:NVMObject
SetStats	build/src/NVMObject.cpp	/^void NVMObject::SetStats( Stats *s )$/;"	f	class:NVMObject
SetStats	build/src/NVMObject.cpp	/^void NVMObject_hook::SetStats( Stats *s )$/;"	f	class:NVMObject_hook
SetTagGenerator	build/src/NVMObject.cpp	/^void NVMObject::SetTagGenerator( TagGenerator *tg )$/;"	f	class:NVMObject
StatName	build/src/NVMObject.cpp	/^std::string NVMObject::StatName( )$/;"	f	class:NVMObject
StatName	build/src/NVMObject.cpp	/^std::string NVMObject_hook::StatName( )$/;"	f	class:NVMObject_hook
StatName	build/src/NVMObject.cpp	/^void NVMObject::StatName( std::string name )$/;"	f	class:NVMObject
StatName	build/src/NVMObject.cpp	/^void NVMObject_hook::StatName( std::string name )$/;"	f	class:NVMObject_hook
UnsetParent	build/src/NVMObject.cpp	/^void NVMObject::UnsetParent( )$/;"	f	class:NVMObject
_FindChild	build/src/NVMObject.cpp	/^NVMObject *NVMObject::_FindChild( NVMainRequest *req, const char *childClass )$/;"	f	class:NVMObject
~NVMObject	build/src/NVMObject.cpp	/^NVMObject::~NVMObject( )$/;"	f	class:NVMObject
~NVMObject_hook	build/src/NVMObject.cpp	/^NVMObject_hook::~NVMObject_hook( )$/;"	f	class:NVMObject_hook
ConvertTiming	build/src/Params.cpp	/^ncycle_t Params::ConvertTiming( Config *conf, std::string param )$/;"	f	class:Params
ConvertTiming	build/src/Params.cpp	/^void Params::ConvertTiming( Config *conf, std::string param, ncycle_t& value )$/;"	f	class:Params
Params	build/src/Params.cpp	/^Params::Params( )$/;"	f	class:Params
SetParams	build/src/Params.cpp	/^void Params::SetParams( Config *c )$/;"	f	class:Params
~Params	build/src/Params.cpp	/^Params::~Params( )$/;"	f	class:Params
DoPrefetch	build/src/Prefetcher.cpp	/^bool Prefetcher::DoPrefetch( NVMainRequest * \/*triggerOp*\/, $/;"	f	class:Prefetcher
NotifyAccess	build/src/Prefetcher.cpp	/^bool Prefetcher::NotifyAccess( NVMainRequest * \/*accessOp*\/, $/;"	f	class:Prefetcher
Idle	build/src/Rank.cpp	/^bool Rank::Idle( )$/;"	f	class:Rank
GetConfig	build/src/SimInterface.cpp	/^Config *SimInterface::GetConfig( )$/;"	f	class:SimInterface
GetDataAtAddress	build/src/SimInterface.cpp	/^int SimInterface::GetDataAtAddress( uint64_t address, NVMDataBlock *data )$/;"	f	class:SimInterface
SetConfig	build/src/SimInterface.cpp	/^void SimInterface::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:SimInterface
SetDataAtAddress	build/src/SimInterface.cpp	/^void SimInterface::SetDataAtAddress( uint64_t address, NVMDataBlock& data )$/;"	f	class:SimInterface
Print	build/src/Stats.cpp	/^void StatBase::Print( std::ostream& stream, ncounter_t psInterval )$/;"	f	class:StatBase
PrintAll	build/src/Stats.cpp	/^void Stats::PrintAll( std::ostream& stream )$/;"	f	class:Stats
Reset	build/src/Stats.cpp	/^void StatBase::Reset( )$/;"	f	class:StatBase
ResetAll	build/src/Stats.cpp	/^void Stats::ResetAll( )$/;"	f	class:Stats
Stats	build/src/Stats.cpp	/^Stats::Stats( )$/;"	f	class:Stats
addStat	build/src/Stats.cpp	/^void Stats::addStat( StatType stat, StatType resetValue, std::string statType, size_t typeSize, std::string name, std::string units )$/;"	f	class:Stats
getStat	build/src/Stats.cpp	/^StatType Stats::getStat( std::string name )$/;"	f	class:Stats
removeStat	build/src/Stats.cpp	/^void Stats::removeStat( StatType stat )$/;"	f	class:Stats
~Stats	build/src/Stats.cpp	/^Stats::~Stats( )$/;"	f	class:Stats
Activate	build/src/SubArray.cpp	/^bool SubArray::Activate( NVMainRequest *request )$/;"	f	class:SubArray
BetweenWriteIterations	build/src/SubArray.cpp	/^bool SubArray::BetweenWriteIterations( )$/;"	f	class:SubArray
CalculateStats	build/src/SubArray.cpp	/^void SubArray::CalculateStats( )$/;"	f	class:SubArray
CheckWritePausing	build/src/SubArray.cpp	/^void SubArray::CheckWritePausing( )$/;"	f	class:SubArray
Count32MLC1	build/src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::Count32MLC1( uint32_t data )$/;"	f	class:SubArray
Count32MLC2	build/src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::Count32MLC2( uint8_t value, uint32_t data )$/;"	f	class:SubArray
CountBitsMLC1	build/src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::CountBitsMLC1( uint8_t value, uint32_t *data, ncounter_t words )$/;"	f	class:SubArray
CountBitsMLC2	build/src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::CountBitsMLC2( uint8_t value, uint32_t *data, ncounter_t words )$/;"	f	class:SubArray
Cycle	build/src/SubArray.cpp	/^void SubArray::Cycle( ncycle_t )$/;"	f	class:SubArray
GetId	build/src/SubArray.cpp	/^ncounter_t SubArray::GetId( )$/;"	f	class:SubArray
GetName	build/src/SubArray.cpp	/^std::string SubArray::GetName( )$/;"	f	class:SubArray
GetState	build/src/SubArray.cpp	/^SubArrayState SubArray::GetState( ) $/;"	f	class:SubArray
Idle	build/src/SubArray.cpp	/^bool SubArray::Idle( )$/;"	f	class:SubArray
IsIssuable	build/src/SubArray.cpp	/^bool SubArray::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:SubArray
IssueCommand	build/src/SubArray.cpp	/^bool SubArray::IssueCommand( NVMainRequest *req )$/;"	f	class:SubArray
NextIssuable	build/src/SubArray.cpp	/^ncycle_t SubArray::NextIssuable( NVMainRequest *request )$/;"	f	class:SubArray
Precharge	build/src/SubArray.cpp	/^bool SubArray::Precharge( NVMainRequest *request )$/;"	f	class:SubArray
Read	build/src/SubArray.cpp	/^bool SubArray::Read( NVMainRequest *request )$/;"	f	class:SubArray
Refresh	build/src/SubArray.cpp	/^bool SubArray::Refresh( NVMainRequest* request )$/;"	f	class:SubArray
RegisterStats	build/src/SubArray.cpp	/^void SubArray::RegisterStats( )$/;"	f	class:SubArray
RequestComplete	build/src/SubArray.cpp	/^bool SubArray::RequestComplete( NVMainRequest *req )$/;"	f	class:SubArray
SetConfig	build/src/SubArray.cpp	/^void SubArray::SetConfig( Config *c, bool createChildren )$/;"	f	class:SubArray
SetId	build/src/SubArray.cpp	/^void SubArray::SetId( ncounter_t id )$/;"	f	class:SubArray
SetName	build/src/SubArray.cpp	/^void SubArray::SetName( std::string )$/;"	f	class:SubArray
SubArray	build/src/SubArray.cpp	/^SubArray::SubArray( )$/;"	f	class:SubArray
UpdateEndurance	build/src/SubArray.cpp	/^ncycle_t SubArray::UpdateEndurance( NVMainRequest *request )$/;"	f	class:SubArray
Write	build/src/SubArray.cpp	/^bool SubArray::Write( NVMainRequest *request )$/;"	f	class:SubArray
WriteCellData	build/src/SubArray.cpp	49;"	d	file:
WriteCellData2	build/src/SubArray.cpp	/^ncycle_t SubArray::WriteCellData2( NVMainRequest *request )$/;"	f	class:SubArray
~SubArray	build/src/SubArray.cpp	/^SubArray::~SubArray( )$/;"	f	class:SubArray
CreateTag	build/src/TagGenerator.cpp	/^int TagGenerator::CreateTag( std::string name )$/;"	f	class:TagGenerator
GetTagId	build/src/TagGenerator.cpp	/^int TagGenerator::GetTagId( std::string name )$/;"	f	class:TagGenerator
GetTagName	build/src/TagGenerator.cpp	/^std::string TagGenerator::GetTagName( int tag )$/;"	f	class:TagGenerator
TagGenerator	build/src/TagGenerator.cpp	/^TagGenerator::TagGenerator( int startId )$/;"	f	class:TagGenerator
~TagGenerator	build/src/TagGenerator.cpp	/^TagGenerator::~TagGenerator( )$/;"	f	class:TagGenerator
GetBitWidths	build/src/TranslationMethod.cpp	/^void TranslationMethod::GetBitWidths( unsigned int *rowBits, unsigned int *colBits, unsigned int *bankBits,$/;"	f	class:TranslationMethod
GetCount	build/src/TranslationMethod.cpp	/^void TranslationMethod::GetCount( uint64_t *rows, uint64_t *cols, uint64_t *banks, $/;"	f	class:TranslationMethod
GetOrder	build/src/TranslationMethod.cpp	/^void TranslationMethod::GetOrder( int *row, int *col, int *bank, int *rank, int *channel, int *subarray )$/;"	f	class:TranslationMethod
SetAddressMappingScheme	build/src/TranslationMethod.cpp	/^void TranslationMethod::SetAddressMappingScheme( std::string scheme )$/;"	f	class:TranslationMethod
SetBitWidths	build/src/TranslationMethod.cpp	/^void TranslationMethod::SetBitWidths( unsigned int rowBits, unsigned int colBits, unsigned int bankBits,$/;"	f	class:TranslationMethod
SetCount	build/src/TranslationMethod.cpp	/^void TranslationMethod::SetCount( uint64_t rows, uint64_t cols, uint64_t banks, $/;"	f	class:TranslationMethod
SetOrder	build/src/TranslationMethod.cpp	/^void TranslationMethod::SetOrder( int row, int col, int bank, int rank, int channel, int subarray )$/;"	f	class:TranslationMethod
TranslationMethod	build/src/TranslationMethod.cpp	/^TranslationMethod::TranslationMethod( )$/;"	f	class:TranslationMethod
~TranslationMethod	build/src/TranslationMethod.cpp	/^TranslationMethod::~TranslationMethod( )$/;"	f	class:TranslationMethod
GetNextAccess	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^bool NVMainTraceReader::GetNextAccess( TraceLine *nextAccess )$/;"	f	class:NVMainTraceReader
GetNextNAccesses	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^int NVMainTraceReader::GetNextNAccesses( unsigned int N, $/;"	f	class:NVMainTraceReader
GetTraceFile	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^std::string NVMainTraceReader::GetTraceFile( )$/;"	f	class:NVMainTraceReader
NVMainTraceReader	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^NVMainTraceReader::NVMainTraceReader( )$/;"	f	class:NVMainTraceReader
SetTraceFile	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^void NVMainTraceReader::SetTraceFile( std::string file )$/;"	f	class:NVMainTraceReader
~NVMainTraceReader	build/traceReader/NVMainTrace/NVMainTraceReader.cpp	/^NVMainTraceReader::~NVMainTraceReader( )$/;"	f	class:NVMainTraceReader
GetNextAccess	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^bool RubyTraceReader::GetNextAccess( TraceLine *nextAccess )$/;"	f	class:RubyTraceReader
GetNextNAccesses	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^int RubyTraceReader::GetNextNAccesses( unsigned int N, $/;"	f	class:RubyTraceReader
GetTraceFile	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^std::string RubyTraceReader::GetTraceFile( )$/;"	f	class:RubyTraceReader
RubyTraceReader	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^RubyTraceReader::RubyTraceReader( )$/;"	f	class:RubyTraceReader
SetTraceFile	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^void RubyTraceReader::SetTraceFile( std::string file )$/;"	f	class:RubyTraceReader
~RubyTraceReader	build/traceReader/RubyTrace/RubyTraceReader.cpp	/^RubyTraceReader::~RubyTraceReader( )$/;"	f	class:RubyTraceReader
GetAddress	build/traceReader/TraceLine.cpp	/^NVMAddress& TraceLine::GetAddress( )$/;"	f	class:TraceLine
GetCycle	build/traceReader/TraceLine.cpp	/^ncycle_t TraceLine::GetCycle( ) $/;"	f	class:TraceLine
GetData	build/traceReader/TraceLine.cpp	/^NVMDataBlock& TraceLine::GetData( )$/;"	f	class:TraceLine
GetOldData	build/traceReader/TraceLine.cpp	/^NVMDataBlock& TraceLine::GetOldData( )$/;"	f	class:TraceLine
GetOperation	build/traceReader/TraceLine.cpp	/^OpType TraceLine::GetOperation( )$/;"	f	class:TraceLine
GetThreadId	build/traceReader/TraceLine.cpp	/^ncounters_t TraceLine::GetThreadId( )$/;"	f	class:TraceLine
SetLine	build/traceReader/TraceLine.cpp	/^void TraceLine::SetLine( NVMAddress& addr, OpType op, ncycle_t cy, NVMDataBlock& data, NVMDataBlock& oldData, ncounters_t threadId )$/;"	f	class:TraceLine
TraceLine	build/traceReader/TraceLine.cpp	/^TraceLine::TraceLine( )$/;"	f	class:TraceLine
~TraceLine	build/traceReader/TraceLine.cpp	/^TraceLine::~TraceLine( )$/;"	f	class:TraceLine
CreateNewTraceReader	build/traceReader/TraceReaderFactory.cpp	/^GenericTraceReader *TraceReaderFactory::CreateNewTraceReader( std::string reader )$/;"	f	class:TraceReaderFactory
Cycle	build/traceSim/traceMain.cpp	/^void TraceMain::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:TraceMain
RequestComplete	build/traceSim/traceMain.cpp	/^bool TraceMain::RequestComplete( NVMainRequest* request )$/;"	f	class:TraceMain
RunTrace	build/traceSim/traceMain.cpp	/^int TraceMain::RunTrace( int argc, char *argv[] )$/;"	f	class:TraceMain
TraceMain	build/traceSim/traceMain.cpp	/^TraceMain::TraceMain( )$/;"	f	class:TraceMain
main	build/traceSim/traceMain.cpp	/^int main( int argc, char *argv[] )$/;"	f
~TraceMain	build/traceSim/traceMain.cpp	/^TraceMain::~TraceMain( )$/;"	f	class:TraceMain
DRAMPower2TraceWriter	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^DRAMPower2TraceWriter::DRAMPower2TraceWriter( ) : lastCommand(0)$/;"	f	class:DRAMPower2TraceWriter
GetPerChannelTraces	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::GetPerChannelTraces( )$/;"	f	class:DRAMPower2TraceWriter
GetPerRankTraces	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::GetPerRankTraces( )$/;"	f	class:DRAMPower2TraceWriter
GetTraceFile	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^std::string DRAMPower2TraceWriter::GetTraceFile( )$/;"	f	class:DRAMPower2TraceWriter
Init	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::Init( Config *conf )$/;"	f	class:DRAMPower2TraceWriter
SetNextAccess	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:DRAMPower2TraceWriter
SetTraceFile	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::SetTraceFile( std::string file )$/;"	f	class:DRAMPower2TraceWriter
WriteTraceLine	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:DRAMPower2TraceWriter
~DRAMPower2TraceWriter	build/traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^DRAMPower2TraceWriter::~DRAMPower2TraceWriter( )$/;"	f	class:DRAMPower2TraceWriter
GenericTraceWriter	build/traceWriter/GenericTraceWriter.cpp	/^GenericTraceWriter::GenericTraceWriter( ) : echo_on(false), perChannel(false), perRank(false)$/;"	f	class:GenericTraceWriter
GetEcho	build/traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetEcho( )$/;"	f	class:GenericTraceWriter
GetPerChannelTraces	build/traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetPerChannelTraces( )$/;"	f	class:GenericTraceWriter
GetPerRankTraces	build/traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetPerRankTraces( )$/;"	f	class:GenericTraceWriter
Init	build/traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::Init( Config * \/*conf*\/ )$/;"	f	class:GenericTraceWriter
SetEcho	build/traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetEcho( bool echo )$/;"	f	class:GenericTraceWriter
SetNextNAccesses	build/traceWriter/GenericTraceWriter.cpp	/^int GenericTraceWriter::SetNextNAccesses( unsigned int N, std::vector<TraceLine *> *nextAccesses )$/;"	f	class:GenericTraceWriter
SetPerChannelTraces	build/traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetPerChannelTraces( bool perChannel )$/;"	f	class:GenericTraceWriter
SetPerRankTraces	build/traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetPerRankTraces( bool perRank )$/;"	f	class:GenericTraceWriter
~GenericTraceWriter	build/traceWriter/GenericTraceWriter.cpp	/^GenericTraceWriter::~GenericTraceWriter( )$/;"	f	class:GenericTraceWriter
GetTraceFile	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^std::string NVMainTraceWriter::GetTraceFile( )$/;"	f	class:NVMainTraceWriter
NVMainTraceWriter	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^NVMainTraceWriter::NVMainTraceWriter( )$/;"	f	class:NVMainTraceWriter
SetNextAccess	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^bool NVMainTraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:NVMainTraceWriter
SetTraceFile	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^void NVMainTraceWriter::SetTraceFile( std::string file )$/;"	f	class:NVMainTraceWriter
WriteTraceLine	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^void NVMainTraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:NVMainTraceWriter
~NVMainTraceWriter	build/traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^NVMainTraceWriter::~NVMainTraceWriter( )$/;"	f	class:NVMainTraceWriter
CreateNewTraceWriter	build/traceWriter/TraceWriterFactory.cpp	/^GenericTraceWriter *TraceWriterFactory::CreateNewTraceWriter( std::string writer )$/;"	f	class:TraceWriterFactory
GetPerChannelTraces	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::GetPerChannelTraces( )$/;"	f	class:VerilogTraceWriter
GetPerRankTraces	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::GetPerRankTraces( )$/;"	f	class:VerilogTraceWriter
GetTraceFile	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^std::string VerilogTraceWriter::GetTraceFile( )$/;"	f	class:VerilogTraceWriter
Init	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::Init( Config *conf )$/;"	f	class:VerilogTraceWriter
SetNextAccess	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:VerilogTraceWriter
SetTraceFile	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::SetTraceFile( std::string file )$/;"	f	class:VerilogTraceWriter
VerilogTraceWriter	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^VerilogTraceWriter::VerilogTraceWriter( ) : lastCommand(0)$/;"	f	class:VerilogTraceWriter
WriteTraceLine	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:VerilogTraceWriter
~VerilogTraceWriter	build/traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^VerilogTraceWriter::~VerilogTraceWriter( )$/;"	f	class:VerilogTraceWriter
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
BANK_TIMING	include/FailReasons.h	/^                   BANK_TIMING,$/;"	e	enum:NVM::FailReasons
CLOSED_REFRESH_WAITING	include/FailReasons.h	/^                   CLOSED_REFRESH_WAITING,$/;"	e	enum:NVM::FailReasons
FailReason	include/FailReasons.h	/^    FailReason( ) : reason(UNKNOWN_FAILURE) { }$/;"	f	class:NVM::FailReason
FailReason	include/FailReasons.h	/^class FailReason$/;"	c	namespace:NVM
FailReasons	include/FailReasons.h	/^enum FailReasons { UNKNOWN_FAILURE,$/;"	g	namespace:NVM
NVM	include/FailReasons.h	/^namespace NVM {$/;"	n
OPEN_REFRESH_WAITING	include/FailReasons.h	/^                   OPEN_REFRESH_WAITING,$/;"	e	enum:NVM::FailReasons
RANK_TIMING	include/FailReasons.h	/^                   RANK_TIMING,$/;"	e	enum:NVM::FailReasons
REFRESH_OPEN_FAILURE	include/FailReasons.h	/^                   REFRESH_OPEN_FAILURE,$/;"	e	enum:NVM::FailReasons
SUBARRAY_TIMING	include/FailReasons.h	/^                   SUBARRAY_TIMING,$/;"	e	enum:NVM::FailReasons
UNKNOWN_FAILURE	include/FailReasons.h	/^enum FailReasons { UNKNOWN_FAILURE,$/;"	e	enum:NVM::FailReasons
UNSUPPORTED_COMMAND	include/FailReasons.h	/^                   UNSUPPORTED_COMMAND$/;"	e	enum:NVM::FailReasons
__INCLUDE_FAIL_REASONS_H__	include/FailReasons.h	35;"	d
reason	include/FailReasons.h	/^    FailReasons reason;$/;"	m	class:NVM::FailReason
~FailReason	include/FailReasons.h	/^    ~FailReason( ) { }$/;"	f	class:NVM::FailReason
GetBank	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetBank( )$/;"	f	class:NVMAddress
GetBitAddress	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetBitAddress( )$/;"	f	class:NVMAddress
GetChannel	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetChannel( )$/;"	f	class:NVMAddress
GetCol	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetCol( )$/;"	f	class:NVMAddress
GetPhysicalAddress	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetPhysicalAddress( )$/;"	f	class:NVMAddress
GetRank	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetRank( )$/;"	f	class:NVMAddress
GetRow	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetRow( )$/;"	f	class:NVMAddress
GetSubArray	include/NVMAddress.cpp	/^uint64_t NVMAddress::GetSubArray( )$/;"	f	class:NVMAddress
GetTranslatedAddress	include/NVMAddress.cpp	/^void NVMAddress::GetTranslatedAddress( uint64_t *addrRow, uint64_t *addrCol, uint64_t *addrBank, $/;"	f	class:NVMAddress
HasPhysicalAddress	include/NVMAddress.cpp	/^bool NVMAddress::HasPhysicalAddress( )$/;"	f	class:NVMAddress
IsTranslated	include/NVMAddress.cpp	/^bool NVMAddress::IsTranslated( )$/;"	f	class:NVMAddress
NVMAddress	include/NVMAddress.cpp	/^NVMAddress::NVMAddress( )$/;"	f	class:NVMAddress
NVMAddress	include/NVMAddress.cpp	/^NVMAddress::NVMAddress( uint64_t addrRow, uint64_t addrCol, uint64_t addrBank,$/;"	f	class:NVMAddress
SetBitAddress	include/NVMAddress.cpp	/^void NVMAddress::SetBitAddress( uint8_t bitAddr )$/;"	f	class:NVMAddress
SetPhysicalAddress	include/NVMAddress.cpp	/^void NVMAddress::SetPhysicalAddress( uint64_t pAddress )$/;"	f	class:NVMAddress
SetTranslatedAddress	include/NVMAddress.cpp	/^void NVMAddress::SetTranslatedAddress( uint64_t addrRow, uint64_t addrCol, uint64_t addrBank, $/;"	f	class:NVMAddress
operator =	include/NVMAddress.cpp	/^NVMAddress& NVMAddress::operator=( const NVMAddress& m )$/;"	f	class:NVMAddress
~NVMAddress	include/NVMAddress.cpp	/^NVMAddress::~NVMAddress( )$/;"	f	class:NVMAddress
NVM	include/NVMAddress.h	/^namespace NVM {$/;"	n
NVMAddress	include/NVMAddress.h	/^class NVMAddress$/;"	c	namespace:NVM
__NVMADDRESS_H__	include/NVMAddress.h	35;"	d
bank	include/NVMAddress.h	/^    uint64_t bank;$/;"	m	class:NVM::NVMAddress
bit	include/NVMAddress.h	/^    uint64_t bit;$/;"	m	class:NVM::NVMAddress
channel	include/NVMAddress.h	/^    uint64_t channel;$/;"	m	class:NVM::NVMAddress
col	include/NVMAddress.h	/^    uint64_t col;$/;"	m	class:NVM::NVMAddress
hasPhysicalAddress	include/NVMAddress.h	/^    bool hasPhysicalAddress;$/;"	m	class:NVM::NVMAddress
physicalAddress	include/NVMAddress.h	/^    uint64_t physicalAddress;$/;"	m	class:NVM::NVMAddress
rank	include/NVMAddress.h	/^    uint64_t rank;$/;"	m	class:NVM::NVMAddress
row	include/NVMAddress.h	/^    uint64_t row;$/;"	m	class:NVM::NVMAddress
subarray	include/NVMAddress.h	/^    uint64_t subarray;$/;"	m	class:NVM::NVMAddress
translated	include/NVMAddress.h	/^    bool translated;$/;"	m	class:NVM::NVMAddress
GetByte	include/NVMDataBlock.cpp	/^uint8_t NVMDataBlock::GetByte( uint64_t byte )$/;"	f	class:NVMDataBlock
GetSize	include/NVMDataBlock.cpp	/^uint64_t NVMDataBlock::GetSize( )$/;"	f	class:NVMDataBlock
IsValid	include/NVMDataBlock.cpp	/^bool NVMDataBlock::IsValid( )$/;"	f	class:NVMDataBlock
NVMDataBlock	include/NVMDataBlock.cpp	/^NVMDataBlock::NVMDataBlock( )$/;"	f	class:NVMDataBlock
Print	include/NVMDataBlock.cpp	/^void NVMDataBlock::Print( std::ostream& out ) const$/;"	f	class:NVMDataBlock
SetByte	include/NVMDataBlock.cpp	/^void NVMDataBlock::SetByte( uint64_t byte, uint8_t value )$/;"	f	class:NVMDataBlock
SetSize	include/NVMDataBlock.cpp	/^void NVMDataBlock::SetSize( uint64_t s )$/;"	f	class:NVMDataBlock
SetValid	include/NVMDataBlock.cpp	/^void NVMDataBlock::SetValid( bool valid )$/;"	f	class:NVMDataBlock
operator <<	include/NVMDataBlock.cpp	/^std::ostream& operator<<( std::ostream& out, const NVMDataBlock& obj )$/;"	f
operator =	include/NVMDataBlock.cpp	/^NVMDataBlock& NVMDataBlock::operator=( const NVMDataBlock& m )$/;"	f	class:NVMDataBlock
~NVMDataBlock	include/NVMDataBlock.cpp	/^NVMDataBlock::~NVMDataBlock( )$/;"	f	class:NVMDataBlock
NVM	include/NVMDataBlock.h	/^namespace NVM {$/;"	n
NVMDataBlock	include/NVMDataBlock.h	/^    NVMDataBlock( const NVMDataBlock& ) { }$/;"	f	class:NVM::NVMDataBlock
NVMDataBlock	include/NVMDataBlock.h	/^class NVMDataBlock$/;"	c	namespace:NVM
__NVMDATABLOCK_H__	include/NVMDataBlock.h	35;"	d
isValid	include/NVMDataBlock.h	/^    bool isValid;$/;"	m	class:NVM::NVMDataBlock
rawData	include/NVMDataBlock.h	/^    uint8_t *rawData;$/;"	m	class:NVM::NVMDataBlock
size	include/NVMDataBlock.h	/^    uint64_t size;$/;"	m	class:NVM::NVMDataBlock
GetFilePath	include/NVMHelpers.cpp	/^std::string GetFilePath( std::string file )$/;"	f	namespace:NVM
NVM	include/NVMHelpers.cpp	/^namespace NVM {$/;"	n	file:
mlog2	include/NVMHelpers.cpp	/^int mlog2( int num )$/;"	f	namespace:NVM
NVM	include/NVMHelpers.h	/^namespace NVM {$/;"	n
PyDictHistogram	include/NVMHelpers.h	/^std::string PyDictHistogram( std::map<T1, T2> iiMap )$/;"	f	namespace:NVM
__NVMAIN_HELPERS_H__	include/NVMHelpers.h	35;"	d
NVM	include/NVMTypes.h	/^namespace NVM {$/;"	n
NVMCommandQueue	include/NVMTypes.h	/^typedef std::deque<NVMainRequest *> NVMCommandQueue;$/;"	t	namespace:NVM
NVMTransactionQueue	include/NVMTypes.h	/^typedef std::list<NVMainRequest *> NVMTransactionQueue;$/;"	t	namespace:NVM
__INCLUDE_NVMTYPES_H__	include/NVMTypes.h	35;"	d
ncounter_t	include/NVMTypes.h	/^typedef uint64_t  ncounter_t;$/;"	t	namespace:NVM
ncounters_t	include/NVMTypes.h	/^typedef int64_t   ncounters_t;$/;"	t	namespace:NVM
ncycle_t	include/NVMTypes.h	/^typedef uint64_t  ncycle_t;$/;"	t	namespace:NVM
ncycles_t	include/NVMTypes.h	/^typedef int64_t   ncycles_t;$/;"	t	namespace:NVM
ACTIVATE	include/NVMainRequest.h	/^    ACTIVATE,       \/* a.k.a. RAS *\/$/;"	e	enum:NVM::OpType
BUS_READ	include/NVMainRequest.h	/^    BUS_READ,       \/* Data bus read burst *\/$/;"	e	enum:NVM::OpType
BUS_WRITE	include/NVMainRequest.h	/^    BUS_WRITE,      \/* Data bus write burst *\/ $/;"	e	enum:NVM::OpType
BulkCommand	include/NVMainRequest.h	/^enum BulkCommand $/;"	g	namespace:NVM
CACHED_READ	include/NVMainRequest.h	/^    CACHED_READ,    \/* Check if read is cached anywhere in hierarchy. *\/$/;"	e	enum:NVM::OpType
CACHED_WRITE	include/NVMainRequest.h	/^    CACHED_WRITE    \/* Check if write is cached anywhere in hierarchy. *\/$/;"	e	enum:NVM::OpType
CMD_ACTREAD2PRE	include/NVMainRequest.h	/^    CMD_ACTREAD2PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTREAD3PRE	include/NVMainRequest.h	/^    CMD_ACTREAD3PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTREAD4PRE	include/NVMainRequest.h	/^    CMD_ACTREAD4PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTREADPRE	include/NVMainRequest.h	/^    CMD_ACTREADPRE, \/\/ 10$/;"	e	enum:NVM::BulkCommand
CMD_ACTWRITE2PRE	include/NVMainRequest.h	/^    CMD_ACTWRITE2PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTWRITE3PRE	include/NVMainRequest.h	/^    CMD_ACTWRITE3PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTWRITE4PRE	include/NVMainRequest.h	/^    CMD_ACTWRITE4PRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACTWRITEPRE	include/NVMainRequest.h	/^    CMD_ACTWRITEPRE,$/;"	e	enum:NVM::BulkCommand
CMD_ACT_READ_PRE_PDPF	include/NVMainRequest.h	/^    CMD_ACT_READ_PRE_PDPF, \/\/ 20$/;"	e	enum:NVM::BulkCommand
CMD_ACT_WRITE_PRE_PDPF	include/NVMainRequest.h	/^    CMD_ACT_WRITE_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_NOP	include/NVMainRequest.h	/^    CMD_NOP = 0, $/;"	e	enum:NVM::BulkCommand
CMD_PDPF	include/NVMainRequest.h	/^    CMD_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_PRE	include/NVMainRequest.h	/^    CMD_PRE,$/;"	e	enum:NVM::BulkCommand
CMD_PRE_PDPF	include/NVMainRequest.h	/^    CMD_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_PU_ACT_READ_PRE	include/NVMainRequest.h	/^    CMD_PU_ACT_READ_PRE,$/;"	e	enum:NVM::BulkCommand
CMD_PU_ACT_READ_PRE_PDPF	include/NVMainRequest.h	/^    CMD_PU_ACT_READ_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_PU_ACT_WRITE_PRE	include/NVMainRequest.h	/^    CMD_PU_ACT_WRITE_PRE,$/;"	e	enum:NVM::BulkCommand
CMD_PU_ACT_WRITE_PRE_PDPF	include/NVMainRequest.h	/^    CMD_PU_ACT_WRITE_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_READ2PRE	include/NVMainRequest.h	/^    CMD_READ2PRE,$/;"	e	enum:NVM::BulkCommand
CMD_READ3PRE	include/NVMainRequest.h	/^    CMD_READ3PRE,$/;"	e	enum:NVM::BulkCommand
CMD_READ4PRE	include/NVMainRequest.h	/^    CMD_READ4PRE,$/;"	e	enum:NVM::BulkCommand
CMD_READPRE	include/NVMainRequest.h	/^    CMD_READPRE,$/;"	e	enum:NVM::BulkCommand
CMD_READ_PRE_PDPF	include/NVMainRequest.h	/^    CMD_READ_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
CMD_WRITE2PRE	include/NVMainRequest.h	/^    CMD_WRITE2PRE,$/;"	e	enum:NVM::BulkCommand
CMD_WRITE3PRE	include/NVMainRequest.h	/^    CMD_WRITE3PRE,$/;"	e	enum:NVM::BulkCommand
CMD_WRITE4PRE	include/NVMainRequest.h	/^    CMD_WRITE4PRE,$/;"	e	enum:NVM::BulkCommand
CMD_WRITEPRE	include/NVMainRequest.h	/^    CMD_WRITEPRE,$/;"	e	enum:NVM::BulkCommand
CMD_WRITE_PRE_PDPF	include/NVMainRequest.h	/^    CMD_WRITE_PRE_PDPF,$/;"	e	enum:NVM::BulkCommand
FLAG_CANCELLED	include/NVMainRequest.h	/^        FLAG_CANCELLED = 8,             \/\/ This write was cancelled$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_COUNT	include/NVMainRequest.h	/^        FLAG_COUNT$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_FORCED	include/NVMainRequest.h	/^        FLAG_FORCED = 32,               \/\/ This write can not be paused or cancelled$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_ISSUED	include/NVMainRequest.h	/^        FLAG_ISSUED = 128,              \/\/ Request has left the command queue$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_IS_READ	include/NVMainRequest.h	/^        FLAG_IS_READ = 2,               \/\/ Is a read (i.e., READ or READ_PRE, etc.)$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_IS_WRITE	include/NVMainRequest.h	/^        FLAG_IS_WRITE = 4,              \/\/ Is a write (i.e., WRITE or WRITE_PRE, etc.)$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_LAST_REQUEST	include/NVMainRequest.h	/^        FLAG_LAST_REQUEST = 1,          \/\/ Last request for a row in the transaction queue$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_PAUSED	include/NVMainRequest.h	/^        FLAG_PAUSED = 16,               \/\/ This write was paused$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
FLAG_PRIORITY	include/NVMainRequest.h	/^        FLAG_PRIORITY = 64,             \/\/ Request (or precursor) that takes priority over write$/;"	e	enum:NVM::NVMainRequest::NVMainRequestFlags
MEM_REQUEST_COMPLETE	include/NVMainRequest.h	/^    MEM_REQUEST_COMPLETE,   \/* finished request *\/$/;"	e	enum:NVM::MemRequestStatus
MEM_REQUEST_INCOMPLETE	include/NVMainRequest.h	/^    MEM_REQUEST_INCOMPLETE, \/* Incomplete request *\/$/;"	e	enum:NVM::MemRequestStatus
MEM_REQUEST_NUM	include/NVMainRequest.h	/^    MEM_REQUEST_NUM $/;"	e	enum:NVM::MemRequestStatus
MEM_REQUEST_RETRY	include/NVMainRequest.h	/^    MEM_REQUEST_RETRY,      \/* request that retried *\/$/;"	e	enum:NVM::MemRequestStatus
MemRequestStatus	include/NVMainRequest.h	/^enum MemRequestStatus $/;"	g	namespace:NVM
NOP	include/NVMainRequest.h	/^    NOP = 0,        \/* No Operation *\/$/;"	e	enum:NVM::OpType
NVM	include/NVMainRequest.h	/^namespace NVM {$/;"	n
NVMAccessType	include/NVMainRequest.h	/^enum NVMAccessType $/;"	g	namespace:NVM
NVMainRequest	include/NVMainRequest.h	/^    NVMainRequest( ) $/;"	f	class:NVM::NVMainRequest
NVMainRequest	include/NVMainRequest.h	/^class NVMainRequest$/;"	c	namespace:NVM
NVMainRequestFlags	include/NVMainRequest.h	/^    enum NVMainRequestFlags$/;"	g	class:NVM::NVMainRequest
OpType	include/NVMainRequest.h	/^enum OpType $/;"	g	namespace:NVM
POWERDOWN_PDA	include/NVMainRequest.h	/^    POWERDOWN_PDA,  \/* Active PowerDown *\/$/;"	e	enum:NVM::OpType
POWERDOWN_PDPF	include/NVMainRequest.h	/^    POWERDOWN_PDPF, \/* Standby PowerDown with Fast Exit *\/$/;"	e	enum:NVM::OpType
POWERDOWN_PDPS	include/NVMainRequest.h	/^    POWERDOWN_PDPS, \/* Standby PowerDown with Slow Exit *\/$/;"	e	enum:NVM::OpType
POWERUP	include/NVMainRequest.h	/^    POWERUP,        \/* PowerUp *\/$/;"	e	enum:NVM::OpType
PRECHARGE	include/NVMainRequest.h	/^    PRECHARGE,      \/* PRECHARGE *\/$/;"	e	enum:NVM::OpType
PRECHARGE_ALL	include/NVMainRequest.h	/^    PRECHARGE_ALL,  \/* PRECHARGE all sub-arrays *\/$/;"	e	enum:NVM::OpType
READ	include/NVMainRequest.h	/^    READ,           \/* a.k.a. CAS-R *\/ $/;"	e	enum:NVM::OpType
READ_PRECHARGE	include/NVMainRequest.h	/^    READ_PRECHARGE, \/* CAS-R with implicit PRECHARGE *\/ $/;"	e	enum:NVM::OpType
REFRESH	include/NVMainRequest.h	/^    REFRESH,        \/* Refresh *\/$/;"	e	enum:NVM::OpType
SUPERVISOR_ACCESS	include/NVMainRequest.h	/^    SUPERVISOR_ACCESS,  \/* Kernel access right *\/$/;"	e	enum:NVM::NVMAccessType
UNKNOWN_ACCESS	include/NVMainRequest.h	/^    UNKNOWN_ACCESS,     \/* Undefined access right *\/$/;"	e	enum:NVM::NVMAccessType
USER_ACCESS	include/NVMainRequest.h	/^    USER_ACCESS         \/* User access right *\/$/;"	e	enum:NVM::NVMAccessType
WRITE	include/NVMainRequest.h	/^    WRITE,          \/* a.k.a. CAS-W *\/  $/;"	e	enum:NVM::OpType
WRITE_PRECHARGE	include/NVMainRequest.h	/^    WRITE_PRECHARGE,\/* CAS-W with implicit PRECHARGE *\/ $/;"	e	enum:NVM::OpType
__NVMAINREQUESTzz_H__	include/NVMainRequest.h	35;"	d
access	include/NVMainRequest.h	/^    NVMAccessType access;          \/\/< User or kernel mode access$/;"	m	class:NVM::NVMainRequest
address	include/NVMainRequest.h	/^    NVMAddress address;            \/\/< Address of request$/;"	m	class:NVM::NVMainRequest
arrivalCycle	include/NVMainRequest.h	/^    ncycle_t arrivalCycle;         \/\/< When the request arrived at the memory controller$/;"	m	class:NVM::NVMainRequest
bulkCmd	include/NVMainRequest.h	/^    BulkCommand bulkCmd;           \/\/< Bulk Commands (i.e., Read+Precharge, Write+Precharge, etc)$/;"	m	class:NVM::NVMainRequest
burstCount	include/NVMainRequest.h	/^    ncounter_t burstCount;         \/\/< Number of bursts (used for variable-size requests.$/;"	m	class:NVM::NVMainRequest
cancellations	include/NVMainRequest.h	/^    ncycle_t cancellations;        \/\/< Number of times this request was cancelled$/;"	m	class:NVM::NVMainRequest
completionCycle	include/NVMainRequest.h	/^    ncycle_t completionCycle;      \/\/< When the request was sent back to the requestor$/;"	m	class:NVM::NVMainRequest
data	include/NVMainRequest.h	/^    NVMDataBlock data;             \/\/< Data to be written, or data that would be read$/;"	m	class:NVM::NVMainRequest
flags	include/NVMainRequest.h	/^    uint64_t flags;                \/\/< Flags for NVMain (backend only)$/;"	m	class:NVM::NVMainRequest
isPrefetch	include/NVMainRequest.h	/^    bool isPrefetch;               \/\/< Whether request is a prefetch or not$/;"	m	class:NVM::NVMainRequest
issueCycle	include/NVMainRequest.h	/^    ncycle_t issueCycle;           \/\/< When the memory controller issued the request to the interconnect (dequeued)$/;"	m	class:NVM::NVMainRequest
oldData	include/NVMainRequest.h	/^    NVMDataBlock oldData;          \/\/< Data that was previously at this address (pre-write)$/;"	m	class:NVM::NVMainRequest
operator <	include/NVMainRequest.h	/^bool NVMainRequest::operator<( NVMainRequest m ) const$/;"	f	class:NVM::NVMainRequest
operator =	include/NVMainRequest.h	/^const NVMainRequest& NVMainRequest::operator=( const NVMainRequest& m )$/;"	f	class:NVM::NVMainRequest
owner	include/NVMainRequest.h	/^    NVMObject *owner;              \/\/< Pointer to the object that created this request$/;"	m	class:NVM::NVMainRequest
pfTrigger	include/NVMainRequest.h	/^    NVMAddress pfTrigger;          \/\/< Address that triggered this prefetch$/;"	m	class:NVM::NVMainRequest
programCounter	include/NVMainRequest.h	/^    uint64_t programCounter;       \/\/< Program counter of CPU issuing request$/;"	m	class:NVM::NVMainRequest
queueCycle	include/NVMainRequest.h	/^    ncycle_t queueCycle;           \/\/< When the memory controller accepted (queued) the request$/;"	m	class:NVM::NVMainRequest
reqInfo	include/NVMainRequest.h	/^    void *reqInfo;                 \/\/< User-defined info for request (frontend only)$/;"	m	class:NVM::NVMainRequest
status	include/NVMainRequest.h	/^    MemRequestStatus status;       \/\/< Complete, incomplete, etc.$/;"	m	class:NVM::NVMainRequest
tag	include/NVMainRequest.h	/^    int tag;                       \/\/< User-defined tag for request (frontend only)$/;"	m	class:NVM::NVMainRequest
threadId	include/NVMainRequest.h	/^    ncounters_t threadId;                  \/\/< Thread ID of issuing application$/;"	m	class:NVM::NVMainRequest
type	include/NVMainRequest.h	/^    OpType type;                   \/\/< Operation type of request (read, write, etc)$/;"	m	class:NVM::NVMainRequest
writeProgress	include/NVMainRequest.h	/^    ncycle_t writeProgress;        \/\/< Number of cycles remaining for write request$/;"	m	class:NVM::NVMainRequest
~NVMainRequest	include/NVMainRequest.h	/^    ~NVMainRequest( )$/;"	f	class:NVM::NVMainRequest
AddressTranslator	src/AddressTranslator.cpp	/^AddressTranslator::AddressTranslator( )$/;"	f	class:AddressTranslator
Divide	src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Divide( uint64_t partSize, MemoryPartition partition )$/;"	f	class:AddressTranslator
FindOrder	src/AddressTranslator.cpp	/^void AddressTranslator::FindOrder( int order, MemoryPartition *p )$/;"	f	class:AddressTranslator
GetStats	src/AddressTranslator.cpp	/^Stats *AddressTranslator::GetStats( )$/;"	f	class:AddressTranslator
GetTranslationMethod	src/AddressTranslator.cpp	/^TranslationMethod *AddressTranslator::GetTranslationMethod( )$/;"	f	class:AddressTranslator
Modulo	src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Modulo( uint64_t partialAddr, MemoryPartition partition )$/;"	f	class:AddressTranslator
ReverseTranslate	src/AddressTranslator.cpp	/^uint64_t AddressTranslator::ReverseTranslate( const uint64_t& row, $/;"	f	class:AddressTranslator
SetBurstLength	src/AddressTranslator.cpp	/^void AddressTranslator::SetBurstLength( int beat )$/;"	f	class:AddressTranslator
SetBusWidth	src/AddressTranslator.cpp	/^void AddressTranslator::SetBusWidth( int bits )$/;"	f	class:AddressTranslator
SetDefaultField	src/AddressTranslator.cpp	/^void AddressTranslator::SetDefaultField( TranslationField f )$/;"	f	class:AddressTranslator
SetStats	src/AddressTranslator.cpp	/^void AddressTranslator::SetStats( Stats *s )$/;"	f	class:AddressTranslator
SetTranslationMethod	src/AddressTranslator.cpp	/^void AddressTranslator::SetTranslationMethod( TranslationMethod *m )$/;"	f	class:AddressTranslator
StatName	src/AddressTranslator.cpp	/^std::string AddressTranslator::StatName( )$/;"	f	class:AddressTranslator
StatName	src/AddressTranslator.cpp	/^void AddressTranslator::StatName( std::string name )$/;"	f	class:AddressTranslator
Translate	src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Translate( NVMainRequest *request )$/;"	f	class:AddressTranslator
Translate	src/AddressTranslator.cpp	/^uint64_t AddressTranslator::Translate( uint64_t address )$/;"	f	class:AddressTranslator
Translate	src/AddressTranslator.cpp	/^void AddressTranslator::Translate( NVMainRequest *request, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:AddressTranslator
Translate	src/AddressTranslator.cpp	/^void AddressTranslator::Translate( uint64_t address, uint64_t *row, uint64_t *col, uint64_t *bank,$/;"	f	class:AddressTranslator
~AddressTranslator	src/AddressTranslator.cpp	/^AddressTranslator::~AddressTranslator( )$/;"	f	class:AddressTranslator
AddressTranslator	src/AddressTranslator.h	/^class AddressTranslator$/;"	c	namespace:NVM
BANK_FIELD	src/AddressTranslator.h	/^    BANK_FIELD, $/;"	e	enum:NVM::__anon3
CHANNEL_FIELD	src/AddressTranslator.h	/^    CHANNEL_FIELD,$/;"	e	enum:NVM::__anon3
COL_FIELD	src/AddressTranslator.h	/^    COL_FIELD, $/;"	e	enum:NVM::__anon3
CalculateStats	src/AddressTranslator.h	/^    virtual void CalculateStats( ) { }$/;"	f	class:NVM::AddressTranslator
CreateCheckpoint	src/AddressTranslator.h	/^    virtual void CreateCheckpoint( std::string \/*dir*\/ ) { }$/;"	f	class:NVM::AddressTranslator
NO_FIELD	src/AddressTranslator.h	/^    NO_FIELD, $/;"	e	enum:NVM::__anon3
NVM	src/AddressTranslator.h	/^namespace NVM {$/;"	n
RANK_FIELD	src/AddressTranslator.h	/^    RANK_FIELD, $/;"	e	enum:NVM::__anon3
ROW_FIELD	src/AddressTranslator.h	/^    ROW_FIELD, $/;"	e	enum:NVM::__anon3
RegisterStats	src/AddressTranslator.h	/^    virtual void RegisterStats( ) { } $/;"	f	class:NVM::AddressTranslator
RestoreCheckpoint	src/AddressTranslator.h	/^    virtual void RestoreCheckpoint( std::string \/*dir*\/ ) { }$/;"	f	class:NVM::AddressTranslator
SUBARRAY_FIELD	src/AddressTranslator.h	/^    SUBARRAY_FIELD,$/;"	e	enum:NVM::__anon3
SetConfig	src/AddressTranslator.h	/^    virtual void SetConfig( Config * \/*config*\/, bool \/*createChildren*\/ = true ) { }$/;"	f	class:NVM::AddressTranslator
TranslationField	src/AddressTranslator.h	/^} TranslationField;$/;"	t	namespace:NVM	typeref:enum:NVM::__anon3
__ADDRESSTRANSLATOR_H__	src/AddressTranslator.h	37;"	d
burstLength	src/AddressTranslator.h	/^    int burstLength;$/;"	m	class:NVM::AddressTranslator
busWidth	src/AddressTranslator.h	/^    int busWidth;$/;"	m	class:NVM::AddressTranslator
defaultField	src/AddressTranslator.h	/^    TranslationField defaultField;$/;"	m	class:NVM::AddressTranslator
lowColBits	src/AddressTranslator.h	/^    int lowColBits;$/;"	m	class:NVM::AddressTranslator
method	src/AddressTranslator.h	/^    TranslationMethod *method;$/;"	m	class:NVM::AddressTranslator
statName	src/AddressTranslator.h	/^    std::string statName;$/;"	m	class:NVM::AddressTranslator
stats	src/AddressTranslator.h	/^    Stats *stats;$/;"	m	class:NVM::AddressTranslator
GetId	src/Bank.cpp	/^ncounter_t Bank::GetId( )$/;"	f	class:Bank
Idle	src/Bank.cpp	/^bool Bank::Idle( )$/;"	f	class:Bank
SetId	src/Bank.cpp	/^void Bank::SetId( ncounter_t id )$/;"	f	class:Bank
Bank	src/Bank.h	/^    Bank( ) { }$/;"	f	class:NVM::Bank
Bank	src/Bank.h	/^class Bank : public NVMObject$/;"	c	namespace:NVM
GetEnergy	src/Bank.h	/^    virtual void GetEnergy( double& , double& , double&, double& ) { } $/;"	f	class:NVM::Bank
GetNextActivate	src/Bank.h	/^    virtual ncycle_t GetNextActivate( ) { return 0; }$/;"	f	class:NVM::Bank
GetNextPowerDown	src/Bank.h	/^    virtual ncycle_t GetNextPowerDown( ) { return 0; }$/;"	f	class:NVM::Bank
GetNextPrecharge	src/Bank.h	/^    virtual ncycle_t GetNextPrecharge( ) { return 0; }$/;"	f	class:NVM::Bank
GetNextRead	src/Bank.h	/^    virtual ncycle_t GetNextRead( ) { return 0; }$/;"	f	class:NVM::Bank
GetNextRefresh	src/Bank.h	/^    virtual ncycle_t GetNextRefresh( ) { return 0; }$/;"	f	class:NVM::Bank
GetNextWrite	src/Bank.h	/^    virtual ncycle_t GetNextWrite( ) { return 0; }$/;"	f	class:NVM::Bank
GetReads	src/Bank.h	/^    virtual ncounter_t GetReads( ) { return 0; }$/;"	f	class:NVM::Bank
GetWrites	src/Bank.h	/^    virtual ncounter_t GetWrites( ) { return 0; }$/;"	f	class:NVM::Bank
NVM	src/Bank.h	/^namespace NVM {$/;"	n
SetConfig	src/Bank.h	/^    virtual void SetConfig( Config * \/*config*\/, bool \/*createChildren*\/ ) { }$/;"	f	class:NVM::Bank
__BANK_H__	src/Bank.h	37;"	d
bankId	src/Bank.h	/^    ncounter_t bankId;$/;"	m	class:NVM::Bank
bankName	src/Bank.h	/^    std::string bankName;$/;"	m	class:NVM::Bank
~Bank	src/Bank.h	/^    ~Bank( ) { }$/;"	f	class:NVM::Bank
Config	src/Config.cpp	/^Config::Config( )$/;"	f	class:Config
Config	src/Config.cpp	/^Config::Config(const Config& conf)$/;"	f	class:Config
GetBool	src/Config.cpp	/^bool Config::GetBool( std::string key )$/;"	f	class:Config
GetBool	src/Config.cpp	/^void Config::GetBool( std::string key, bool& value )$/;"	f	class:Config
GetDebugLog	src/Config.cpp	/^std::ostream *Config::GetDebugLog( )$/;"	f	class:Config
GetEnergy	src/Config.cpp	/^double Config::GetEnergy( std::string key )$/;"	f	class:Config
GetEnergy	src/Config.cpp	/^void Config::GetEnergy( std::string key, double& value )$/;"	f	class:Config
GetFileName	src/Config.cpp	/^std::string Config::GetFileName( )$/;"	f	class:Config
GetHooks	src/Config.cpp	/^std::vector<std::string>& Config::GetHooks( )$/;"	f	class:Config
GetSimInterface	src/Config.cpp	/^SimInterface *Config::GetSimInterface( )$/;"	f	class:Config
GetString	src/Config.cpp	/^std::string Config::GetString( std::string key )$/;"	f	class:Config
GetString	src/Config.cpp	/^void Config::GetString( std::string key, std::string& value )$/;"	f	class:Config
GetValue	src/Config.cpp	/^int Config::GetValue( std::string key )$/;"	f	class:Config
GetValue	src/Config.cpp	/^void Config::GetValue( std::string key, int& value )$/;"	f	class:Config
GetValueUL	src/Config.cpp	/^uint64_t Config::GetValueUL( std::string key )$/;"	f	class:Config
GetValueUL	src/Config.cpp	/^void Config::GetValueUL( std::string key, uint64_t& value )$/;"	f	class:Config
KeyExists	src/Config.cpp	/^bool Config::KeyExists( std::string key )$/;"	f	class:Config
Print	src/Config.cpp	/^void Config::Print( )$/;"	f	class:Config
Read	src/Config.cpp	/^void Config::Read( std::string filename )$/;"	f	class:Config
SetBool	src/Config.cpp	/^void Config::SetBool( std::string key, bool value )$/;"	f	class:Config
SetDebugLog	src/Config.cpp	/^void Config::SetDebugLog( )$/;"	f	class:Config
SetEnergy	src/Config.cpp	/^void Config::SetEnergy( std::string key, std::string energy )$/;"	f	class:Config
SetSimInterface	src/Config.cpp	/^void Config::SetSimInterface( SimInterface *ptr )$/;"	f	class:Config
SetString	src/Config.cpp	/^void Config::SetString( std::string key, std::string value )$/;"	f	class:Config
SetValue	src/Config.cpp	/^void Config::SetValue( std::string key, std::string value )$/;"	f	class:Config
~Config	src/Config.cpp	/^Config::~Config( )$/;"	f	class:Config
Config	src/Config.h	/^class Config $/;"	c	namespace:NVM
NVM	src/Config.h	/^namespace NVM {$/;"	n
__CONFIG_H__	src/Config.h	35;"	d
debugLogFile	src/Config.h	/^    std::ofstream debugLogFile;$/;"	m	class:NVM::Config
fileName	src/Config.h	/^    std::string fileName;$/;"	m	class:NVM::Config
hookList	src/Config.h	/^    std::vector<std::string> hookList;$/;"	m	class:NVM::Config
simPtr	src/Config.h	/^    SimInterface *simPtr;$/;"	m	class:NVM::Config
useDebugLog	src/Config.h	/^    bool useDebugLog;$/;"	m	class:NVM::Config
values	src/Config.h	/^    std::map<std::string, std::string> values;$/;"	m	class:NVM::Config
warned	src/Config.h	/^    std::set<std::string> warned;$/;"	m	class:NVM::Config
Cycle	src/DataEncoder.cpp	/^void DataEncoder::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:DataEncoder
DataEncoder	src/DataEncoder.cpp	/^DataEncoder::DataEncoder( )$/;"	f	class:DataEncoder
Read	src/DataEncoder.cpp	/^ncycle_t DataEncoder::Read( NVMainRequest* \/*request*\/ )$/;"	f	class:DataEncoder
SetConfig	src/DataEncoder.cpp	/^void DataEncoder::SetConfig( Config* \/*conf*\/, bool \/*createChildren*\/ )$/;"	f	class:DataEncoder
Write	src/DataEncoder.cpp	/^ncycle_t DataEncoder::Write( NVMainRequest* \/*request*\/ )$/;"	f	class:DataEncoder
~DataEncoder	src/DataEncoder.cpp	/^DataEncoder::~DataEncoder( )$/;"	f	class:DataEncoder
DataEncoder	src/DataEncoder.h	/^class DataEncoder : public NVMObject$/;"	c	namespace:NVM
NVM	src/DataEncoder.h	/^namespace NVM {$/;"	n
PrintStats	src/DataEncoder.h	/^    virtual void PrintStats( ) { }$/;"	f	class:NVM::DataEncoder
__DATAENCODER_H__	src/DataEncoder.h	35;"	d
NVM	src/Debug.h	/^namespace NVM {$/;"	n
__NVM_DEBUG_H__	src/Debug.h	37;"	d
nullstream	src/Debug.h	/^class nullstream : public std::ostream {};$/;"	c	namespace:NVM
nvmainDebugInhibitor	src/Debug.h	/^static nullstream nvmainDebugInhibitor;$/;"	m	namespace:NVM
operator <<	src/Debug.h	/^nullstream& operator<<( nullstream& s, T const& ) { return s; }$/;"	f	namespace:NVM
EnduranceDistribution	src/EnduranceDistribution.h	/^     EnduranceDistribution( ) { }$/;"	f	class:NVM::EnduranceDistribution
EnduranceDistribution	src/EnduranceDistribution.h	/^class EnduranceDistribution$/;"	c	namespace:NVM
NVM	src/EnduranceDistribution.h	/^namespace NVM {$/;"	n
__ENDURANCEDISTRIBUTION_H__	src/EnduranceDistribution.h	35;"	d
~EnduranceDistribution	src/EnduranceDistribution.h	/^     virtual ~EnduranceDistribution( ) { }$/;"	f	class:NVM::EnduranceDistribution
Cycle	src/EnduranceModel.cpp	/^void EnduranceModel::Cycle( ncycle_t )$/;"	f	class:EnduranceModel
DecrementLife	src/EnduranceModel.cpp	/^bool EnduranceModel::DecrementLife( uint64_t addr )$/;"	f	class:EnduranceModel
EnduranceModel	src/EnduranceModel.cpp	/^EnduranceModel::EnduranceModel( )$/;"	f	class:EnduranceModel
GetAverageLife	src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetAverageLife( )$/;"	f	class:EnduranceModel
GetGranularity	src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetGranularity( )$/;"	f	class:EnduranceModel
GetWorstLife	src/EnduranceModel.cpp	/^uint64_t EnduranceModel::GetWorstLife( )$/;"	f	class:EnduranceModel
IsDead	src/EnduranceModel.cpp	/^bool EnduranceModel::IsDead( uint64_t addr )$/;"	f	class:EnduranceModel
SetConfig	src/EnduranceModel.cpp	/^void EnduranceModel::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:EnduranceModel
SetGranularity	src/EnduranceModel.cpp	/^void EnduranceModel::SetGranularity( uint64_t bits )$/;"	f	class:EnduranceModel
EnduranceModel	src/EnduranceModel.h	/^class EnduranceModel : public NVMObject$/;"	c	namespace:NVM
NVM	src/EnduranceModel.h	/^namespace NVM {$/;"	n
PrintStats	src/EnduranceModel.h	/^    virtual void PrintStats( ) { }$/;"	f	class:NVM::EnduranceModel
__ENDURANCEMODEL_H__	src/EnduranceModel.h	35;"	d
enduranceDist	src/EnduranceModel.h	/^    EnduranceDistribution *enduranceDist;$/;"	m	class:NVM::EnduranceModel
granularity	src/EnduranceModel.h	/^    uint64_t granularity;$/;"	m	class:NVM::EnduranceModel
life	src/EnduranceModel.h	/^    std::map<uint64_t, uint64_t> life;$/;"	m	class:NVM::EnduranceModel
~EnduranceModel	src/EnduranceModel.h	/^    ~EnduranceModel( ) {}$/;"	f	class:NVM::EnduranceModel
AddSystem	src/EventQueue.cpp	/^void GlobalEventQueue::AddSystem( NVMain *subSystem, Config *config )$/;"	f	class:GlobalEventQueue
Cycle	src/EventQueue.cpp	/^void GlobalEventQueue::Cycle( ncycle_t steps )$/;"	f	class:GlobalEventQueue
EventQueue	src/EventQueue.cpp	/^EventQueue::EventQueue( )$/;"	f	class:EventQueue
FindCallback	src/EventQueue.cpp	/^Event *EventQueue::FindCallback( NVMObject *recipient, CallbackPtr method, ncycle_t when, void *data, int priority ) const$/;"	f	class:EventQueue
FindEvent	src/EventQueue.cpp	/^Event *EventQueue::FindEvent( EventType type, NVMObject *recipient, NVMainRequest *req, ncycle_t when ) const$/;"	f	class:EventQueue
FindEvent	src/EventQueue.cpp	/^Event *EventQueue::FindEvent( EventType type, NVMObject_hook *recipient, NVMainRequest *req, ncycle_t when ) const$/;"	f	class:EventQueue
GetCurrentCycle	src/EventQueue.cpp	/^ncycle_t EventQueue::GetCurrentCycle( )$/;"	f	class:EventQueue
GetCurrentCycle	src/EventQueue.cpp	/^ncycle_t GlobalEventQueue::GetCurrentCycle( )$/;"	f	class:GlobalEventQueue
GetFrequency	src/EventQueue.cpp	/^double EventQueue::GetFrequency( )$/;"	f	class:EventQueue
GetFrequency	src/EventQueue.cpp	/^double GlobalEventQueue::GetFrequency( )$/;"	f	class:GlobalEventQueue
GetNextEvent	src/EventQueue.cpp	/^ncycle_t EventQueue::GetNextEvent( )$/;"	f	class:EventQueue
GetNextEvent	src/EventQueue.cpp	/^ncycle_t GlobalEventQueue::GetNextEvent( EventQueue **eq )$/;"	f	class:GlobalEventQueue
GlobalEventQueue	src/EventQueue.cpp	/^GlobalEventQueue::GlobalEventQueue( )$/;"	f	class:GlobalEventQueue
InsertCallback	src/EventQueue.cpp	/^void EventQueue::InsertCallback( NVMObject *recipient, CallbackPtr method,$/;"	f	class:EventQueue
InsertEvent	src/EventQueue.cpp	/^void EventQueue::InsertEvent( Event *event, ncycle_t when, int priority )$/;"	f	class:EventQueue
InsertEvent	src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject *recipient, NVMainRequest *req, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject *recipient, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject_hook *recipient, NVMainRequest *req, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
InsertEvent	src/EventQueue.cpp	/^void EventQueue::InsertEvent( EventType type, NVMObject_hook *recipient, ncycle_t when, void *data, int priority )$/;"	f	class:EventQueue
Loop	src/EventQueue.cpp	/^void EventQueue::Loop( )$/;"	f	class:EventQueue
Loop	src/EventQueue.cpp	/^void EventQueue::Loop( ncycle_t steps )$/;"	f	class:EventQueue
Process	src/EventQueue.cpp	/^void EventQueue::Process( )$/;"	f	class:EventQueue
RemoveEvent	src/EventQueue.cpp	/^bool EventQueue::RemoveEvent( Event *event, ncycle_t when )$/;"	f	class:EventQueue
SetCurrentCycle	src/EventQueue.cpp	/^void EventQueue::SetCurrentCycle( ncycle_t curCycle )$/;"	f	class:EventQueue
SetFrequency	src/EventQueue.cpp	/^void EventQueue::SetFrequency( double freq )$/;"	f	class:EventQueue
SetFrequency	src/EventQueue.cpp	/^void GlobalEventQueue::SetFrequency( double freq )$/;"	f	class:GlobalEventQueue
SetRecipient	src/EventQueue.cpp	/^void Event::SetRecipient( NVMObject *r )$/;"	f	class:Event
Sync	src/EventQueue.cpp	/^void GlobalEventQueue::Sync( )$/;"	f	class:GlobalEventQueue
~EventQueue	src/EventQueue.cpp	/^EventQueue::~EventQueue( )$/;"	f	class:EventQueue
~GlobalEventQueue	src/EventQueue.cpp	/^GlobalEventQueue::~GlobalEventQueue( )$/;"	f	class:GlobalEventQueue
CallbackPtr	src/EventQueue.h	/^typedef void (NVMObject::*CallbackPtr)(void*);$/;"	t	namespace:NVM
Event	src/EventQueue.h	/^    Event() : type(EventUnknown), recipient(NULL), request(NULL), data(NULL), cycle(0), priority(0) {}$/;"	f	class:NVM::Event
Event	src/EventQueue.h	/^class Event$/;"	c	namespace:NVM
EventCallback	src/EventQueue.h	/^                 EventCallback$/;"	e	enum:NVM::EventType
EventCycle	src/EventQueue.h	/^                 EventCycle,$/;"	e	enum:NVM::EventType
EventIdle	src/EventQueue.h	/^                 EventIdle,    \/* Automatic event *\/$/;"	e	enum:NVM::EventType
EventList	src/EventQueue.h	/^typedef std::list<Event *> EventList;$/;"	t	namespace:NVM
EventQueue	src/EventQueue.h	/^class EventQueue$/;"	c	namespace:NVM
EventRequest	src/EventQueue.h	/^                 EventRequest,$/;"	e	enum:NVM::EventType
EventResponse	src/EventQueue.h	/^                 EventResponse,$/;"	e	enum:NVM::EventType
EventType	src/EventQueue.h	/^enum EventType { EventUnknown,$/;"	g	namespace:NVM
EventUnknown	src/EventQueue.h	/^enum EventType { EventUnknown,$/;"	e	enum:NVM::EventType
GetCallback	src/EventQueue.h	/^    CallbackPtr GetCallback( ) { return method; }$/;"	f	class:NVM::Event
GetCycle	src/EventQueue.h	/^    ncycle_t GetCycle( ) { return cycle; }$/;"	f	class:NVM::Event
GetData	src/EventQueue.h	/^    void *GetData( ) { return data; }$/;"	f	class:NVM::Event
GetPriority	src/EventQueue.h	/^    int GetPriority( ) { return priority; }$/;"	f	class:NVM::Event
GetRecipient	src/EventQueue.h	/^    NVMObject_hook *GetRecipient( ) { return recipient; }$/;"	f	class:NVM::Event
GetRequest	src/EventQueue.h	/^    NVMainRequest *GetRequest( ) { return request; }$/;"	f	class:NVM::Event
GetType	src/EventQueue.h	/^    EventType GetType( ) { return type; }$/;"	f	class:NVM::Event
GlobalEventQueue	src/EventQueue.h	/^class GlobalEventQueue$/;"	c	namespace:NVM
NVM	src/EventQueue.h	/^namespace NVM {$/;"	n
SetCallback	src/EventQueue.h	/^    void SetCallback( CallbackPtr m ) { method = m; }$/;"	f	class:NVM::Event
SetCycle	src/EventQueue.h	/^    void SetCycle( ncycle_t c ) { cycle = c; }$/;"	f	class:NVM::Event
SetData	src/EventQueue.h	/^    void SetData( void *d ) { data = d; }$/;"	f	class:NVM::Event
SetPriority	src/EventQueue.h	/^    void SetPriority( int p ) { priority = p; }$/;"	f	class:NVM::Event
SetRecipient	src/EventQueue.h	/^    void SetRecipient( NVMObject_hook *r ) { recipient = r; }$/;"	f	class:NVM::Event
SetRequest	src/EventQueue.h	/^    void SetRequest( NVMainRequest *r ) { request = r; }$/;"	f	class:NVM::Event
SetType	src/EventQueue.h	/^    void SetType( EventType e ) { type = e; }$/;"	f	class:NVM::Event
__NVMAIN_EVENTQUEUE_H__	src/EventQueue.h	35;"	d
currentCycle	src/EventQueue.h	/^    ncycle_t currentCycle; $/;"	m	class:NVM::EventQueue
currentCycle	src/EventQueue.h	/^    ncycle_t currentCycle;$/;"	m	class:NVM::GlobalEventQueue
cycle	src/EventQueue.h	/^    ncycle_t cycle;$/;"	m	class:NVM::Event
data	src/EventQueue.h	/^    void *data;                  \/* Generic data to pass to callback. *\/$/;"	m	class:NVM::Event
eventDriven	src/EventQueue.h	/^    bool eventDriven;$/;"	m	class:NVM::GlobalEventQueue
eventMap	src/EventQueue.h	/^    std::map< ncycle_t, EventList> eventMap; $/;"	m	class:NVM::EventQueue
eventQueues	src/EventQueue.h	/^    std::map<EventQueue *, double> eventQueues;$/;"	m	class:NVM::GlobalEventQueue
frequency	src/EventQueue.h	/^    double frequency;$/;"	m	class:NVM::EventQueue
frequency	src/EventQueue.h	/^    double frequency;$/;"	m	class:NVM::GlobalEventQueue
lastEventCycle	src/EventQueue.h	/^    ncycle_t lastEventCycle;$/;"	m	class:NVM::EventQueue
method	src/EventQueue.h	/^    CallbackPtr method;$/;"	m	class:NVM::Event
nextEventCycle	src/EventQueue.h	/^    ncycle_t nextEventCycle;$/;"	m	class:NVM::EventQueue
priority	src/EventQueue.h	/^    int priority;$/;"	m	class:NVM::Event
recipient	src/EventQueue.h	/^    NVMObject_hook *recipient;   \/* Who to callback. *\/$/;"	m	class:NVM::Event
request	src/EventQueue.h	/^    NVMainRequest *request;      \/* Request causing event. *\/$/;"	m	class:NVM::Event
type	src/EventQueue.h	/^    EventType type;              \/* Type of event (which callback to invoke). *\/$/;"	m	class:NVM::Event
~Event	src/EventQueue.h	/^    ~Event() {}$/;"	f	class:NVM::Event
Cycle	src/FaultModel.cpp	/^void FaultModel::Cycle( ncycle_t )$/;"	f	class:FaultModel
Fault	src/FaultModel.cpp	/^bool FaultModel::Fault( NVMAddress \/*faultAddr*\/ )$/;"	f	class:FaultModel
FaultModel	src/FaultModel.cpp	/^FaultModel::FaultModel( )$/;"	f	class:FaultModel
GetConfig	src/FaultModel.cpp	/^Config *FaultModel::GetConfig( )$/;"	f	class:FaultModel
SetConfig	src/FaultModel.cpp	/^void FaultModel::SetConfig( Config *conf, bool \/*createChildren*\/ )$/;"	f	class:FaultModel
~FaultModel	src/FaultModel.cpp	/^FaultModel::~FaultModel( )$/;"	f	class:FaultModel
FaultModel	src/FaultModel.h	/^class FaultModel : public NVMObject$/;"	c	namespace:NVM
NVM	src/FaultModel.h	/^namespace NVM {$/;"	n
__FAULTMODEL_H__	src/FaultModel.h	35;"	d
config	src/FaultModel.h	/^    Config *config;$/;"	m	class:NVM::FaultModel
endurance	src/FaultModel.h	/^    EnduranceModel *endurance;$/;"	m	class:NVM::FaultModel
CalculateStats	src/Interconnect.h	/^    virtual void CalculateStats( ) { }$/;"	f	class:NVM::Interconnect
Interconnect	src/Interconnect.h	/^    Interconnect( ) { }$/;"	f	class:NVM::Interconnect
Interconnect	src/Interconnect.h	/^class Interconnect : public NVMObject$/;"	c	namespace:NVM
NVM	src/Interconnect.h	/^namespace NVM {$/;"	n
RegisterStats	src/Interconnect.h	/^    virtual void RegisterStats( ) { }$/;"	f	class:NVM::Interconnect
__INTERCONNECT_H__	src/Interconnect.h	35;"	d
~Interconnect	src/Interconnect.h	/^    virtual ~Interconnect( ) { }$/;"	f	class:NVM::Interconnect
CalculateStats	src/MemoryController.cpp	/^void MemoryController::CalculateStats( )$/;"	f	class:MemoryController
CleanupCallback	src/MemoryController.cpp	/^void MemoryController::CleanupCallback( void * \/*data*\/ )$/;"	f	class:MemoryController
CommandQueueCallback	src/MemoryController.cpp	/^void MemoryController::CommandQueueCallback( void * \/*data*\/ )$/;"	f	class:MemoryController
Cycle	src/MemoryController.cpp	/^void MemoryController::Cycle( ncycle_t steps )$/;"	f	class:MemoryController
CycleCommandQueues	src/MemoryController.cpp	/^void MemoryController::CycleCommandQueues( )$/;"	f	class:MemoryController
DecrementRefreshCounter	src/MemoryController.cpp	/^void MemoryController::DecrementRefreshCounter( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
EffectivelyEmpty	src/MemoryController.cpp	/^bool MemoryController::EffectivelyEmpty( const ncounter_t& queueId )$/;"	f	class:MemoryController
Enqueue	src/MemoryController.cpp	/^void MemoryController::Enqueue( ncounter_t queueNum, NVMainRequest *request )$/;"	f	class:MemoryController
FindCachedAddress	src/MemoryController.cpp	/^bool MemoryController::FindCachedAddress( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
FindClosedBankRequest	src/MemoryController.cpp	/^bool MemoryController::FindClosedBankRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindOldestReadyRequest	src/MemoryController.cpp	/^bool MemoryController::FindOldestReadyRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindRowBufferHit	src/MemoryController.cpp	/^bool MemoryController::FindRowBufferHit( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindStarvedRequest	src/MemoryController.cpp	/^bool MemoryController::FindStarvedRequest( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindWriteStalledRead	src/MemoryController.cpp	/^bool MemoryController::FindWriteStalledRead( std::list<NVMainRequest *>& transactionQueue, $/;"	f	class:MemoryController
FindWriteStalledRead	src/MemoryController.cpp	/^bool MemoryController::FindWriteStalledRead( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
GetCommandQueueId	src/MemoryController.cpp	/^ncounter_t MemoryController::GetCommandQueueId( NVMAddress addr )$/;"	f	class:MemoryController
GetConfig	src/MemoryController.cpp	/^Config *MemoryController::GetConfig( )$/;"	f	class:MemoryController
GetID	src/MemoryController.cpp	/^unsigned int MemoryController::GetID( )$/;"	f	class:MemoryController
HandleLowPower	src/MemoryController.cpp	/^void MemoryController::HandleLowPower( )$/;"	f	class:MemoryController
HandleRefresh	src/MemoryController.cpp	/^bool MemoryController::HandleRefresh( )$/;"	f	class:MemoryController
IncrementRefreshCounter	src/MemoryController.cpp	/^void MemoryController::IncrementRefreshCounter( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
InitQueues	src/MemoryController.cpp	/^void MemoryController::InitQueues( unsigned int numQueues )$/;"	f	class:MemoryController
IsIssuable	src/MemoryController.cpp	/^bool MemoryController::IsIssuable( NVMainRequest * \/*request*\/, FailReason * \/*fail*\/ )$/;"	f	class:MemoryController
IsLastRequest	src/MemoryController.cpp	/^bool MemoryController::IsLastRequest( std::list<NVMainRequest *>& transactionQueue,$/;"	f	class:MemoryController
IsRefreshBankQueueEmpty	src/MemoryController.cpp	/^bool MemoryController::IsRefreshBankQueueEmpty( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
IssueMemoryCommands	src/MemoryController.cpp	/^bool MemoryController::IssueMemoryCommands( NVMainRequest *req )$/;"	f	class:MemoryController
MakeActivateRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeActivateRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakeActivateRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeActivateRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakeCachedRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeCachedRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakeImplicitPrechargeRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeImplicitPrechargeRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePowerdownRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePowerdownRequest( OpType pdOp,$/;"	f	class:MemoryController
MakePowerupRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePowerupRequest( const ncounter_t rank )$/;"	f	class:MemoryController
MakePrechargeAllRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeAllRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePrechargeAllRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeAllRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakePrechargeRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeRequest( NVMainRequest *triggerRequest )$/;"	f	class:MemoryController
MakePrechargeRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakePrechargeRequest( const ncounter_t row,$/;"	f	class:MemoryController
MakeRefreshRequest	src/MemoryController.cpp	/^NVMainRequest *MemoryController::MakeRefreshRequest( const ncounter_t row,$/;"	f	class:MemoryController
MemoryController	src/MemoryController.cpp	/^MemoryController::MemoryController( )$/;"	f	class:MemoryController
MoveCurrentQueue	src/MemoryController.cpp	/^void MemoryController::MoveCurrentQueue( )$/;"	f	class:MemoryController
NeedRefresh	src/MemoryController.cpp	/^bool MemoryController::NeedRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
NextIssuable	src/MemoryController.cpp	/^ncycle_t MemoryController::NextIssuable( NVMainRequest * \/*request*\/ )$/;"	f	class:MemoryController
PowerDown	src/MemoryController.cpp	/^void MemoryController::PowerDown( const ncounter_t& rankId )$/;"	f	class:MemoryController
PowerUp	src/MemoryController.cpp	/^void MemoryController::PowerUp( const ncounter_t& rankId )$/;"	f	class:MemoryController
Prequeue	src/MemoryController.cpp	/^void MemoryController::Prequeue( ncounter_t queueNum, NVMainRequest *request )$/;"	f	class:MemoryController
ProcessRefreshPulse	src/MemoryController.cpp	/^void MemoryController::ProcessRefreshPulse( NVMainRequest* refresh )$/;"	f	class:MemoryController
RankQueueEmpty	src/MemoryController.cpp	/^bool MemoryController::RankQueueEmpty( const ncounter_t& rankId )$/;"	f	class:MemoryController
RefreshCallback	src/MemoryController.cpp	/^void MemoryController::RefreshCallback( void *data )$/;"	f	class:MemoryController
RegisterStats	src/MemoryController.cpp	/^void MemoryController::RegisterStats( )$/;"	f	class:MemoryController
RequestComplete	src/MemoryController.cpp	/^bool MemoryController::RequestComplete( NVMainRequest *request )$/;"	f	class:MemoryController
ResetRefresh	src/MemoryController.cpp	/^void MemoryController::ResetRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
ResetRefreshQueued	src/MemoryController.cpp	/^void MemoryController::ResetRefreshQueued( const ncounter_t bank, const ncounter_t rank )$/;"	f	class:MemoryController
ScheduleCommandWake	src/MemoryController.cpp	/^void MemoryController::ScheduleCommandWake( )$/;"	f	class:MemoryController
SetConfig	src/MemoryController.cpp	/^void MemoryController::SetConfig( Config *conf, bool createChildren )$/;"	f	class:MemoryController
SetID	src/MemoryController.cpp	/^void MemoryController::SetID( unsigned int id )$/;"	f	class:MemoryController
SetMappingScheme	src/MemoryController.cpp	/^void MemoryController::SetMappingScheme( )$/;"	f	class:MemoryController
SetRefresh	src/MemoryController.cpp	/^void MemoryController::SetRefresh( const ncounter_t bank, const uint64_t rank )$/;"	f	class:MemoryController
TransactionAvailable	src/MemoryController.cpp	/^bool MemoryController::TransactionAvailable( ncounter_t queueId )$/;"	f	class:MemoryController
WasIssued	src/MemoryController.cpp	/^bool WasIssued( NVMainRequest *request ) { return (request->flags & NVMainRequest::FLAG_ISSUED); }$/;"	f
operator ()	src/MemoryController.cpp	/^bool MemoryController::DummyPredicate::operator() ( NVMainRequest* \/*request*\/ )$/;"	f	class:MemoryController::DummyPredicate
~MemoryController	src/MemoryController.cpp	/^MemoryController::~MemoryController( )$/;"	f	class:MemoryController
ComplementPredicate	src/MemoryController.h	/^    ComplementPredicate() {}$/;"	f	class:NVM::ComplementPredicate
ComplementPredicate	src/MemoryController.h	/^    explicit ComplementPredicate( SchedulingPredicate *_pred ) : pred(_pred) { }$/;"	f	class:NVM::ComplementPredicate
ComplementPredicate	src/MemoryController.h	/^class ComplementPredicate : public SchedulingPredicate$/;"	c	namespace:NVM
DummyPredicate	src/MemoryController.h	/^    class DummyPredicate : public SchedulingPredicate$/;"	c	class:NVM::MemoryController
LOAD	src/MemoryController.h	/^enum ProcessorOp { LOAD, STORE };$/;"	e	enum:NVM::ProcessorOp
MemoryController	src/MemoryController.h	/^class MemoryController : public NVMObject $/;"	c	namespace:NVM
NVM	src/MemoryController.h	/^namespace NVM {$/;"	n
PerBankQueues	src/MemoryController.h	/^enum QueueModel { PerRankQueues, PerBankQueues, PerSubArrayQueues };$/;"	e	enum:NVM::QueueModel
PerRankQueues	src/MemoryController.h	/^enum QueueModel { PerRankQueues, PerBankQueues, PerSubArrayQueues };$/;"	e	enum:NVM::QueueModel
PerSubArrayQueues	src/MemoryController.h	/^enum QueueModel { PerRankQueues, PerBankQueues, PerSubArrayQueues };$/;"	e	enum:NVM::QueueModel
ProcessorOp	src/MemoryController.h	/^enum ProcessorOp { LOAD, STORE };$/;"	g	namespace:NVM
QueueModel	src/MemoryController.h	/^enum QueueModel { PerRankQueues, PerBankQueues, PerSubArrayQueues };$/;"	g	namespace:NVM
STORE	src/MemoryController.h	/^enum ProcessorOp { LOAD, STORE };$/;"	e	enum:NVM::ProcessorOp
SchedulingPredicate	src/MemoryController.h	/^    SchedulingPredicate( ) { }$/;"	f	class:NVM::SchedulingPredicate
SchedulingPredicate	src/MemoryController.h	/^class SchedulingPredicate$/;"	c	namespace:NVM
__MEMORYCONTROLLER_H__	src/MemoryController.h	37;"	d
activateQueued	src/MemoryController.h	/^    bool **activateQueued;$/;"	m	class:NVM::MemoryController
activeSubArray	src/MemoryController.h	/^    ncounter_t ***activeSubArray;$/;"	m	class:NVM::MemoryController
bankNeedRefresh	src/MemoryController.h	/^    bool **bankNeedRefresh;$/;"	m	class:NVM::MemoryController
cleanupPriority	src/MemoryController.h	/^const int cleanupPriority = -10;$/;"	m	namespace:NVM
commandQueueCount	src/MemoryController.h	/^    ncounter_t commandQueueCount;$/;"	m	class:NVM::MemoryController
commandQueuePriority	src/MemoryController.h	/^const int commandQueuePriority = 40;$/;"	m	namespace:NVM
commandQueues	src/MemoryController.h	/^    std::deque<NVMainRequest *> *commandQueues;$/;"	m	class:NVM::MemoryController
config	src/MemoryController.h	/^    Config *config;$/;"	m	class:NVM::MemoryController
curQueue	src/MemoryController.h	/^    ncounter_t curQueue;$/;"	m	class:NVM::MemoryController
delayedRefreshCounter	src/MemoryController.h	/^    ncounter_t **delayedRefreshCounter; $/;"	m	class:NVM::MemoryController
effectiveMuxedRow	src/MemoryController.h	/^    ncounter_t ***effectiveMuxedRow;$/;"	m	class:NVM::MemoryController
effectiveRow	src/MemoryController.h	/^    ncounter_t ***effectiveRow;$/;"	m	class:NVM::MemoryController
handledRefresh	src/MemoryController.h	/^    ncycle_t handledRefresh;$/;"	m	class:NVM::MemoryController
id	src/MemoryController.h	/^    ncounter_t id;$/;"	m	class:NVM::MemoryController
lastCommandWake	src/MemoryController.h	/^    ncycle_t lastCommandWake;$/;"	m	class:NVM::MemoryController
lastIssueCycle	src/MemoryController.h	/^    ncycle_t lastIssueCycle;$/;"	m	class:NVM::MemoryController
lowPowerPriority	src/MemoryController.h	/^const int lowPowerPriority = 10;$/;"	m	namespace:NVM
m_refreshBankNum	src/MemoryController.h	/^    ncounter_t m_refreshBankNum; $/;"	m	class:NVM::MemoryController
m_tREFI	src/MemoryController.h	/^    ncycle_t m_tREFI; $/;"	m	class:NVM::MemoryController
memory	src/MemoryController.h	/^    Interconnect *memory;$/;"	m	class:NVM::MemoryController
nextRefreshBank	src/MemoryController.h	/^    ncounter_t nextRefreshRank, nextRefreshBank; $/;"	m	class:NVM::MemoryController
nextRefreshRank	src/MemoryController.h	/^    ncounter_t nextRefreshRank, nextRefreshBank; $/;"	m	class:NVM::MemoryController
operator ()	src/MemoryController.h	/^    bool operator() (NVMainRequest *request)$/;"	f	class:NVM::ComplementPredicate
operator ()	src/MemoryController.h	/^    virtual bool operator() (NVMainRequest * \/*request*\/) { return true; }$/;"	f	class:NVM::SchedulingPredicate
pred	src/MemoryController.h	/^    SchedulingPredicate *pred;$/;"	m	class:NVM::ComplementPredicate
psInterval	src/MemoryController.h	/^    ncounter_t psInterval;$/;"	m	class:NVM::MemoryController
queueModel	src/MemoryController.h	/^    QueueModel queueModel;$/;"	m	class:NVM::MemoryController
rankPowerDown	src/MemoryController.h	/^    bool *rankPowerDown;$/;"	m	class:NVM::MemoryController
refreshPriority	src/MemoryController.h	/^const int refreshPriority = 20;$/;"	m	namespace:NVM
refreshQueued	src/MemoryController.h	/^    bool **refreshQueued;$/;"	m	class:NVM::MemoryController
simulation_cycles	src/MemoryController.h	/^    ncounter_t simulation_cycles;$/;"	m	class:NVM::MemoryController
starvationCounter	src/MemoryController.h	/^    ncounter_t ***starvationCounter;$/;"	m	class:NVM::MemoryController
starvationThreshold	src/MemoryController.h	/^    ncounter_t starvationThreshold;$/;"	m	class:NVM::MemoryController
subArrayNum	src/MemoryController.h	/^    ncounter_t subArrayNum;$/;"	m	class:NVM::MemoryController
transactionQueueCount	src/MemoryController.h	/^    ncounter_t transactionQueueCount;$/;"	m	class:NVM::MemoryController
transactionQueuePriority	src/MemoryController.h	/^const int transactionQueuePriority = 30;$/;"	m	namespace:NVM
transactionQueues	src/MemoryController.h	/^    std::list<NVMainRequest *> *transactionQueues;$/;"	m	class:NVM::MemoryController
wakeupCount	src/MemoryController.h	/^    ncounter_t wakeupCount;$/;"	m	class:NVM::MemoryController
~ComplementPredicate	src/MemoryController.h	/^    ~ComplementPredicate( ) { }$/;"	f	class:NVM::ComplementPredicate
~SchedulingPredicate	src/MemoryController.h	/^    ~SchedulingPredicate( ) { }$/;"	f	class:NVM::SchedulingPredicate
AddChild	src/NVMObject.cpp	/^void NVMObject::AddChild( NVMObject *c )$/;"	f	class:NVMObject
AddHook	src/NVMObject.cpp	/^void NVMObject::AddHook( NVMObject *hook )$/;"	f	class:NVMObject
AddHookUnique	src/NVMObject.cpp	/^void NVMObject::AddHookUnique( std::vector<NVMObject *>& list, NVMObject *hook )$/;"	f	class:NVMObject
CalculateStats	src/NVMObject.cpp	/^void NVMObject::CalculateStats( )$/;"	f	class:NVMObject
CalculateStats	src/NVMObject.cpp	/^void NVMObject_hook::CalculateStats( )$/;"	f	class:NVMObject_hook
Callback	src/NVMObject.cpp	/^void NVMObject::Callback( void * \/*data*\/ )$/;"	f	class:NVMObject
Callback	src/NVMObject.cpp	/^void NVMObject_hook::Callback( void *data )$/;"	f	class:NVMObject_hook
CreateCheckpoint	src/NVMObject.cpp	/^void NVMObject::CreateCheckpoint( std::string dir )$/;"	f	class:NVMObject
Cycle	src/NVMObject.cpp	/^void NVMObject_hook::Cycle( ncycle_t steps )$/;"	f	class:NVMObject_hook
Drain	src/NVMObject.cpp	/^bool NVMObject::Drain( )$/;"	f	class:NVMObject
Drain	src/NVMObject.cpp	/^bool NVMObject_hook::Drain( )$/;"	f	class:NVMObject_hook
GetChild	src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( NVMainRequest *req )$/;"	f	class:NVMObject
GetChild	src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( ncounter_t child )$/;"	f	class:NVMObject
GetChild	src/NVMObject.cpp	/^NVMObject_hook *NVMObject::GetChild( void )$/;"	f	class:NVMObject
GetChildCount	src/NVMObject.cpp	/^ncounter_t NVMObject::GetChildCount( )$/;"	f	class:NVMObject
GetChildId	src/NVMObject.cpp	/^ncounter_t NVMObject::GetChildId( NVMObject *c )$/;"	f	class:NVMObject
GetChildren	src/NVMObject.cpp	/^std::vector<NVMObject_hook *>& NVMObject::GetChildren( )$/;"	f	class:NVMObject
GetCurrentHookType	src/NVMObject.cpp	/^HookType NVMObject::GetCurrentHookType( )$/;"	f	class:NVMObject
GetDecoder	src/NVMObject.cpp	/^AddressTranslator *NVMObject::GetDecoder( )$/;"	f	class:NVMObject
GetEventQueue	src/NVMObject.cpp	/^EventQueue *NVMObject::GetEventQueue( )$/;"	f	class:NVMObject
GetGlobalEventQueue	src/NVMObject.cpp	/^GlobalEventQueue *NVMObject::GetGlobalEventQueue( )$/;"	f	class:NVMObject
GetHookType	src/NVMObject.cpp	/^HookType NVMObject::GetHookType( )$/;"	f	class:NVMObject
GetHooks	src/NVMObject.cpp	/^std::vector<NVMObject *>& NVMObject::GetHooks( HookType h )$/;"	f	class:NVMObject
GetParams	src/NVMObject.cpp	/^Params *NVMObject::GetParams( )$/;"	f	class:NVMObject
GetParent	src/NVMObject.cpp	/^NVMObject_hook* NVMObject::GetParent( )$/;"	f	class:NVMObject
GetStats	src/NVMObject.cpp	/^Stats *NVMObject::GetStats( )$/;"	f	class:NVMObject
GetStats	src/NVMObject.cpp	/^Stats *NVMObject_hook::GetStats( )$/;"	f	class:NVMObject_hook
GetTagGenerator	src/NVMObject.cpp	/^TagGenerator *NVMObject::GetTagGenerator( )$/;"	f	class:NVMObject
GetTrampoline	src/NVMObject.cpp	/^NVMObject *NVMObject_hook::GetTrampoline( )$/;"	f	class:NVMObject_hook
Idle	src/NVMObject.cpp	/^bool NVMObject::Idle( )$/;"	f	class:NVMObject
Idle	src/NVMObject.cpp	/^bool NVMObject_hook::Idle( )$/;"	f	class:NVMObject_hook
Init	src/NVMObject.cpp	/^void NVMObject::Init( Config * )$/;"	f	class:NVMObject
IsIssuable	src/NVMObject.cpp	/^bool NVMObject::IsIssuable( NVMainRequest *, FailReason * )$/;"	f	class:NVMObject
IsIssuable	src/NVMObject.cpp	/^bool NVMObject_hook::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:NVMObject_hook
IssueAtomic	src/NVMObject.cpp	/^bool NVMObject::IssueAtomic( NVMainRequest * )$/;"	f	class:NVMObject
IssueAtomic	src/NVMObject.cpp	/^bool NVMObject_hook::IssueAtomic( NVMainRequest *req )$/;"	f	class:NVMObject_hook
IssueCommand	src/NVMObject.cpp	/^bool NVMObject::IssueCommand( NVMainRequest * )$/;"	f	class:NVMObject
IssueCommand	src/NVMObject.cpp	/^bool NVMObject_hook::IssueCommand( NVMainRequest *req )$/;"	f	class:NVMObject_hook
IssueFunctional	src/NVMObject.cpp	/^bool NVMObject::IssueFunctional( NVMainRequest * )$/;"	f	class:NVMObject
IssueFunctional	src/NVMObject.cpp	/^bool NVMObject_hook::IssueFunctional( NVMainRequest *req )$/;"	f	class:NVMObject_hook
MAX	src/NVMObject.cpp	/^ncycle_t NVMObject::MAX( const ncycle_t a, const ncycle_t b )$/;"	f	class:NVMObject
MIN	src/NVMObject.cpp	/^ncycle_t NVMObject::MIN( const ncycle_t a, const ncycle_t b )$/;"	f	class:NVMObject
NVMObject	src/NVMObject.cpp	/^NVMObject::NVMObject( )$/;"	f	class:NVMObject
NVMObject_hook	src/NVMObject.cpp	/^NVMObject_hook::NVMObject_hook( NVMObject *t )$/;"	f	class:NVMObject_hook
NextIssuable	src/NVMObject.cpp	/^ncycle_t NVMObject::NextIssuable( NVMainRequest *req )$/;"	f	class:NVMObject
NextIssuable	src/NVMObject.cpp	/^ncycle_t NVMObject_hook::NextIssuable( NVMainRequest *req )$/;"	f	class:NVMObject_hook
Notify	src/NVMObject.cpp	/^void NVMObject::Notify( NVMainRequest * )$/;"	f	class:NVMObject
Notify	src/NVMObject.cpp	/^void NVMObject_hook::Notify( NVMainRequest *req )$/;"	f	class:NVMObject_hook
PrintHierarchy	src/NVMObject.cpp	/^void NVMObject::PrintHierarchy( int depth )$/;"	f	class:NVMObject
PrintHierarchy	src/NVMObject.cpp	/^void NVMObject_hook::PrintHierarchy( int depth )$/;"	f	class:NVMObject_hook
RegisterStats	src/NVMObject.cpp	/^void NVMObject::RegisterStats( )$/;"	f	class:NVMObject
RegisterStats	src/NVMObject.cpp	/^void NVMObject_hook::RegisterStats( )$/;"	f	class:NVMObject_hook
RequestComplete	src/NVMObject.cpp	/^bool NVMObject::RequestComplete( NVMainRequest *request )$/;"	f	class:NVMObject
RequestComplete	src/NVMObject.cpp	/^bool NVMObject_hook::RequestComplete( NVMainRequest *req )$/;"	f	class:NVMObject_hook
ResetStats	src/NVMObject.cpp	/^void NVMObject::ResetStats( )$/;"	f	class:NVMObject
ResetStats	src/NVMObject.cpp	/^void NVMObject_hook::ResetStats( )$/;"	f	class:NVMObject_hook
RestoreCheckpoint	src/NVMObject.cpp	/^void NVMObject::RestoreCheckpoint( std::string dir )$/;"	f	class:NVMObject
SetCurrentHookType	src/NVMObject.cpp	/^void NVMObject::SetCurrentHookType( HookType h )$/;"	f	class:NVMObject
SetDebugName	src/NVMObject.cpp	/^void NVMObject::SetDebugName( std::string dn, Config *config )$/;"	f	class:NVMObject
SetDecoder	src/NVMObject.cpp	/^void NVMObject::SetDecoder( AddressTranslator *at )$/;"	f	class:NVMObject
SetEventQueue	src/NVMObject.cpp	/^void NVMObject::SetEventQueue( EventQueue *eq )$/;"	f	class:NVMObject
SetGlobalEventQueue	src/NVMObject.cpp	/^void NVMObject::SetGlobalEventQueue( GlobalEventQueue *geq )$/;"	f	class:NVMObject
SetHookType	src/NVMObject.cpp	/^void NVMObject::SetHookType( HookType h )$/;"	f	class:NVMObject
SetParams	src/NVMObject.cpp	/^void NVMObject::SetParams( Params *params )$/;"	f	class:NVMObject
SetParent	src/NVMObject.cpp	/^void NVMObject::SetParent( NVMObject *p )$/;"	f	class:NVMObject
SetStats	src/NVMObject.cpp	/^void NVMObject::SetStats( Stats *s )$/;"	f	class:NVMObject
SetStats	src/NVMObject.cpp	/^void NVMObject_hook::SetStats( Stats *s )$/;"	f	class:NVMObject_hook
SetTagGenerator	src/NVMObject.cpp	/^void NVMObject::SetTagGenerator( TagGenerator *tg )$/;"	f	class:NVMObject
StatName	src/NVMObject.cpp	/^std::string NVMObject::StatName( )$/;"	f	class:NVMObject
StatName	src/NVMObject.cpp	/^std::string NVMObject_hook::StatName( )$/;"	f	class:NVMObject_hook
StatName	src/NVMObject.cpp	/^void NVMObject::StatName( std::string name )$/;"	f	class:NVMObject
StatName	src/NVMObject.cpp	/^void NVMObject_hook::StatName( std::string name )$/;"	f	class:NVMObject_hook
UnsetParent	src/NVMObject.cpp	/^void NVMObject::UnsetParent( )$/;"	f	class:NVMObject
_FindChild	src/NVMObject.cpp	/^NVMObject *NVMObject::_FindChild( NVMainRequest *req, const char *childClass )$/;"	f	class:NVMObject
~NVMObject	src/NVMObject.cpp	/^NVMObject::~NVMObject( )$/;"	f	class:NVMObject
~NVMObject_hook	src/NVMObject.cpp	/^NVMObject_hook::~NVMObject_hook( )$/;"	f	class:NVMObject_hook
FindChild	src/NVMObject.h	54;"	d
FindChildType	src/NVMObject.h	57;"	d
FindModuleChildType	src/NVMObject.h	60;"	d
HookType	src/NVMObject.h	/^enum HookType { NVMHOOK_NONE = 0,$/;"	g	namespace:NVM
NVM	src/NVMObject.h	/^namespace NVM {$/;"	n
NVMClass	src/NVMObject.h	50;"	d
NVMHOOK_BOTHISSUE	src/NVMObject.h	/^                NVMHOOK_BOTHISSUE                \/* Call hook before and after *\/$/;"	e	enum:NVM::HookType
NVMHOOK_COUNT	src/NVMObject.h	/^                NVMHOOK_COUNT,                   \/* Number of UNIQUE hook types. *\/$/;"	e	enum:NVM::HookType
NVMHOOK_NONE	src/NVMObject.h	/^enum HookType { NVMHOOK_NONE = 0,$/;"	e	enum:NVM::HookType
NVMHOOK_POSTISSUE	src/NVMObject.h	/^                NVMHOOK_POSTISSUE,               \/* Call hook after IssueCommand *\/$/;"	e	enum:NVM::HookType
NVMHOOK_PREISSUE	src/NVMObject.h	/^                NVMHOOK_PREISSUE,                \/* Call hook before IssueCommand *\/$/;"	e	enum:NVM::HookType
NVMObject	src/NVMObject.h	/^class NVMObject$/;"	c	namespace:NVM
NVMObjectType	src/NVMObject.h	49;"	d
NVMObject_hook	src/NVMObject.h	/^class NVMObject_hook$/;"	c	namespace:NVM
NVMTypeMatches	src/NVMObject.h	51;"	d
__CYCLER_H__	src/NVMObject.h	37;"	d
children	src/NVMObject.h	/^    std::vector<NVMObject_hook *> children;$/;"	m	class:NVM::NVMObject
currentHookType	src/NVMObject.h	/^    HookType hookType, currentHookType;$/;"	m	class:NVM::NVMObject
debugStream	src/NVMObject.h	/^    std::ostream *debugStream;$/;"	m	class:NVM::NVMObject
decoder	src/NVMObject.h	/^    AddressTranslator *decoder;$/;"	m	class:NVM::NVMObject
eventQueue	src/NVMObject.h	/^    EventQueue *eventQueue;$/;"	m	class:NVM::NVMObject
globalEventQueue	src/NVMObject.h	/^    GlobalEventQueue *globalEventQueue;$/;"	m	class:NVM::NVMObject
hookType	src/NVMObject.h	/^    HookType hookType, currentHookType;$/;"	m	class:NVM::NVMObject
hooks	src/NVMObject.h	/^    std::vector<NVMObject *> *hooks;$/;"	m	class:NVM::NVMObject
p	src/NVMObject.h	/^    Params *p;$/;"	m	class:NVM::NVMObject
parent	src/NVMObject.h	/^    NVMObject_hook *parent;$/;"	m	class:NVM::NVMObject
statName	src/NVMObject.h	/^    std::string statName;$/;"	m	class:NVM::NVMObject
stats	src/NVMObject.h	/^    Stats *stats;$/;"	m	class:NVM::NVMObject
tagGen	src/NVMObject.h	/^    TagGenerator *tagGen;$/;"	m	class:NVM::NVMObject
trampoline	src/NVMObject.h	/^    NVMObject *trampoline;$/;"	m	class:NVM::NVMObject_hook
ConvertTiming	src/Params.cpp	/^ncycle_t Params::ConvertTiming( Config *conf, std::string param )$/;"	f	class:Params
ConvertTiming	src/Params.cpp	/^void Params::ConvertTiming( Config *conf, std::string param, ncycle_t& value )$/;"	f	class:Params
Params	src/Params.cpp	/^Params::Params( )$/;"	f	class:Params
SetParams	src/Params.cpp	/^void Params::SetParams( Config *c )$/;"	f	class:Params
~Params	src/Params.cpp	/^Params::~Params( )$/;"	f	class:Params
AddressMappingScheme	src/Params.h	/^    std::string AddressMappingScheme; \/\/ the address mapping scheme$/;"	m	class:NVM::Params
BANKS	src/Params.h	/^    ncounter_t BANKS;$/;"	m	class:NVM::Params
BPC	src/Params.h	/^    ncounter_t BPC;$/;"	m	class:NVM::Params
BanksPerRefresh	src/Params.h	/^    ncounter_t BanksPerRefresh; \/\/ the number of banks in a refresh (in lockstep)$/;"	m	class:NVM::Params
BusWidth	src/Params.h	/^    ncounter_t BusWidth;$/;"	m	class:NVM::Params
CHANNELS	src/Params.h	/^    ncounter_t CHANNELS;$/;"	m	class:NVM::Params
CLK	src/Params.h	/^    ncounter_t CLK;$/;"	m	class:NVM::Params
COLS	src/Params.h	/^    ncounter_t COLS;$/;"	m	class:NVM::Params
CPUFreq	src/Params.h	/^    ncounter_t CPUFreq;$/;"	m	class:NVM::Params
ClosePage	src/Params.h	/^    ncycle_t ClosePage; \/\/ enable close-page management policy$/;"	m	class:NVM::Params
DataEncoder	src/Params.h	/^    std::string DataEncoder;$/;"	m	class:NVM::Params
DeadlockTimer	src/Params.h	/^    ncycle_t DeadlockTimer;$/;"	m	class:NVM::Params
DelayedRefreshThreshold	src/Params.h	/^    ncounter_t DelayedRefreshThreshold; \/\/ the threshold that indicates how many refresh can be delayed$/;"	m	class:NVM::Params
DeviceWidth	src/Params.h	/^    ncounter_t DeviceWidth;$/;"	m	class:NVM::Params
EIDD0	src/Params.h	/^    double EIDD0;$/;"	m	class:NVM::Params
EIDD1	src/Params.h	/^    double EIDD1;$/;"	m	class:NVM::Params
EIDD2N	src/Params.h	/^    double EIDD2N;$/;"	m	class:NVM::Params
EIDD2P0	src/Params.h	/^    double EIDD2P0;$/;"	m	class:NVM::Params
EIDD2P1	src/Params.h	/^    double EIDD2P1;$/;"	m	class:NVM::Params
EIDD3N	src/Params.h	/^    double EIDD3N;$/;"	m	class:NVM::Params
EIDD3P	src/Params.h	/^    double EIDD3P;$/;"	m	class:NVM::Params
EIDD4R	src/Params.h	/^    double EIDD4R;$/;"	m	class:NVM::Params
EIDD4W	src/Params.h	/^    double EIDD4W;$/;"	m	class:NVM::Params
EIDD5B	src/Params.h	/^    double EIDD5B;$/;"	m	class:NVM::Params
EIDD6	src/Params.h	/^    double EIDD6;$/;"	m	class:NVM::Params
Eactstdby	src/Params.h	/^    double Eactstdby;$/;"	m	class:NVM::Params
EchoPreTrace	src/Params.h	/^    bool EchoPreTrace;$/;"	m	class:NVM::Params
EnduranceModel	src/Params.h	/^    std::string EnduranceModel;$/;"	m	class:NVM::Params
EnergyModel	src/Params.h	/^    std::string EnergyModel;$/;"	m	class:NVM::Params
Eopenrd	src/Params.h	/^    double Eopenrd;$/;"	m	class:NVM::Params
Epda	src/Params.h	/^    double Epda;$/;"	m	class:NVM::Params
Epdpf	src/Params.h	/^    double Epdpf;$/;"	m	class:NVM::Params
Epdps	src/Params.h	/^    double Epdps;$/;"	m	class:NVM::Params
Eprestdby	src/Params.h	/^    double Eprestdby;$/;"	m	class:NVM::Params
Erd	src/Params.h	/^    double Erd;$/;"	m	class:NVM::Params
Eref	src/Params.h	/^    double Eref;$/;"	m	class:NVM::Params
Ereset	src/Params.h	/^    double Ereset; $/;"	m	class:NVM::Params
Eset	src/Params.h	/^    double Eset; $/;"	m	class:NVM::Params
EventDriven	src/Params.h	/^    bool EventDriven;$/;"	m	class:NVM::Params
Ewr	src/Params.h	/^    double Ewr;$/;"	m	class:NVM::Params
Ewrpb	src/Params.h	/^    double Ewrpb;$/;"	m	class:NVM::Params
HighWaterMark	src/Params.h	/^    int HighWaterMark; \/\/ write drain high watermark$/;"	m	class:NVM::Params
InitPD	src/Params.h	/^    bool InitPD;$/;"	m	class:NVM::Params
LowWaterMark	src/Params.h	/^    int LowWaterMark; \/\/ write drain low watermark$/;"	m	class:NVM::Params
MATHeight	src/Params.h	/^    ncounter_t MATHeight;$/;"	m	class:NVM::Params
MLCLevels	src/Params.h	/^    ncounter_t MLCLevels;$/;"	m	class:NVM::Params
MULT	src/Params.h	/^    ncounter_t MULT;$/;"	m	class:NVM::Params
MaxCancellations	src/Params.h	/^    ncounter_t MaxCancellations;$/;"	m	class:NVM::Params
MemoryPrefetcher	src/Params.h	/^    std::string MemoryPrefetcher;$/;"	m	class:NVM::Params
NVM	src/Params.h	/^namespace NVM {$/;"	n
OffChipLatency	src/Params.h	/^    ncounter_t OffChipLatency;$/;"	m	class:NVM::Params
Params	src/Params.h	/^class Params$/;"	c	namespace:NVM
PauseMode	src/Params.h	/^enum PauseMode {$/;"	g	namespace:NVM
PauseMode_IIWC	src/Params.h	/^    PauseMode_IIWC,     \/\/\/< Intra-Iteration Write Cancellation: allow cancel during write pulse$/;"	e	enum:NVM::PauseMode
PauseMode_Normal	src/Params.h	/^    PauseMode_Normal,   \/\/\/< Normal pause mode: Wait until write pulse before read$/;"	e	enum:NVM::PauseMode
PauseMode_Optimal	src/Params.h	/^    PauseMode_Optimal   \/\/\/< Optimal: Same as IIWC, but consider iteration complete$/;"	e	enum:NVM::PauseMode
PauseThreshold	src/Params.h	/^    double PauseThreshold;$/;"	m	class:NVM::Params
PeriodicStatsInterval	src/Params.h	/^    ncounter_t PeriodicStatsInterval;$/;"	m	class:NVM::Params
PowerDownMode	src/Params.h	/^    std::string PowerDownMode;$/;"	m	class:NVM::Params
PrefetchBufferSize	src/Params.h	/^    ncounter_t PrefetchBufferSize;$/;"	m	class:NVM::Params
PrintAllDevices	src/Params.h	/^    bool PrintAllDevices;$/;"	m	class:NVM::Params
PrintConfig	src/Params.h	/^    bool PrintConfig;$/;"	m	class:NVM::Params
PrintGraphs	src/Params.h	/^    bool PrintGraphs;$/;"	m	class:NVM::Params
PrintPreTrace	src/Params.h	/^    bool PrintPreTrace;$/;"	m	class:NVM::Params
ProgramMode	src/Params.h	/^enum ProgramMode {$/;"	g	namespace:NVM
ProgramMode_SRMS	src/Params.h	/^    ProgramMode_SRMS,$/;"	e	enum:NVM::ProgramMode
ProgramMode_SSMR	src/Params.h	/^    ProgramMode_SSMR$/;"	e	enum:NVM::ProgramMode
RANKS	src/Params.h	/^    ncounter_t RANKS;$/;"	m	class:NVM::Params
RATE	src/Params.h	/^    ncounter_t RATE;$/;"	m	class:NVM::Params
RAW	src/Params.h	/^    ncounter_t RAW;$/;"	m	class:NVM::Params
RBSize	src/Params.h	/^    ncounter_t RBSize;$/;"	m	class:NVM::Params
ROWS	src/Params.h	/^    ncounter_t ROWS;$/;"	m	class:NVM::Params
RanksPerDIMM	src/Params.h	/^    int RanksPerDIMM;$/;"	m	class:NVM::Params
RefreshRows	src/Params.h	/^    ncounter_t RefreshRows;$/;"	m	class:NVM::Params
Rtt_cont	src/Params.h	/^    int Rtt_cont;$/;"	m	class:NVM::Params
Rtt_nom	src/Params.h	/^    int Rtt_nom;$/;"	m	class:NVM::Params
Rtt_wr	src/Params.h	/^    int Rtt_wr;$/;"	m	class:NVM::Params
ScheduleScheme	src/Params.h	/^    int ScheduleScheme; \/\/ command scheduling policy $/;"	m	class:NVM::Params
StaggerRefresh	src/Params.h	/^    bool StaggerRefresh;$/;"	m	class:NVM::Params
UniformWrites	src/Params.h	/^    bool UniformWrites;$/;"	m	class:NVM::Params
UseLowPower	src/Params.h	/^    bool UseLowPower;$/;"	m	class:NVM::Params
UsePrecharge	src/Params.h	/^    bool UsePrecharge;$/;"	m	class:NVM::Params
UseRefresh	src/Params.h	/^    bool UseRefresh;$/;"	m	class:NVM::Params
Vddq	src/Params.h	/^    double Vddq;$/;"	m	class:NVM::Params
Voltage	src/Params.h	/^    double Voltage;$/;"	m	class:NVM::Params
Vssq	src/Params.h	/^    double Vssq;$/;"	m	class:NVM::Params
WPMaxVariance	src/Params.h	/^    ncycle_t WPMaxVariance;$/;"	m	class:NVM::Params
WPVariance	src/Params.h	/^    ncounter_t WPVariance;$/;"	m	class:NVM::Params
WriteAllBits	src/Params.h	/^    bool WriteAllBits; \/\/ Set false to calculate write energy on a per-bit basis$/;"	m	class:NVM::Params
WritePausing	src/Params.h	/^    bool WritePausing;$/;"	m	class:NVM::Params
__NVM_PARAMS_H__	src/Params.h	37;"	d
debugClasses	src/Params.h	/^    std::set<std::string> debugClasses;$/;"	m	class:NVM::Params
debugOn	src/Params.h	/^    bool debugOn;$/;"	m	class:NVM::Params
nWP00	src/Params.h	/^    ncycle_t nWP00;$/;"	m	class:NVM::Params
nWP01	src/Params.h	/^    ncycle_t nWP01;$/;"	m	class:NVM::Params
nWP10	src/Params.h	/^    ncycle_t nWP10;$/;"	m	class:NVM::Params
nWP11	src/Params.h	/^    ncycle_t nWP11;$/;"	m	class:NVM::Params
pauseMode	src/Params.h	/^    PauseMode pauseMode;$/;"	m	class:NVM::Params
programMode	src/Params.h	/^    ProgramMode programMode;$/;"	m	class:NVM::Params
tAL	src/Params.h	/^    ncycle_t tAL;$/;"	m	class:NVM::Params
tBURST	src/Params.h	/^    ncycle_t tBURST;$/;"	m	class:NVM::Params
tCAS	src/Params.h	/^    ncycle_t tCAS;$/;"	m	class:NVM::Params
tCCD	src/Params.h	/^    ncycle_t tCCD;$/;"	m	class:NVM::Params
tCMD	src/Params.h	/^    ncycle_t tCMD;$/;"	m	class:NVM::Params
tCWD	src/Params.h	/^    ncycle_t tCWD;$/;"	m	class:NVM::Params
tOST	src/Params.h	/^    ncycle_t tOST;$/;"	m	class:NVM::Params
tPD	src/Params.h	/^    ncycle_t tPD;$/;"	m	class:NVM::Params
tPPD	src/Params.h	/^    ncycle_t tPPD;$/;"	m	class:NVM::Params
tRAS	src/Params.h	/^    ncycle_t tRAS;$/;"	m	class:NVM::Params
tRAW	src/Params.h	/^    ncycle_t tRAW;$/;"	m	class:NVM::Params
tRCD	src/Params.h	/^    ncycle_t tRCD;$/;"	m	class:NVM::Params
tRDB	src/Params.h	/^    ncycle_t tRDB;$/;"	m	class:NVM::Params
tRDPDEN	src/Params.h	/^    ncycle_t tRDPDEN; \/\/ interval between Read\/ReadA and PowerDown$/;"	m	class:NVM::Params
tREFW	src/Params.h	/^    ncycle_t tREFW;$/;"	m	class:NVM::Params
tRFC	src/Params.h	/^    ncycle_t tRFC;$/;"	m	class:NVM::Params
tRP	src/Params.h	/^    ncycle_t tRP;$/;"	m	class:NVM::Params
tRRDR	src/Params.h	/^    ncycle_t tRRDR;$/;"	m	class:NVM::Params
tRRDW	src/Params.h	/^    ncycle_t tRRDW;$/;"	m	class:NVM::Params
tRTP	src/Params.h	/^    ncycle_t tRTP;$/;"	m	class:NVM::Params
tRTRS	src/Params.h	/^    ncycle_t tRTRS;$/;"	m	class:NVM::Params
tWP	src/Params.h	/^    ncycle_t tWP;$/;"	m	class:NVM::Params
tWP0	src/Params.h	/^    ncycle_t tWP0;$/;"	m	class:NVM::Params
tWP1	src/Params.h	/^    ncycle_t tWP1;$/;"	m	class:NVM::Params
tWR	src/Params.h	/^    ncycle_t tWR;$/;"	m	class:NVM::Params
tWRAPDEN	src/Params.h	/^    ncycle_t tWRAPDEN; \/\/ interval between WriteA and PowerDown$/;"	m	class:NVM::Params
tWRPDEN	src/Params.h	/^    ncycle_t tWRPDEN; \/\/ interval between Write and PowerDown$/;"	m	class:NVM::Params
tWTR	src/Params.h	/^    ncycle_t tWTR;$/;"	m	class:NVM::Params
tXP	src/Params.h	/^    ncycle_t tXP;$/;"	m	class:NVM::Params
tXPDLL	src/Params.h	/^    ncycle_t tXPDLL;$/;"	m	class:NVM::Params
tXS	src/Params.h	/^    ncycle_t tXS;$/;"	m	class:NVM::Params
tXSDLL	src/Params.h	/^    ncycle_t tXSDLL;$/;"	m	class:NVM::Params
DoPrefetch	src/Prefetcher.cpp	/^bool Prefetcher::DoPrefetch( NVMainRequest * \/*triggerOp*\/, $/;"	f	class:Prefetcher
NotifyAccess	src/Prefetcher.cpp	/^bool Prefetcher::NotifyAccess( NVMainRequest * \/*accessOp*\/, $/;"	f	class:Prefetcher
NVM	src/Prefetcher.h	/^namespace NVM {$/;"	n
Prefetcher	src/Prefetcher.h	/^    Prefetcher( ) { }$/;"	f	class:NVM::Prefetcher
Prefetcher	src/Prefetcher.h	/^class Prefetcher$/;"	c	namespace:NVM
__NVMAIN_PREFETCHER_H__	src/Prefetcher.h	35;"	d
~Prefetcher	src/Prefetcher.h	/^    virtual ~Prefetcher( ) { }$/;"	f	class:NVM::Prefetcher
Idle	src/Rank.cpp	/^bool Rank::Idle( )$/;"	f	class:Rank
NVM	src/Rank.h	/^namespace NVM {$/;"	n
RANK_CLOSED	src/Rank.h	/^    RANK_CLOSED,    \/***< all banks in the rank are closed (standby) *\/$/;"	e	enum:NVM::RankState
RANK_OPEN	src/Rank.h	/^    RANK_OPEN,      \/***< Rank has at least one open bank  *\/$/;"	e	enum:NVM::RankState
RANK_PDA	src/Rank.h	/^    RANK_PDA,       \/***< Rank is in active powered down mode *\/$/;"	e	enum:NVM::RankState
RANK_PDPF	src/Rank.h	/^    RANK_PDPF,      \/***< Rank is in precharge powered down, fast exit mode *\/$/;"	e	enum:NVM::RankState
RANK_PDPS	src/Rank.h	/^    RANK_PDPS       \/***< Rank is in precharge powered down, slow exit mode *\/$/;"	e	enum:NVM::RankState
RANK_REFRESHING	src/Rank.h	/^    RANK_REFRESHING,\/***< some banks in the rank are refreshing *\/$/;"	e	enum:NVM::RankState
RANK_UNKNOWN	src/Rank.h	/^    RANK_UNKNOWN,   \/***< Unknown state. Uh oh. *\/$/;"	e	enum:NVM::RankState
Rank	src/Rank.h	/^    Rank( ) { }$/;"	f	class:NVM::Rank
Rank	src/Rank.h	/^class Rank : public NVMObject$/;"	c	namespace:NVM
RankState	src/Rank.h	/^enum RankState $/;"	g	namespace:NVM
SetConfig	src/Rank.h	/^    virtual void SetConfig( Config * \/*c*\/, bool \/*createChildren*\/ = true ) { }$/;"	f	class:NVM::Rank
__RANK_H__	src/Rank.h	37;"	d
~Rank	src/Rank.h	/^    ~Rank( ) { }$/;"	f	class:NVM::Rank
GetConfig	src/SimInterface.cpp	/^Config *SimInterface::GetConfig( )$/;"	f	class:SimInterface
GetDataAtAddress	src/SimInterface.cpp	/^int SimInterface::GetDataAtAddress( uint64_t address, NVMDataBlock *data )$/;"	f	class:SimInterface
SetConfig	src/SimInterface.cpp	/^void SimInterface::SetConfig( Config *config, bool \/*createChildren*\/ )$/;"	f	class:SimInterface
SetDataAtAddress	src/SimInterface.cpp	/^void SimInterface::SetDataAtAddress( uint64_t address, NVMDataBlock& data )$/;"	f	class:SimInterface
NVM	src/SimInterface.h	/^namespace NVM {$/;"	n
SimInterface	src/SimInterface.h	/^    SimInterface( ) { }$/;"	f	class:NVM::SimInterface
SimInterface	src/SimInterface.h	/^class SimInterface$/;"	c	namespace:NVM
__SIMINTERFACE_H__	src/SimInterface.h	35;"	d
accessCounts	src/SimInterface.h	/^    std::map< uint64_t, unsigned int > accessCounts;$/;"	m	class:NVM::SimInterface
conf	src/SimInterface.h	/^    Config *conf;$/;"	m	class:NVM::SimInterface
memoryData	src/SimInterface.h	/^    std::map< uint64_t, NVMDataBlock* > memoryData;$/;"	m	class:NVM::SimInterface
~SimInterface	src/SimInterface.h	/^    virtual ~SimInterface( ) { }$/;"	f	class:NVM::SimInterface
Print	src/Stats.cpp	/^void StatBase::Print( std::ostream& stream, ncounter_t psInterval )$/;"	f	class:StatBase
PrintAll	src/Stats.cpp	/^void Stats::PrintAll( std::ostream& stream )$/;"	f	class:Stats
Reset	src/Stats.cpp	/^void StatBase::Reset( )$/;"	f	class:StatBase
ResetAll	src/Stats.cpp	/^void Stats::ResetAll( )$/;"	f	class:Stats
Stats	src/Stats.cpp	/^Stats::Stats( )$/;"	f	class:Stats
addStat	src/Stats.cpp	/^void Stats::addStat( StatType stat, StatType resetValue, std::string statType, size_t typeSize, std::string name, std::string units )$/;"	f	class:Stats
getStat	src/Stats.cpp	/^StatType Stats::getStat( std::string name )$/;"	f	class:Stats
removeStat	src/Stats.cpp	/^void Stats::removeStat( StatType stat )$/;"	f	class:Stats
~Stats	src/Stats.cpp	/^Stats::~Stats( )$/;"	f	class:Stats
AddStat	src/Stats.h	38;"	d
AddUnitStat	src/Stats.h	42;"	d
CastStat	src/Stats.h	63;"	d
GetName	src/Stats.h	/^    std::string GetName( ) { return name; }$/;"	f	class:NVM::StatBase
GetResetValue	src/Stats.h	/^    void *GetResetValue( ) { return resetValue; }$/;"	f	class:NVM::StatBase
GetStat	src/Stats.h	60;"	d
GetTypeName	src/Stats.h	/^    std::string GetTypeName() { return statType; }$/;"	f	class:NVM::StatBase
GetTypeSize	src/Stats.h	/^    size_t GetTypeSize( ) { return typeSize; }$/;"	f	class:NVM::StatBase
GetUnits	src/Stats.h	/^    std::string GetUnits( ) { return units; }$/;"	f	class:NVM::StatBase
GetValue	src/Stats.h	/^    void* GetValue( ) { return value; }$/;"	f	class:NVM::StatBase
NVM	src/Stats.h	/^namespace NVM {$/;"	n
RemoveStat	src/Stats.h	57;"	d
SetName	src/Stats.h	/^    void SetName( std::string n ) { name = n; }$/;"	f	class:NVM::StatBase
SetResetValue	src/Stats.h	/^    void SetResetValue( StatType rval ) { resetValue = rval; }$/;"	f	class:NVM::StatBase
SetStatType	src/Stats.h	/^    void SetStatType( std::string st, size_t ts ) { statType = st; typeSize = ts; }$/;"	f	class:NVM::StatBase
SetUnits	src/Stats.h	/^    void SetUnits( std::string u ) { units = u; }$/;"	f	class:NVM::StatBase
SetValue	src/Stats.h	/^    void SetValue( StatType val ) { value = val; }$/;"	f	class:NVM::StatBase
StatBase	src/Stats.h	/^    StatBase( ) { }$/;"	f	class:NVM::StatBase
StatBase	src/Stats.h	/^class StatBase$/;"	c	namespace:NVM
StatType	src/Stats.h	/^typedef void * StatType;$/;"	t	namespace:NVM
Stats	src/Stats.h	/^class Stats$/;"	c	namespace:NVM
_AddStat	src/Stats.h	46;"	d
__SRC_STATS_H__	src/Stats.h	35;"	d
name	src/Stats.h	/^    std::string name, statType, units;$/;"	m	class:NVM::StatBase
psInterval	src/Stats.h	/^    ncounter_t psInterval;$/;"	m	class:NVM::Stats
resetValue	src/Stats.h	/^    StatType resetValue;$/;"	m	class:NVM::StatBase
statList	src/Stats.h	/^    std::vector<StatBase *> statList;$/;"	m	class:NVM::Stats
statType	src/Stats.h	/^    std::string name, statType, units;$/;"	m	class:NVM::StatBase
typeSize	src/Stats.h	/^    size_t typeSize;$/;"	m	class:NVM::StatBase
units	src/Stats.h	/^    std::string name, statType, units;$/;"	m	class:NVM::StatBase
value	src/Stats.h	/^    StatType value;$/;"	m	class:NVM::StatBase
~StatBase	src/Stats.h	/^    ~StatBase( ) { }$/;"	f	class:NVM::StatBase
Activate	src/SubArray.cpp	/^bool SubArray::Activate( NVMainRequest *request )$/;"	f	class:SubArray
BetweenWriteIterations	src/SubArray.cpp	/^bool SubArray::BetweenWriteIterations( )$/;"	f	class:SubArray
CalculateStats	src/SubArray.cpp	/^void SubArray::CalculateStats( )$/;"	f	class:SubArray
CheckWritePausing	src/SubArray.cpp	/^void SubArray::CheckWritePausing( )$/;"	f	class:SubArray
Count32MLC1	src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::Count32MLC1( uint32_t data )$/;"	f	class:SubArray
Count32MLC2	src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::Count32MLC2( uint8_t value, uint32_t data )$/;"	f	class:SubArray
CountBitsMLC1	src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::CountBitsMLC1( uint8_t value, uint32_t *data, ncounter_t words )$/;"	f	class:SubArray
CountBitsMLC2	src/SubArray.cpp	/^ncounter_t __attribute__((optimize("0"))) SubArray::CountBitsMLC2( uint8_t value, uint32_t *data, ncounter_t words )$/;"	f	class:SubArray
Cycle	src/SubArray.cpp	/^void SubArray::Cycle( ncycle_t )$/;"	f	class:SubArray
GetId	src/SubArray.cpp	/^ncounter_t SubArray::GetId( )$/;"	f	class:SubArray
GetName	src/SubArray.cpp	/^std::string SubArray::GetName( )$/;"	f	class:SubArray
GetState	src/SubArray.cpp	/^SubArrayState SubArray::GetState( ) $/;"	f	class:SubArray
Idle	src/SubArray.cpp	/^bool SubArray::Idle( )$/;"	f	class:SubArray
IsIssuable	src/SubArray.cpp	/^bool SubArray::IsIssuable( NVMainRequest *req, FailReason *reason )$/;"	f	class:SubArray
IssueCommand	src/SubArray.cpp	/^bool SubArray::IssueCommand( NVMainRequest *req )$/;"	f	class:SubArray
NextIssuable	src/SubArray.cpp	/^ncycle_t SubArray::NextIssuable( NVMainRequest *request )$/;"	f	class:SubArray
Precharge	src/SubArray.cpp	/^bool SubArray::Precharge( NVMainRequest *request )$/;"	f	class:SubArray
Read	src/SubArray.cpp	/^bool SubArray::Read( NVMainRequest *request )$/;"	f	class:SubArray
Refresh	src/SubArray.cpp	/^bool SubArray::Refresh( NVMainRequest* request )$/;"	f	class:SubArray
RegisterStats	src/SubArray.cpp	/^void SubArray::RegisterStats( )$/;"	f	class:SubArray
RequestComplete	src/SubArray.cpp	/^bool SubArray::RequestComplete( NVMainRequest *req )$/;"	f	class:SubArray
SetConfig	src/SubArray.cpp	/^void SubArray::SetConfig( Config *c, bool createChildren )$/;"	f	class:SubArray
SetId	src/SubArray.cpp	/^void SubArray::SetId( ncounter_t id )$/;"	f	class:SubArray
SetName	src/SubArray.cpp	/^void SubArray::SetName( std::string )$/;"	f	class:SubArray
SubArray	src/SubArray.cpp	/^SubArray::SubArray( )$/;"	f	class:SubArray
UpdateEndurance	src/SubArray.cpp	/^ncycle_t SubArray::UpdateEndurance( NVMainRequest *request )$/;"	f	class:SubArray
Write	src/SubArray.cpp	/^bool SubArray::Write( NVMainRequest *request )$/;"	f	class:SubArray
WriteCellData	src/SubArray.cpp	49;"	d	file:
WriteCellData2	src/SubArray.cpp	/^ncycle_t SubArray::WriteCellData2( NVMainRequest *request )$/;"	f	class:SubArray
~SubArray	src/SubArray.cpp	/^SubArray::~SubArray( )$/;"	f	class:SubArray
DELAYED_WRITE	src/SubArray.h	/^    DELAYED_WRITE \/* data is stored in a write buffer *\/$/;"	e	enum:NVM::WriteMode
GetActiveWaits	src/SubArray.h	/^    ncycle_t GetActiveWaits( ) { return actWaits; }$/;"	f	class:NVM::SubArray
GetDataCycles	src/SubArray.h	/^    ncycle_t GetDataCycles( ) { return dataCycles; }$/;"	f	class:NVM::SubArray
GetNextActivate	src/SubArray.h	/^    ncycle_t GetNextActivate( ) { return nextActivate; }$/;"	f	class:NVM::SubArray
GetNextPrecharge	src/SubArray.h	/^    ncycle_t GetNextPrecharge( ) { return nextPrecharge; }$/;"	f	class:NVM::SubArray
GetNextRead	src/SubArray.h	/^    ncycle_t GetNextRead( ) { return nextRead; }$/;"	f	class:NVM::SubArray
GetNextWrite	src/SubArray.h	/^    ncycle_t GetNextWrite( ) { return nextWrite; }$/;"	f	class:NVM::SubArray
GetOpenRow	src/SubArray.h	/^    uint64_t GetOpenRow( ) { return openRow; }$/;"	f	class:NVM::SubArray
IsWriting	src/SubArray.h	/^    bool IsWriting( ) { return isWriting; }$/;"	f	class:NVM::SubArray
MATHeight	src/SubArray.h	/^    ncounter_t MATHeight;$/;"	m	class:NVM::SubArray
MATWidth	src/SubArray.h	/^    ncounter_t MATWidth;$/;"	m	class:NVM::SubArray
NVM	src/SubArray.h	/^namespace NVM {$/;"	n
SUBARRAY_CLOSED	src/SubArray.h	/^    SUBARRAY_CLOSED,      \/* SubArray is idle. *\/$/;"	e	enum:NVM::SubArrayState
SUBARRAY_OPEN	src/SubArray.h	/^    SUBARRAY_OPEN,        \/* SubArray has an open row *\/$/;"	e	enum:NVM::SubArrayState
SUBARRAY_PRECHARGING	src/SubArray.h	/^    SUBARRAY_PRECHARGING, \/* SubArray is precharging and return to SUBARRAY_CLOSED *\/$/;"	e	enum:NVM::SubArrayState
SUBARRAY_REFRESHING	src/SubArray.h	/^    SUBARRAY_REFRESHING   \/* SubArray is refreshing and return to SUBARRAY_CLOSED *\/$/;"	e	enum:NVM::SubArrayState
SUBARRAY_UNKNOWN	src/SubArray.h	/^    SUBARRAY_UNKNOWN,     \/* Unknown state. Uh oh. *\/$/;"	e	enum:NVM::SubArrayState
SubArray	src/SubArray.h	/^class SubArray : public NVMObject$/;"	c	namespace:NVM
SubArrayState	src/SubArray.h	/^enum SubArrayState $/;"	g	namespace:NVM
WRITE_BACK	src/SubArray.h	/^    WRITE_BACK, \/* only modify the row buffer *\/$/;"	e	enum:NVM::WriteMode
WRITE_THROUGH	src/SubArray.h	/^    WRITE_THROUGH, \/* modify both row buffer and cell *\/$/;"	e	enum:NVM::WriteMode
WriteMode	src/SubArray.h	/^enum WriteMode $/;"	g	namespace:NVM
__SUBARRAY_H__	src/SubArray.h	35;"	d
actWaitAverage	src/SubArray.h	/^    double actWaitAverage;$/;"	m	class:NVM::SubArray
actWaitTotal	src/SubArray.h	/^    ncounter_t actWaitTotal;$/;"	m	class:NVM::SubArray
actWaits	src/SubArray.h	/^    ncounter_t actWaits;$/;"	m	class:NVM::SubArray
activates	src/SubArray.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::SubArray
activeEnergy	src/SubArray.h	/^    double activeEnergy;$/;"	m	class:NVM::SubArray
averageEndurance	src/SubArray.h	/^    uint64_t worstCaseEndurance, averageEndurance;$/;"	m	class:NVM::SubArray
averagePausedRequestProgress	src/SubArray.h	/^    double averagePausedRequestProgress;$/;"	m	class:NVM::SubArray
averagePausesPerRequest	src/SubArray.h	/^    double averagePausesPerRequest;$/;"	m	class:NVM::SubArray
averageWriteIterations	src/SubArray.h	/^    ncounter_t averageWriteIterations;$/;"	m	class:NVM::SubArray
averageWriteTime	src/SubArray.h	/^    double averageWriteTime;$/;"	m	class:NVM::SubArray
burstEnergy	src/SubArray.h	/^    double burstEnergy;$/;"	m	class:NVM::SubArray
cancelCountHisto	src/SubArray.h	/^    std::string cancelCountHisto;$/;"	m	class:NVM::SubArray
cancelCountMap	src/SubArray.h	/^    std::map<uint64_t, uint64_t> cancelCountMap;$/;"	m	class:NVM::SubArray
cancelledWriteTime	src/SubArray.h	/^    ncounter_t cancelledWriteTime;$/;"	m	class:NVM::SubArray
cancelledWrites	src/SubArray.h	/^    ncounter_t cancelledWrites;$/;"	m	class:NVM::SubArray
conf	src/SubArray.h	/^    Config *conf;$/;"	m	class:NVM::SubArray
dataCycles	src/SubArray.h	/^    ncounter_t dataCycles;$/;"	m	class:NVM::SubArray
dataEncoder	src/SubArray.h	/^    DataEncoder *dataEncoder;$/;"	m	class:NVM::SubArray
endrModel	src/SubArray.h	/^    EnduranceModel *endrModel;$/;"	m	class:NVM::SubArray
idleTimer	src/SubArray.h	/^    ncounter_t idleTimer;$/;"	m	class:NVM::SubArray
isWriting	src/SubArray.h	/^    bool isWriting;$/;"	m	class:NVM::SubArray
lastActivate	src/SubArray.h	/^    ncycle_t lastActivate;$/;"	m	class:NVM::SubArray
lastOperation	src/SubArray.h	/^    NVMainRequest lastOperation;$/;"	m	class:NVM::SubArray
measuredPauses	src/SubArray.h	/^    ncounter_t measuredPauses;$/;"	m	class:NVM::SubArray
measuredProgresses	src/SubArray.h	/^    ncounter_t measuredProgresses;$/;"	m	class:NVM::SubArray
measuredWriteTimes	src/SubArray.h	/^    ncounter_t measuredWriteTimes;$/;"	m	class:NVM::SubArray
mlcTimingHisto	src/SubArray.h	/^    std::string mlcTimingHisto;$/;"	m	class:NVM::SubArray
mlcTimingMap	src/SubArray.h	/^    std::map<uint64_t, uint64_t> mlcTimingMap;$/;"	m	class:NVM::SubArray
nextActivate	src/SubArray.h	/^    ncycle_t nextActivate;$/;"	m	class:NVM::SubArray
nextActivatePreWrite	src/SubArray.h	/^    ncycle_t nextActivatePreWrite;$/;"	m	class:NVM::SubArray
nextCommand	src/SubArray.h	/^    BulkCommand nextCommand;$/;"	m	class:NVM::SubArray
nextPowerDown	src/SubArray.h	/^    ncycle_t nextPowerDown;$/;"	m	class:NVM::SubArray
nextPowerDownPreWrite	src/SubArray.h	/^    ncycle_t nextPowerDownPreWrite;$/;"	m	class:NVM::SubArray
nextPrecharge	src/SubArray.h	/^    ncycle_t nextPrecharge;$/;"	m	class:NVM::SubArray
nextPrechargePreWrite	src/SubArray.h	/^    ncycle_t nextPrechargePreWrite;$/;"	m	class:NVM::SubArray
nextRead	src/SubArray.h	/^    ncycle_t nextRead;$/;"	m	class:NVM::SubArray
nextReadPreWrite	src/SubArray.h	/^    ncycle_t nextReadPreWrite;$/;"	m	class:NVM::SubArray
nextWrite	src/SubArray.h	/^    ncycle_t nextWrite;$/;"	m	class:NVM::SubArray
nextWritePreWrite	src/SubArray.h	/^    ncycle_t nextWritePreWrite;$/;"	m	class:NVM::SubArray
num00Writes	src/SubArray.h	/^    ncounter_t num00Writes;$/;"	m	class:NVM::SubArray
num01Writes	src/SubArray.h	/^    ncounter_t num01Writes;$/;"	m	class:NVM::SubArray
num10Writes	src/SubArray.h	/^    ncounter_t num10Writes;$/;"	m	class:NVM::SubArray
num11Writes	src/SubArray.h	/^    ncounter_t num11Writes;$/;"	m	class:NVM::SubArray
openRow	src/SubArray.h	/^    ncounter_t openRow;$/;"	m	class:NVM::SubArray
pausedWrites	src/SubArray.h	/^    ncounter_t pausedWrites;$/;"	m	class:NVM::SubArray
precharges	src/SubArray.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::SubArray
psInterval	src/SubArray.h	/^    ncounter_t psInterval;$/;"	m	class:NVM::SubArray
reads	src/SubArray.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::SubArray
refreshEnergy	src/SubArray.h	/^    double refreshEnergy;$/;"	m	class:NVM::SubArray
refreshes	src/SubArray.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::SubArray
state	src/SubArray.h	/^    SubArrayState state;$/;"	m	class:NVM::SubArray
subArrayEnergy	src/SubArray.h	/^    double subArrayEnergy;$/;"	m	class:NVM::SubArray
subArrayId	src/SubArray.h	/^    ncounter_t subArrayId;$/;"	m	class:NVM::SubArray
worstCaseEndurance	src/SubArray.h	/^    uint64_t worstCaseEndurance, averageEndurance;$/;"	m	class:NVM::SubArray
worstCaseWrite	src/SubArray.h	/^    ncycle_t worstCaseWrite;$/;"	m	class:NVM::SubArray
wpCancelHisto	src/SubArray.h	/^    std::string wpCancelHisto;$/;"	m	class:NVM::SubArray
wpCancelMap	src/SubArray.h	/^    std::map<double, uint64_t> wpCancelMap;$/;"	m	class:NVM::SubArray
wpPauseHisto	src/SubArray.h	/^    std::string wpPauseHisto;$/;"	m	class:NVM::SubArray
wpPauseMap	src/SubArray.h	/^    std::map<double, uint64_t> wpPauseMap;$/;"	m	class:NVM::SubArray
writeBackRequests	src/SubArray.h	/^    std::vector<NVMainRequest *> writeBackRequests;$/;"	m	class:NVM::SubArray
writeCycle	src/SubArray.h	/^    bool writeCycle;$/;"	m	class:NVM::SubArray
writeEnd	src/SubArray.h	/^    ncycle_t writeEnd;$/;"	m	class:NVM::SubArray
writeEnergy	src/SubArray.h	/^    double writeEnergy;$/;"	m	class:NVM::SubArray
writeEvent	src/SubArray.h	/^    NVM::Event *writeEvent;$/;"	m	class:NVM::SubArray
writeEventTime	src/SubArray.h	/^    ncycle_t writeEventTime;$/;"	m	class:NVM::SubArray
writeIterationStarts	src/SubArray.h	/^    std::set<ncycle_t> writeIterationStarts;$/;"	m	class:NVM::SubArray
writeMode	src/SubArray.h	/^    WriteMode writeMode;$/;"	m	class:NVM::SubArray
writeRequest	src/SubArray.h	/^    NVMainRequest *writeRequest;$/;"	m	class:NVM::SubArray
writeStart	src/SubArray.h	/^    ncycle_t writeStart;$/;"	m	class:NVM::SubArray
writes	src/SubArray.h	/^    ncounter_t reads, writes, activates, precharges, refreshes;$/;"	m	class:NVM::SubArray
CreateTag	src/TagGenerator.cpp	/^int TagGenerator::CreateTag( std::string name )$/;"	f	class:TagGenerator
GetTagId	src/TagGenerator.cpp	/^int TagGenerator::GetTagId( std::string name )$/;"	f	class:TagGenerator
GetTagName	src/TagGenerator.cpp	/^std::string TagGenerator::GetTagName( int tag )$/;"	f	class:TagGenerator
TagGenerator	src/TagGenerator.cpp	/^TagGenerator::TagGenerator( int startId )$/;"	f	class:TagGenerator
~TagGenerator	src/TagGenerator.cpp	/^TagGenerator::~TagGenerator( )$/;"	f	class:TagGenerator
NVM	src/TagGenerator.h	/^namespace NVM {$/;"	n
TagGenerator	src/TagGenerator.h	/^class TagGenerator$/;"	c	namespace:NVM
__NVMAIN_TAGGENERATOR_H__	src/TagGenerator.h	35;"	d
nextTag	src/TagGenerator.h	/^    int nextTag;$/;"	m	class:NVM::TagGenerator
tagNames	src/TagGenerator.h	/^    std::map<std::string, int> tagNames;$/;"	m	class:NVM::TagGenerator
GetBitWidths	src/TranslationMethod.cpp	/^void TranslationMethod::GetBitWidths( unsigned int *rowBits, unsigned int *colBits, unsigned int *bankBits,$/;"	f	class:TranslationMethod
GetCount	src/TranslationMethod.cpp	/^void TranslationMethod::GetCount( uint64_t *rows, uint64_t *cols, uint64_t *banks, $/;"	f	class:TranslationMethod
GetOrder	src/TranslationMethod.cpp	/^void TranslationMethod::GetOrder( int *row, int *col, int *bank, int *rank, int *channel, int *subarray )$/;"	f	class:TranslationMethod
SetAddressMappingScheme	src/TranslationMethod.cpp	/^void TranslationMethod::SetAddressMappingScheme( std::string scheme )$/;"	f	class:TranslationMethod
SetBitWidths	src/TranslationMethod.cpp	/^void TranslationMethod::SetBitWidths( unsigned int rowBits, unsigned int colBits, unsigned int bankBits,$/;"	f	class:TranslationMethod
SetCount	src/TranslationMethod.cpp	/^void TranslationMethod::SetCount( uint64_t rows, uint64_t cols, uint64_t banks, $/;"	f	class:TranslationMethod
SetOrder	src/TranslationMethod.cpp	/^void TranslationMethod::SetOrder( int row, int col, int bank, int rank, int channel, int subarray )$/;"	f	class:TranslationMethod
TranslationMethod	src/TranslationMethod.cpp	/^TranslationMethod::TranslationMethod( )$/;"	f	class:TranslationMethod
~TranslationMethod	src/TranslationMethod.cpp	/^TranslationMethod::~TranslationMethod( )$/;"	f	class:TranslationMethod
MEM_BANK	src/TranslationMethod.h	/^    MEM_BANK = 2, $/;"	e	enum:NVM::MemoryPartition
MEM_CHANNEL	src/TranslationMethod.h	/^    MEM_CHANNEL = 4,$/;"	e	enum:NVM::MemoryPartition
MEM_COL	src/TranslationMethod.h	/^    MEM_COL = 1, $/;"	e	enum:NVM::MemoryPartition
MEM_RANK	src/TranslationMethod.h	/^    MEM_RANK = 3, $/;"	e	enum:NVM::MemoryPartition
MEM_ROW	src/TranslationMethod.h	/^    MEM_ROW = 0, $/;"	e	enum:NVM::MemoryPartition
MEM_SUBARRAY	src/TranslationMethod.h	/^    MEM_SUBARRAY = 5,$/;"	e	enum:NVM::MemoryPartition
MEM_UNKNOWN	src/TranslationMethod.h	/^    MEM_UNKNOWN = 100$/;"	e	enum:NVM::MemoryPartition
MemoryPartition	src/TranslationMethod.h	/^enum MemoryPartition $/;"	g	namespace:NVM
NVM	src/TranslationMethod.h	/^namespace NVM {$/;"	n
TranslationMethod	src/TranslationMethod.h	/^class TranslationMethod$/;"	c	namespace:NVM
__TRANSLATIONMETHOD_H__	src/TranslationMethod.h	37;"	d
bitWidths	src/TranslationMethod.h	/^    unsigned int bitWidths[6];$/;"	m	class:NVM::TranslationMethod
count	src/TranslationMethod.h	/^    uint64_t count[6];$/;"	m	class:NVM::TranslationMethod
order	src/TranslationMethod.h	/^    int order[6];$/;"	m	class:NVM::TranslationMethod
GenericTraceReader	traceReader/GenericTraceReader.h	/^    GenericTraceReader( ) { }$/;"	f	class:NVM::GenericTraceReader
GenericTraceReader	traceReader/GenericTraceReader.h	/^class GenericTraceReader$/;"	c	namespace:NVM
NVM	traceReader/GenericTraceReader.h	/^namespace NVM {$/;"	n
__GENERICTRACEREADER_H__	traceReader/GenericTraceReader.h	35;"	d
~GenericTraceReader	traceReader/GenericTraceReader.h	/^    virtual ~GenericTraceReader( ) { }$/;"	f	class:NVM::GenericTraceReader
GetNextAccess	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^bool NVMainTraceReader::GetNextAccess( TraceLine *nextAccess )$/;"	f	class:NVMainTraceReader
GetNextNAccesses	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^int NVMainTraceReader::GetNextNAccesses( unsigned int N, $/;"	f	class:NVMainTraceReader
GetTraceFile	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^std::string NVMainTraceReader::GetTraceFile( )$/;"	f	class:NVMainTraceReader
NVMainTraceReader	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^NVMainTraceReader::NVMainTraceReader( )$/;"	f	class:NVMainTraceReader
SetTraceFile	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^void NVMainTraceReader::SetTraceFile( std::string file )$/;"	f	class:NVMainTraceReader
~NVMainTraceReader	traceReader/NVMainTrace/NVMainTraceReader.cpp	/^NVMainTraceReader::~NVMainTraceReader( )$/;"	f	class:NVMainTraceReader
NVM	traceReader/NVMainTrace/NVMainTraceReader.h	/^namespace NVM {$/;"	n
NVMainTraceReader	traceReader/NVMainTrace/NVMainTraceReader.h	/^class NVMainTraceReader : public GenericTraceReader$/;"	c	namespace:NVM
__NVMAINTRACEREADER_H__	traceReader/NVMainTrace/NVMainTraceReader.h	35;"	d
readVersion	traceReader/NVMainTrace/NVMainTraceReader.h	/^    bool readVersion;$/;"	m	class:NVM::NVMainTraceReader
trace	traceReader/NVMainTrace/NVMainTraceReader.h	/^    std::ifstream trace;$/;"	m	class:NVM::NVMainTraceReader
traceFile	traceReader/NVMainTrace/NVMainTraceReader.h	/^    std::string traceFile;$/;"	m	class:NVM::NVMainTraceReader
traceVersion	traceReader/NVMainTrace/NVMainTraceReader.h	/^    unsigned int traceVersion;$/;"	m	class:NVM::NVMainTraceReader
GetNextAccess	traceReader/RubyTrace/RubyTraceReader.cpp	/^bool RubyTraceReader::GetNextAccess( TraceLine *nextAccess )$/;"	f	class:RubyTraceReader
GetNextNAccesses	traceReader/RubyTrace/RubyTraceReader.cpp	/^int RubyTraceReader::GetNextNAccesses( unsigned int N, $/;"	f	class:RubyTraceReader
GetTraceFile	traceReader/RubyTrace/RubyTraceReader.cpp	/^std::string RubyTraceReader::GetTraceFile( )$/;"	f	class:RubyTraceReader
RubyTraceReader	traceReader/RubyTrace/RubyTraceReader.cpp	/^RubyTraceReader::RubyTraceReader( )$/;"	f	class:RubyTraceReader
SetTraceFile	traceReader/RubyTrace/RubyTraceReader.cpp	/^void RubyTraceReader::SetTraceFile( std::string file )$/;"	f	class:RubyTraceReader
~RubyTraceReader	traceReader/RubyTrace/RubyTraceReader.cpp	/^RubyTraceReader::~RubyTraceReader( )$/;"	f	class:RubyTraceReader
NVM	traceReader/RubyTrace/RubyTraceReader.h	/^namespace NVM {$/;"	n
RubyTraceReader	traceReader/RubyTrace/RubyTraceReader.h	/^class RubyTraceReader : public GenericTraceReader$/;"	c	namespace:NVM
__READRUBYTRACE_H__	traceReader/RubyTrace/RubyTraceReader.h	35;"	d
trace	traceReader/RubyTrace/RubyTraceReader.h	/^    std::ifstream trace;$/;"	m	class:NVM::RubyTraceReader
traceFile	traceReader/RubyTrace/RubyTraceReader.h	/^    std::string traceFile;$/;"	m	class:NVM::RubyTraceReader
GetAddress	traceReader/TraceLine.cpp	/^NVMAddress& TraceLine::GetAddress( )$/;"	f	class:TraceLine
GetCycle	traceReader/TraceLine.cpp	/^ncycle_t TraceLine::GetCycle( ) $/;"	f	class:TraceLine
GetData	traceReader/TraceLine.cpp	/^NVMDataBlock& TraceLine::GetData( )$/;"	f	class:TraceLine
GetOldData	traceReader/TraceLine.cpp	/^NVMDataBlock& TraceLine::GetOldData( )$/;"	f	class:TraceLine
GetOperation	traceReader/TraceLine.cpp	/^OpType TraceLine::GetOperation( )$/;"	f	class:TraceLine
GetThreadId	traceReader/TraceLine.cpp	/^ncounters_t TraceLine::GetThreadId( )$/;"	f	class:TraceLine
SetLine	traceReader/TraceLine.cpp	/^void TraceLine::SetLine( NVMAddress& addr, OpType op, ncycle_t cy, NVMDataBlock& data, NVMDataBlock& oldData, ncounters_t threadId )$/;"	f	class:TraceLine
TraceLine	traceReader/TraceLine.cpp	/^TraceLine::TraceLine( )$/;"	f	class:TraceLine
~TraceLine	traceReader/TraceLine.cpp	/^TraceLine::~TraceLine( )$/;"	f	class:TraceLine
NVM	traceReader/TraceLine.h	/^namespace NVM {$/;"	n
TraceLine	traceReader/TraceLine.h	/^class TraceLine$/;"	c	namespace:NVM
__TRACELINE_H__	traceReader/TraceLine.h	35;"	d
address	traceReader/TraceLine.h	/^    NVMAddress address;$/;"	m	class:NVM::TraceLine
cycle	traceReader/TraceLine.h	/^    ncycle_t cycle;$/;"	m	class:NVM::TraceLine
data	traceReader/TraceLine.h	/^    NVMDataBlock data;$/;"	m	class:NVM::TraceLine
oldData	traceReader/TraceLine.h	/^    NVMDataBlock oldData;$/;"	m	class:NVM::TraceLine
operation	traceReader/TraceLine.h	/^    OpType operation;$/;"	m	class:NVM::TraceLine
threadId	traceReader/TraceLine.h	/^    ncounters_t threadId;$/;"	m	class:NVM::TraceLine
CreateNewTraceReader	traceReader/TraceReaderFactory.cpp	/^GenericTraceReader *TraceReaderFactory::CreateNewTraceReader( std::string reader )$/;"	f	class:TraceReaderFactory
NVM	traceReader/TraceReaderFactory.h	/^namespace NVM {$/;"	n
TraceReaderFactory	traceReader/TraceReaderFactory.h	/^    TraceReaderFactory( ) { }$/;"	f	class:NVM::TraceReaderFactory
TraceReaderFactory	traceReader/TraceReaderFactory.h	/^class TraceReaderFactory$/;"	c	namespace:NVM
__TRACEREADER_TRACEREADERFACTORY_H__	traceReader/TraceReaderFactory.h	35;"	d
~TraceReaderFactory	traceReader/TraceReaderFactory.h	/^    ~TraceReaderFactory( ) { }$/;"	f	class:NVM::TraceReaderFactory
Cycle	traceSim/traceMain.cpp	/^void TraceMain::Cycle( ncycle_t \/*steps*\/ )$/;"	f	class:TraceMain
RequestComplete	traceSim/traceMain.cpp	/^bool TraceMain::RequestComplete( NVMainRequest* request )$/;"	f	class:TraceMain
RunTrace	traceSim/traceMain.cpp	/^int TraceMain::RunTrace( int argc, char *argv[] )$/;"	f	class:TraceMain
TraceMain	traceSim/traceMain.cpp	/^TraceMain::TraceMain( )$/;"	f	class:TraceMain
main	traceSim/traceMain.cpp	/^int main( int argc, char *argv[] )$/;"	f
~TraceMain	traceSim/traceMain.cpp	/^TraceMain::~TraceMain( )$/;"	f	class:TraceMain
NVM	traceSim/traceMain.h	/^namespace NVM {$/;"	n
TraceMain	traceSim/traceMain.h	/^class TraceMain : public NVMObject$/;"	c	namespace:NVM
__TRACESIM_TRACEMAIN_H__	traceSim/traceMain.h	37;"	d
outstandingRequests	traceSim/traceMain.h	/^    ncounter_t outstandingRequests;$/;"	m	class:NVM::TraceMain
DRAMPower2TraceWriter	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^DRAMPower2TraceWriter::DRAMPower2TraceWriter( ) : lastCommand(0)$/;"	f	class:DRAMPower2TraceWriter
GetPerChannelTraces	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::GetPerChannelTraces( )$/;"	f	class:DRAMPower2TraceWriter
GetPerRankTraces	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::GetPerRankTraces( )$/;"	f	class:DRAMPower2TraceWriter
GetTraceFile	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^std::string DRAMPower2TraceWriter::GetTraceFile( )$/;"	f	class:DRAMPower2TraceWriter
Init	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::Init( Config *conf )$/;"	f	class:DRAMPower2TraceWriter
SetNextAccess	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^bool DRAMPower2TraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:DRAMPower2TraceWriter
SetTraceFile	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::SetTraceFile( std::string file )$/;"	f	class:DRAMPower2TraceWriter
WriteTraceLine	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^void DRAMPower2TraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:DRAMPower2TraceWriter
~DRAMPower2TraceWriter	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.cpp	/^DRAMPower2TraceWriter::~DRAMPower2TraceWriter( )$/;"	f	class:DRAMPower2TraceWriter
DRAMPower2TraceWriter	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^class DRAMPower2TraceWriter : public GenericTraceWriter$/;"	c	namespace:NVM
NVM	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^namespace NVM {$/;"	n
PDN_F_ACT	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    enum pdStates { PUP, PDN_F_ACT, PDN_F_PRE, PDN_S_PRE }; $/;"	e	enum:NVM::DRAMPower2TraceWriter::pdStates
PDN_F_PRE	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    enum pdStates { PUP, PDN_F_ACT, PDN_F_PRE, PDN_S_PRE }; $/;"	e	enum:NVM::DRAMPower2TraceWriter::pdStates
PDN_S_PRE	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    enum pdStates { PUP, PDN_F_ACT, PDN_F_PRE, PDN_S_PRE }; $/;"	e	enum:NVM::DRAMPower2TraceWriter::pdStates
PUP	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    enum pdStates { PUP, PDN_F_ACT, PDN_F_PRE, PDN_S_PRE }; $/;"	e	enum:NVM::DRAMPower2TraceWriter::pdStates
__DRAMPOWER2TRACEWRITER_H__	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	35;"	d
deviceWidth	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    ncounter_t deviceWidth;$/;"	m	class:NVM::DRAMPower2TraceWriter
lastCommand	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    ncycle_t lastCommand;$/;"	m	class:NVM::DRAMPower2TraceWriter
pdState	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    pdStates pdState;$/;"	m	class:NVM::DRAMPower2TraceWriter
pdStates	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    enum pdStates { PUP, PDN_F_ACT, PDN_F_PRE, PDN_S_PRE }; $/;"	g	class:NVM::DRAMPower2TraceWriter
trace	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    std::ofstream trace, xmlFile;$/;"	m	class:NVM::DRAMPower2TraceWriter
traceFile	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    std::string traceFile;$/;"	m	class:NVM::DRAMPower2TraceWriter
xmlFile	traceWriter/DRAMPower2Trace/DRAMPower2TraceWriter.h	/^    std::ofstream trace, xmlFile;$/;"	m	class:NVM::DRAMPower2TraceWriter
GenericTraceWriter	traceWriter/GenericTraceWriter.cpp	/^GenericTraceWriter::GenericTraceWriter( ) : echo_on(false), perChannel(false), perRank(false)$/;"	f	class:GenericTraceWriter
GetEcho	traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetEcho( )$/;"	f	class:GenericTraceWriter
GetPerChannelTraces	traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetPerChannelTraces( )$/;"	f	class:GenericTraceWriter
GetPerRankTraces	traceWriter/GenericTraceWriter.cpp	/^bool GenericTraceWriter::GetPerRankTraces( )$/;"	f	class:GenericTraceWriter
Init	traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::Init( Config * \/*conf*\/ )$/;"	f	class:GenericTraceWriter
SetEcho	traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetEcho( bool echo )$/;"	f	class:GenericTraceWriter
SetNextNAccesses	traceWriter/GenericTraceWriter.cpp	/^int GenericTraceWriter::SetNextNAccesses( unsigned int N, std::vector<TraceLine *> *nextAccesses )$/;"	f	class:GenericTraceWriter
SetPerChannelTraces	traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetPerChannelTraces( bool perChannel )$/;"	f	class:GenericTraceWriter
SetPerRankTraces	traceWriter/GenericTraceWriter.cpp	/^void GenericTraceWriter::SetPerRankTraces( bool perRank )$/;"	f	class:GenericTraceWriter
~GenericTraceWriter	traceWriter/GenericTraceWriter.cpp	/^GenericTraceWriter::~GenericTraceWriter( )$/;"	f	class:GenericTraceWriter
GenericTraceWriter	traceWriter/GenericTraceWriter.h	/^class GenericTraceWriter$/;"	c	namespace:NVM
NVM	traceWriter/GenericTraceWriter.h	/^namespace NVM {$/;"	n
__GENERICTRACEWRITER_H__	traceWriter/GenericTraceWriter.h	35;"	d
echo_on	traceWriter/GenericTraceWriter.h	/^    bool echo_on;$/;"	m	class:NVM::GenericTraceWriter
perChannel	traceWriter/GenericTraceWriter.h	/^    bool perChannel;$/;"	m	class:NVM::GenericTraceWriter
perRank	traceWriter/GenericTraceWriter.h	/^    bool perRank;$/;"	m	class:NVM::GenericTraceWriter
GetTraceFile	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^std::string NVMainTraceWriter::GetTraceFile( )$/;"	f	class:NVMainTraceWriter
NVMainTraceWriter	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^NVMainTraceWriter::NVMainTraceWriter( )$/;"	f	class:NVMainTraceWriter
SetNextAccess	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^bool NVMainTraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:NVMainTraceWriter
SetTraceFile	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^void NVMainTraceWriter::SetTraceFile( std::string file )$/;"	f	class:NVMainTraceWriter
WriteTraceLine	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^void NVMainTraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:NVMainTraceWriter
~NVMainTraceWriter	traceWriter/NVMainTrace/NVMainTraceWriter.cpp	/^NVMainTraceWriter::~NVMainTraceWriter( )$/;"	f	class:NVMainTraceWriter
NVM	traceWriter/NVMainTrace/NVMainTraceWriter.h	/^namespace NVM {$/;"	n
NVMainTraceWriter	traceWriter/NVMainTrace/NVMainTraceWriter.h	/^class NVMainTraceWriter : public GenericTraceWriter$/;"	c	namespace:NVM
__NVMAINTRACEWRITER_H__	traceWriter/NVMainTrace/NVMainTraceWriter.h	35;"	d
trace	traceWriter/NVMainTrace/NVMainTraceWriter.h	/^    std::ofstream trace;$/;"	m	class:NVM::NVMainTraceWriter
traceFile	traceWriter/NVMainTrace/NVMainTraceWriter.h	/^    std::string traceFile;$/;"	m	class:NVM::NVMainTraceWriter
CreateNewTraceWriter	traceWriter/TraceWriterFactory.cpp	/^GenericTraceWriter *TraceWriterFactory::CreateNewTraceWriter( std::string writer )$/;"	f	class:TraceWriterFactory
NVM	traceWriter/TraceWriterFactory.h	/^namespace NVM {$/;"	n
TraceWriterFactory	traceWriter/TraceWriterFactory.h	/^    TraceWriterFactory( ) { }$/;"	f	class:NVM::TraceWriterFactory
TraceWriterFactory	traceWriter/TraceWriterFactory.h	/^class TraceWriterFactory$/;"	c	namespace:NVM
__TRACEWRITER_TRACEWRITERFACTORY_H__	traceWriter/TraceWriterFactory.h	35;"	d
~TraceWriterFactory	traceWriter/TraceWriterFactory.h	/^    ~TraceWriterFactory( ) { }$/;"	f	class:NVM::TraceWriterFactory
GetPerChannelTraces	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::GetPerChannelTraces( )$/;"	f	class:VerilogTraceWriter
GetPerRankTraces	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::GetPerRankTraces( )$/;"	f	class:VerilogTraceWriter
GetTraceFile	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^std::string VerilogTraceWriter::GetTraceFile( )$/;"	f	class:VerilogTraceWriter
Init	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::Init( Config *conf )$/;"	f	class:VerilogTraceWriter
SetNextAccess	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^bool VerilogTraceWriter::SetNextAccess( TraceLine *nextAccess )$/;"	f	class:VerilogTraceWriter
SetTraceFile	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::SetTraceFile( std::string file )$/;"	f	class:VerilogTraceWriter
VerilogTraceWriter	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^VerilogTraceWriter::VerilogTraceWriter( ) : lastCommand(0)$/;"	f	class:VerilogTraceWriter
WriteTraceLine	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^void VerilogTraceWriter::WriteTraceLine( std::ostream& stream, TraceLine *line )$/;"	f	class:VerilogTraceWriter
~VerilogTraceWriter	traceWriter/VerilogTrace/VerilogTraceWriter.cpp	/^VerilogTraceWriter::~VerilogTraceWriter( )$/;"	f	class:VerilogTraceWriter
NVM	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^namespace NVM {$/;"	n
VerilogTraceWriter	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^class VerilogTraceWriter : public GenericTraceWriter$/;"	c	namespace:NVM
__VERILOGTRACEWRITER_H__	traceWriter/VerilogTrace/VerilogTraceWriter.h	35;"	d
deviceWidth	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^    ncounter_t deviceWidth;$/;"	m	class:NVM::VerilogTraceWriter
lastCommand	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^    ncycle_t lastCommand;$/;"	m	class:NVM::VerilogTraceWriter
trace	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^    std::ofstream trace;$/;"	m	class:NVM::VerilogTraceWriter
traceFile	traceWriter/VerilogTrace/VerilogTraceWriter.h	/^    std::string traceFile;$/;"	m	class:NVM::VerilogTraceWriter
